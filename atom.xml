<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">
  <title>个人代码知识记录</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.jingzhengyi.top/"/>
  <updated>2021-03-29T02:39:14.028Z</updated>
  <id>https://blog.jingzhengyi.top/</id>
  
  <author>
    <name>Jing</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何做计划&amp;工具推荐</title>
    <link href="https://blog.jingzhengyi.top/2021/03/29/todoPlan/"/>
    <id>https://blog.jingzhengyi.top/2021/03/29/todoPlan/</id>
    <published>2021-03-29T01:43:00.000Z</published>
    <updated>2021-03-29T02:39:14.028Z</updated>
    
    <content type="html"><![CDATA[<p>原文:<a href="https://www.taniarascia.com/everyday-systems/" target="_blank" rel="noopener" title="原文">Everyday Systems That Help Me | Tania Rascia</a><br>自己给翻译了一下,现在有在用她推荐的 Strides ,我用的是免费版本.其他的还是用我之前用的软件.</p><p>读过 <a href="">好生活的误解</a>(<a href="https://zenhabits.net/unoptimizing/" target="_blank" rel="noopener">https://zenhabits.net/unoptimizing/</a>) , 很受触动,我现在认为 <a href="">智者为自己制定规则</a>(<a href="https://www.raptitude.com/2017/07/wise-people-have-rules-for-themselves/" target="_blank" rel="noopener">https://www.raptitude.com/2017/07/wise-people-have-rules-for-themselves/</a>) 对我来说是正确的方法.</p><p>前者试图说明，“不要试图建立一个完美的系统，没有什么是完美的，所以只要放松，习惯混乱，并试图把你所有的注意力集中在一件事情上。”。后者说，“建立自我强加的个人规则，因为当你的标准明确时，你的生活质量就会提高。”。</p><p>Boundaries</p><hr><p>I set boundaries in my life. I think it’s useful to preemptively tackle sources of stress rather than hacking away at a problem that’s already created.</p><ul><li>消除不停的刷新社交 app</li><li>大幅减少社交媒体</li><li>大幅减少通知</li><li>大幅减少邮件接收</li><li>把工作和生活分开</li></ul><h3 id="社交软件-and-不停刷屏-infinite-scrolling"><a href="#社交软件-and-不停刷屏-infinite-scrolling" class="headerlink" title="社交软件 and 不停刷屏(infinite scrolling)"></a>社交软件 and 不停刷屏(infinite scrolling)</h3><p>我已经训练自己不要使用。不用浏览 Twitter，不用浏览 reddit，不用浏览 Instagram，我已经很多年没有使用 Facebook 了。根本不用</p><p>I don’t want to say something absolute like, “reddit is completely off limits!” because that’s not the problem. Visiting the “Build a PC” subreddit to find advice on how to build a PC is fine. Infinitely scrolling through the front page or anything else is not. It’s just a useless waste of time and addiction for me. So although I technically have accounts on some of these platforms, I have none of them installed on my phone and I almost never visit them unless I have an express purpose to.</p><h3 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h3><p>我手机上只有两个通知: 电子邮件和短信。(还有日历事件，但是因为 2020 年我几乎没有日历事件，所以我差点忘了。)正如我上面提到的，我的手机上没有任何社交媒体应用。从浅层交互作用中获得的多巴胺越少越好。</p><p>推特是我与外部世界的唯一联系，因为它是我与其他开发者联系的地方，也是我推广我的工作的唯一地方，但我仍然只是每隔几天或每周查看一次。我也让 Slack 远离我的手机。</p><h3 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h3><p>我练习收件箱为零。我尽量及时回复那些需要我回复的邮件。我不回复我收到的所有甚至大部分邮件。我明确表示我不想在东西(来宾帖子、赞助商、广告请求)会被自动标记为垃圾邮件。那些没有明确要求我退订并标记为垃圾邮件的网站为我注册了他们的时事通讯。这导致我很少收到邮件，而我收到的邮件都是能学到东西的人的。</p><h3 id="Work-hours"><a href="#Work-hours" class="headerlink" title="Work hours"></a>Work hours</h3><p>现在，工作就是我的家，就像我们许多人的家一样。朝九晚五是我的工作时间，5 点以后我不做任何与工作相关的事情，除非有明确的特殊需要。我的手机上没有安装任何工作应用程序或连接(团队、 Slack、 Outlook、工作邮件)。</p><p>Systems</p><hr><p>我一直在高效地使用各种单一用途的应用程序。</p><ul><li>保存我所有的个人笔记、记忆、文章和列表 使用<a href="https://bear.app/" target="_blank" rel="noopener">Bear, 好像是改</a></li><li>跟踪我每天想做的任务/习惯/系统的网站 <a href="https://www.stridesapp.com/" target="_blank" rel="noopener">Strides</a></li><li>One to track the various to-dos I don’t want to forget <a href="https://todoist.com/app/#start" target="_blank" rel="noopener">Todoist</a></li></ul><blockquote><p>Secret note: I built <a href="">my own application</a>(<a href="https://takenote.dev/" target="_blank" rel="noopener">https://takenote.dev/</a>) for handling notes instead of using some other system, because none of the ones I found did exactly what I wanted. In the year I was building this app, I left my thoughts in limbo. I have since realized building and maintaining your own app for something like this is not the best approach. I did learn a ton while doing it, so it was overall a very positive experience.</p></blockquote><p>我不认为它们是不是应用程序真的很重要——你可以使用一本日记或随机的纸张。我不喜欢手写，所以应用程序让我写起来更容易。只要我有一个地方，我知道我可以去检索任何我想要记住或工作，和小日常事情不会落入缝隙。</p><p>我总是觉得我不能做乏味的，daily 任务(预算，计算卡路里，日记)。我过去从来没有做好过，而且我总是那么自由自在的生活！但事实证明，这些习惯并不是那么难以忍受，而且好处远远大于好处。</p><p>当然，你永远不可能一直做所有的事情。你会错过一天的锻炼。你会很累，然后上床睡觉。这很好——只需要毫不气馁地开始每一天崭新的一天。</p><p>Note, I’m only discussing the physical things I do here, not any mental thought processes I have.</p><h3 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h3><p>我每天都做的一些事情.</p><ul><li>整理床铺</li><li>清洗所有用的碗</li><li>整理衣服</li></ul><p>我从来不会把东西弄得一团糟，但是我可能会把事情搁置一、三天——几个盘子堆在一起，衣服堆在地板上，床永远不会整理好。现在我起床后立刻整理床铺，在做饭的时候洗盘子，立刻把衣服放到它们该放的地方。家里总是感觉干净整洁，尽管几乎没有时间和精力必须走进去，因为从来没有超过一天的菜肴或衣服处理的时间。</p><h3 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h3><p>是的，是的。锻炼身体是好的。我觉得我的认知是正确的。因为芝加哥是寒冷的自动对焦，户外运动几乎是不可能的，而且我不想成为健身房的会员。所以我只是选择一个数字(pick up a number ?)，每天做这些事情:</p><ul><li>仰卧起坐 Situps</li><li>俯卧撑 Pushups</li><li>下蹲 Squats</li><li>(如果天气允许的话)去散步/骑自行车 Take a walk/bike ride (weather permitting)</li></ul><p>你真的不能找借口不做前三项，因为它们不需要任何设备或空间。我每天花 45 分钟到 1 小时做这些运动，还有伸展运动。可以很容易地完成，同时一边看与电视或音频一边做。至于散步，我经常在一两英里外选一家咖啡馆，然后走到那里再回来喝杯咖啡。如果是骑自行车的天气，我会每周骑几次 10 英里(1 小时)。</p><h3 id="睡觉"><a href="#睡觉" class="headerlink" title="睡觉"></a>睡觉</h3><p>我经常在凌晨 1 点或 2 点起床，只是听听音乐，玩玩视频游戏，看看 Netflix，或者上上网。我也是一个习惯性打盹的人，通常在早上设置 3 个闹钟。现在我有了一条规则:</p><ul><li>In bed by midnight</li><li>Don’t snooze - wake up to the first alarm</li></ul><p>这很难,但我知道每次我这样生活，事情都会变得更好。有时候，你不得不做那些在当下糟糕的事情，为了今后的一天/一周/一个月/一年/一年/一生。</p><h3 id="Track-net-worth"><a href="#Track-net-worth" class="headerlink" title="Track net worth"></a>Track net worth</h3><p>I’ve been tracking my net worth for several years now. I see a lot of people budget month-to-month, but I like seeing the big picture. I just add up all my assets (checking/savings accounts, retirement accounts, stocks, crypto) and debts (credit cards, car loans, phone payments, student loans). Yes, that means if you have no retirement accounts or money in the bank and you owe $100,000 on student loans, your net worth is negative. I don’t like having any debt, so this helped me early on in my life to pay off all my student loans, and buy a cheap car with cash, and so on.</p><p>I just made my own custom Google Sheets page and I input all the numbers at the end of every month. So this is a “once a month” habit as opposed to some of the other “once a day” ones.</p><h3 id="Learning-and-practice"><a href="#Learning-and-practice" class="headerlink" title="Learning and practice"></a>Learning and practice</h3><p>I haven’t necessarily felt the most amount of focus in my life. Art and music don’t come as naturally to me as they used to. Although I want to practice music, for example, and learn new songs and how to sight read music, I don’t always feel the motivation to do so. Nonetheless, I’ve set up a daily thing to do - in this case, 10 minutes of sheet music flash card practice. It has the dual benefit of being a more productive thing to do while waiting in line somewhere than scrolling through the news or reddit, and I’ll be that much ahead when I do decide to sit down and learn a song.</p><p>So basically it was more productive for me to say “Practice sheet music 10 minutes a day” than “Learn this song” which is bigger and requires more upfront effort. And requires me to do something that isn’t coding related, which is where I’ll naturally gravitate for hobby purposes.</p><h3 id="Do-the-annoying-thing-immediately"><a href="#Do-the-annoying-thing-immediately" class="headerlink" title="Do the annoying thing immediately"></a>Do the annoying thing immediately</h3><p>There is nothing I hate more than dealing with bureaucracy. Paying bills by mail when I can’t do it any other way, calling up any sort of automated system, stuff like that. I usually put off very simple tasks like paying a bill or renewing car insurance for weeks or months, and it’s always sitting in the back of my mind as something I know I need to do but I really, really don’t want to.</p><p>I’m personally making an effort to put those on my daily to-do list and just getting them done. It’s so much better than sitting there and knowing there’s an annoying thing to do for weeks on end.</p><h3 id="Daily-journaling"><a href="#Daily-journaling" class="headerlink" title="Daily journaling"></a>Daily journaling</h3><p>Recently, Matthew McConaughey was <a href="">on the JRE podcast</a>(<a href="https://www.youtube.com/watch?v=BBCl9A9NlRw" target="_blank" rel="noopener">https://www.youtube.com/watch?v=BBCl9A9NlRw</a>) and talked about how he has kept a journal every day for basically his entire life. This is something I’ve never been able to do - I’ve just kind of been going through it day by day and living life in the moment. But there was some great advice there - when things are good, keep track of what’s going well. When things are bad, see all the factors of what was going on in your life during those times as well.</p><p>At least for myself, I occasionally have bouts where life just isn’t going the way I want, and I feel anxious and depressed seemingly out of nowhere. Then at other times, everything is going great, and I don’t know why. How much of it is within my control? How much is from external factors? Without having really kept track of anything that’s going on in my life, it’s really hard to say.</p><p>I’m aiming to adopt this strategy myself now. I can say things are going pretty well for me right now. I feel good at the moment, even with all the political craziness and lockdown and isolation and having a relatively recent breakup. I don’t feel anxiety or depression, and I feel a lot of positivity, hope, and potential. I know I won’t be able to write a detailed diary entry every single day of my life, but I’m making a point to remember to do it relatively often, and when important or interesting things happen.</p><p>Conclusion</p><hr><p>再说一次，这只是我在谈论我在做什么，而不是给你提供建议。所有的情况都是独一无二的，再加上我没有丈夫或孩子让我忙碌。不用上下班也可以腾出时间来处理这些任务。</p><p>顺便说一下，在这些系统中没有任何关于写作。我没有为写作设定任何任务、习惯、目标或系统。我只是想写就写。人们有时会问我，我是怎么写了这么多文章的，想象着我是如此高效，并且一直在做这件事。说实话，我每个月都会有一两天坐下来写作。这样做超过 5 年,你会感觉到你做了很多</p><p>最后，如果我只能恳求你每天做一件事，那就是牙线。照做就是了。只需要 15 秒。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文:&lt;a href=&quot;https://www.taniarascia.com/everyday-systems/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;原文&quot;&gt;Everyday Systems That Help Me | Tani
      
    
    </summary>
    
    
      <category term="plan" scheme="https://blog.jingzhengyi.top/categories/plan/"/>
    
    
  </entry>
  
  <entry>
    <title>滚动样式</title>
    <link href="https://blog.jingzhengyi.top/2021/03/22/scrollcss/"/>
    <id>https://blog.jingzhengyi.top/2021/03/22/scrollcss/</id>
    <published>2021-03-22T03:27:00.000Z</published>
    <updated>2021-03-29T02:34:37.307Z</updated>
    
    <content type="html"><![CDATA[<p>时不时会有些需求 ,如宣传页然后要求页面滚动跟随之类的要求.最近有些想法:</p><ul><li>最好不用 react 之类,最近看资料然后感觉 svelte 不错.</li><li>样式之类 ,个人挺头疼的</li><li>手机适配感觉其实挺难的,但是感觉大部分需求其实还没到用框架的底部,如宣传页面,几个页面,如果设计出的强,照着他给的宽高严格写就行了.然后加一些 meta 头信息</li></ul><p>言归正传,页面滚动相关的 css 如下:</p><h3 id="方案一-scrolltrigger-库"><a href="#方案一-scrolltrigger-库" class="headerlink" title="方案一 scrolltrigger 库"></a>方案一 <a href="https://greensock.com/scrolltrigger/" target="_blank" rel="noopener">scrolltrigger 库</a></h3><ul><li>codepen <a href="https://codepen.io/collection/AEbkkJ?cursor=ZD0xJm89MCZwPTEmdj01MzQzOTYy" target="_blank" rel="noopener">https://codepen.io/collection/AEbkkJ?cursor=ZD0xJm89MCZwPTEmdj01MzQzOTYy</a><br>![scrollcss][pics/scrollcss.gif]</li></ul><h3 id="方案二-Animate-Text-on-Scroll"><a href="#方案二-Animate-Text-on-Scroll" class="headerlink" title="方案二 Animate Text on Scroll"></a>方案二 <a href="https://css-tricks.com/animate-text-on-scroll/" target="_blank" rel="noopener">Animate Text on Scroll</a></h3><p>![scrollcss2][./pics/scrollcss2.gif]<br>Animate text along a path on scroll using SVG and a scoop of vanilla JavaScript. Tutorial by Stephen Shaw (@shshaw) of the @keyframers.<br>  * 💻 Final Code &amp; Demo: <a href="https://cdpn.io/pen/NWKyNqK" target="_blank" rel="noopener">https://cdpn.io/pen/NWKyNqK</a></p><ul><li><p>📺 Video: <a href="https://youtu.be/Tae96ze3xwY" target="_blank" rel="noopener">https://youtu.be/Tae96ze3xwY</a></p></li><li><p>💡 Inspiration: New York Times article, shared by Jen Simmons <a href="https://www.nytimes.com/interactive/2" target="_blank" rel="noopener">https://www.nytimes.com/interactive/2</a>…<br>Additional Resources:</p></li><li><p>Affinity Designer Vector Design App <a href="https://affinity.serif.com/en-us/designer/" target="_blank" rel="noopener">https://affinity.serif.com/en-us/designer/</a></p></li><li><p>SVGOMG by Jake Archibald <a href="https://jakearchibald.github.io/svgomg" target="_blank" rel="noopener">https://jakearchibald.github.io/svgomg</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.clear();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> textPath = <span class="built_in">document</span>.querySelector(<span class="string">"#text-path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> textContainer = <span class="built_in">document</span>.querySelector(<span class="string">"#text-container"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">document</span>.querySelector(textPath.getAttribute(<span class="string">"href"</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pathLength = path.getTotalLength();</span><br><span class="line"><span class="built_in">console</span>.log(pathLength);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateTextPathOffset</span>(<span class="params">offset</span>) </span>&#123;</span><br><span class="line">  textPath.setAttribute(<span class="string">"startOffset"</span>, offset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">updateTextPathOffset(pathLength);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onScroll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  requestAnimationFrame(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> rect = textContainer.getBoundingClientRect();</span><br><span class="line">    <span class="keyword">var</span> scrollPercent = rect.y / <span class="built_in">window</span>.innerHeight;</span><br><span class="line">    <span class="built_in">console</span>.log(scrollPercent);</span><br><span class="line">    updateTextPathOffset(scrollPercent * <span class="number">2</span> * pathLength);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"scroll"</span>, onScroll);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;时不时会有些需求 ,如宣传页然后要求页面滚动跟随之类的要求.最近有些想法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最好不用 react 之类,最近看资料然后感觉 svelte 不错.&lt;/li&gt;
&lt;li&gt;样式之类 ,个人挺头疼的&lt;/li&gt;
&lt;li&gt;手机适配感觉其实挺难的,但是感觉大部分需
      
    
    </summary>
    
    
      <category term="css" scheme="https://blog.jingzhengyi.top/categories/css/"/>
    
    
  </entry>
  
  <entry>
    <title>js里的this</title>
    <link href="https://blog.jingzhengyi.top/2021/03/14/js_this/"/>
    <id>https://blog.jingzhengyi.top/2021/03/14/js_this/</id>
    <published>2021-03-14T10:54:00.000Z</published>
    <updated>2021-03-15T01:19:36.484Z</updated>
    
    <content type="html"><![CDATA[<p>这周逛 v2 由看到有人发 js 的 this 的题目,然后说能做出来的都得算多少年薪……..个人感觉这种知识大部分都是为了应付面试,而且道格拉斯克罗克福特 说过 js 是最好的语言,但是你要用它 good part.<br>不过周末正好看到 相关的一篇<a href="https://web.dev/javascript-this/" target="_blank" rel="noopener" title="JavaScript: What is the meaning of this?">文章</a>,发出来,比如有时候为什么调用要加 that =this 避免找不到 还是有点作用的毕竟.</p><h2 id="If-the-function-is-defined-as-an-arrow-function"><a href="#If-the-function-is-defined-as-an-arrow-function" class="headerlink" title="If the function is defined as an arrow function"></a>If the function is defined as an arrow function</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const arrwoFunction &#x3D; ()&#x3D;&gt;&#123;</span><br><span class="line">  console.log(this)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>this 和父级 this 是一样.</p><ul><li>call or apply 不能改变 箭头函数 的 this</li></ul><h2 id="Otherwise-if-the-function-class-is-called-with-new"><a href="#Otherwise-if-the-function-class-is-called-with-new" class="headerlink" title="Otherwise, if the function/class is called with new"></a>Otherwise, if the function/class is called with new</h2><p>this 被设置成 Object.create(….prototype)的返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line"><span class="keyword">this</span>.constructor === <span class="built_in">Object</span>.create(MyClass.prototype).constructor</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">// Logs true</span></span><br><span class="line"><span class="keyword">new</span> MyClass()</span><br></pre></td></tr></table></figure><h2 id="Otherwise-if-the-function-has-a-‘bound’-this-value"><a href="#Otherwise-if-the-function-has-a-‘bound’-this-value" class="headerlink" title="Otherwise, if the function has a ‘bound’ this value"></a>Otherwise, if the function has a ‘bound’ this value</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">someFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> boundObject = &#123; <span class="attr">hellp</span>: <span class="string">"world"</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> boundFunction = someFunction.bind(boundObject);</span><br></pre></td></tr></table></figure><p>当 boundFuncton 被调用,this 指向 boundObject</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// false</span></span><br><span class="line">someFunction() === boundObject;</span><br><span class="line"><span class="comment">//true</span></span><br><span class="line">boundFunction() === boundObject;</span><br></pre></td></tr></table></figure><h2 id="Otherwise-if-this-is-set-at-call-time"><a href="#Otherwise-if-this-is-set-at-call-time" class="headerlink" title="Otherwise, if this is set at call-time"></a>Otherwise, if this is set at call-time</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">someFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> someObject = &#123; <span class="attr">hellp</span>: <span class="string">"world"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(someFunction.call(someObject) === someObject);</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(someFunction.apply(someObject) === someObject);</span><br></pre></td></tr></table></figure><h2 id="Otherwise-if-the-function-is-called-via-a-parent-object"><a href="#Otherwise-if-the-function-is-called-via-a-parent-object" class="headerlink" title="Otherwise, if the function is called via a parent object"></a>Otherwise, if the function is called via a parent object</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  someMethod() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">obj.someMethod() === obj;</span><br></pre></td></tr></table></figure><p>in this case the function is called as a member of obj, so this will be obj,the link is broken if the function is called without its object</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; someMethod &#125; = obj;</span><br><span class="line"><span class="comment">//false</span></span><br><span class="line">someMethod() === obj;</span><br></pre></td></tr></table></figure><h2 id="Otherwise-if-the-function-or-parent-scope-is-in-strict-mode"><a href="#Otherwise-if-the-function-or-parent-scope-is-in-strict-mode" class="headerlink" title="Otherwise, if the function or parent scope is in strict mode"></a>Otherwise, if the function or parent scope is in strict mode</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">someFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  "use strict"</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line">someFunction() === <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><p>如果父级是严格模式,不写’use strict’ 结果也是一样的</p><h2 id="Otherwise"><a href="#Otherwise" class="headerlink" title="Otherwise"></a>Otherwise</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">someFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">someFunction() === globalThis;</span><br></pre></td></tr></table></figure><p>this 指向全局 this</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这周逛 v2 由看到有人发 js 的 this 的题目,然后说能做出来的都得算多少年薪……..个人感觉这种知识大部分都是为了应付面试,而且道格拉斯克罗克福特 说过 js 是最好的语言,但是你要用它 good part.&lt;br&gt;不过周末正好看到 相关的一篇&lt;a href=&quot;h
      
    
    </summary>
    
    
      <category term="js" scheme="https://blog.jingzhengyi.top/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>vue3 typescript config</title>
    <link href="https://blog.jingzhengyi.top/2021/03/08/vue3_ts/"/>
    <id>https://blog.jingzhengyi.top/2021/03/08/vue3_ts/</id>
    <published>2021-03-08T01:19:00.000Z</published>
    <updated>2021-03-08T02:14:34.216Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue3-typescript"><a href="#vue3-typescript" class="headerlink" title="vue3 typescript"></a>vue3 typescript</h1><p>Vue Mastery 现时免费相关课程 <a href="(https://www.vuemastery.com/courses/vue3-typescript/creating-components-with-typescript)">Vue 3 + TypeScript course</a> 到20213月9号,然后自己看了一遍,总结了一下发出来.</p><h2 id="init-with-vuecli"><a href="#init-with-vuecli" class="headerlink" title="init with vuecli"></a>init with vuecli</h2><p>用工具初始化,会有提示是否用ts.</p><h2 id="create-components-with-ts"><a href="#create-components-with-ts" class="headerlink" title="create components with ts"></a>create components with ts</h2><p>对应代码看 <a href="(https://github.com/Code-Pop/Real-World-Vue-3-TypeScript)">Real World Vue 3 TypeScript GitHub Repo</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lant=<span class="string">"ts"</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123;defineComponent &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> EVentCard <span class="keyword">from</span> <span class="string">'../components/EventCard.vue'</span></span><br><span class="line"><span class="keyword">import</span> EventService <span class="keyword">from</span> <span class="string">'../services/EventService'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponnets(&#123;</span><br><span class="line">    name:<span class="string">'EventList'</span>,</span><br><span class="line">    components:&#123;EventCard&#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">events</span>:<span class="literal">null</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created()&#123;</span><br><span class="line">      EventService.getEvents().</span><br><span class="line">        then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">         ...&#125;</span><br><span class="line">    &#125;</span><br><span class="line">....</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="VueDX"><a href="#VueDX" class="headerlink" title="VueDX"></a>VueDX</h2><p>ide 支持是用的[VueDX][ref3]这个工具</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> TodoItem&#123;</span><br><span class="line">   label:<span class="built_in">string</span></span><br><span class="line">   complete:<span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> futureTodoItem =&#123;&#125; <span class="keyword">as</span> TOdoItem</span><br></pre></td></tr></table></figure><h2 id="Props-with-Types"><a href="#Props-with-Types" class="headerlink" title="Props with Types"></a>Props with Types</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineComponent ,PropType &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line">exprt <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line"></span><br><span class="line">    props :&#123;</span><br><span class="line">        event: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">Object</span> <span class="keyword">as</span> PropType&lt;EventItem&gt;,</span><br><span class="line">            <span class="built_in">require</span>:<span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">....</span><br></pre></td></tr></table></figure><h2 id="Computed-amp-Methods-with-Custom-Types"><a href="#Computed-amp-Methods-with-Custom-Types" class="headerlink" title="Computed &amp; Methods with Custom Types"></a>Computed &amp; Methods with Custom Types</h2><p>重点在想返回什么</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.....</span><br><span class="line">computed:&#123;</span><br><span class="line">  firstEvent():EventItem&#123;</span><br><span class="line">      ....</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="others-扩充资料"><a href="#others-扩充资料" class="headerlink" title="others 扩充资料"></a>others 扩充资料</h2><ul><li>The official Vue docs that now has a dedicated TypeScript section that will continue to grow as the ecosystem matures.<ul><li><a href="https://v3.vuejs.org/guide/typescript-support.html#typescript-support" target="_blank" rel="noopener">https://v3.vuejs.org/guide/typescript-support.html#typescript-support</a></li></ul></li><li>And of course, the official TypeScript docs site for an in-depth look at TypeScript<ul><li><a href="https://www.typescriptlang.org/docs/" target="_blank" rel="noopener">https://www.typescriptlang.org/docs/</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue3-typescript&quot;&gt;&lt;a href=&quot;#vue3-typescript&quot; class=&quot;headerlink&quot; title=&quot;vue3 typescript&quot;&gt;&lt;/a&gt;vue3 typescript&lt;/h1&gt;&lt;p&gt;Vue Mastery 现时免费相关
      
    
    </summary>
    
    
      <category term="vue3" scheme="https://blog.jingzhengyi.top/categories/vue3/"/>
    
      <category term="typescript" scheme="https://blog.jingzhengyi.top/categories/vue3/typescript/"/>
    
    
      <category term="typescript" scheme="https://blog.jingzhengyi.top/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>理解 React Native Bridge 的概念</title>
    <link href="https://blog.jingzhengyi.top/2021/02/28/ReactNativeBridge/"/>
    <id>https://blog.jingzhengyi.top/2021/02/28/ReactNativeBridge/</id>
    <published>2021-02-28T10:30:00.000Z</published>
    <updated>2021-02-28T11:39:37.158Z</updated>
    
    <content type="html"><![CDATA[<h1 id="理解-React-Native-Bridge-的概念"><a href="#理解-React-Native-Bridge-的概念" class="headerlink" title="理解 React Native Bridge 的概念"></a>理解 React Native Bridge 的概念</h1><blockquote><p>ref <a href="https://hackernoon.com/understanding-react-native-bridge-concept-e9526066ddb8" target="_blank" rel="noopener">origin</a><br>这里有一篇由 Tadeu Zagallo 发表的很老但是很棒很深奥的文章来解释这座桥是如何在 iOS 上实现的。<br>React Native 通常被认为是一个游戏规则改变者，它允许在移动环境中运行 JavaScript 代码。它的主要优势在于它不像其他竞争对手那样依赖于网络视图(Phonegap，Ionic，Cordova…) ，而是依赖于不同平台提供的真实材料。它具有对所有本机视图和组件的内置访问权，以及对大约70个特定设备 api 的默认访问权(您可以对其进行扩展)。</p></blockquote><p>在编写 React Native 应用程序时，我们构建了本地 ui。这就是关键所在，我们创建 UIView 实例，就像我们创建特定于平台的语言一样:</p><p>我对这个框架的第一个假设是这样的:</p><blockquote><p>他们可能会创建一个 <strong>AST</strong> 并将其转换为可在多个设备上运行</p></blockquote><p>这是有道理的，这实际上就是 Google/Flutter 在开发应用程序时所做的。但这不是RN的方式。</p><p>这种方法的主要问题是，基于 JavaScript 代码的编译目标平台意味着要创建新的编译器。我不知道有哪个现有的工具接受 JavaScript 作为输入代码，能够为每个目标平台生成代码<br><img src="https://hackernoon.com/hn-images/1*bf7U0_eRo_342L3I51gyPQ.png" alt="注意: 有些人尝试过，但只是用opinionated 的方法进行mobile开发"></p><p>但目前存在的是针对自己特定平台的编译器。例如，我们有接受 Java/Kotlin 代码和目标 Android 平台或 Obj-C/Swift 目标 iOS 平台的编译器。它存在许多不同语言和目标的编译器。它们之所以能够很好地完成工作，是因为它们被设计成能够为它们创造出最优化的开发语言。</p><p>使用现有的编译器:<br><img src="https://hackernoon.com/hn-images/1*sucxk9LMqW9booBv4f02cg.png" alt="It’s built with a really opened architecture that allows the code to be run, not only on mobile devices, but also on other platforms:"></p><p>它采用真正开放的架构，不仅可以在移动设备上运行，也可以在其他平台上运行:</p><ul><li>桌面应用程序</li><li>虚拟现实</li><li>还有更多<br>它也可以用于其他框架:</li><li>Weex(deprecated )</li><li>用RN 渲染器 运行angluar 应用</li></ul><p>那么，团队是如何通过使用现有的工具和编译器来构建这样一个与平台和框架无关的框架的呢？</p><h3 id="多个领域相互作用，没有其他"><a href="#多个领域相互作用，没有其他" class="headerlink" title="多个领域相互作用，没有其他"></a><strong>多个领域相互作用，没有其他</strong></h3><p>让我们退一步，看看 React Native 的大图。</p><p>React Native 处理两个领域，JavaScript 和 Native。他们都能够共享信息。他们使用“JS Bridge”进行通信，这无疑是 React Native 架构的核心，这部分提供了如此多的灵活性。</p><p>JS Bridge这个概念为这两个宇宙之间的双向和异步通信提供了一种方式。这里重要的是，它们完全是用不同的技术编写的，但是它们能够通信。<br><img src="https://hackernoon.com/hn-images/1*JT_Smf1u3fJTBY8ev9WAzg.png" alt="JS threads communicates with the native ones through the bridge JS 线程通过桥接与本地线程进行通信"></p><h3 id="记住你的后端"><a href="#记住你的后端" class="headerlink" title="记住你的后端"></a><strong>记住你的后端</strong></h3><p>让我们回想一下，当我们使用多服务通信编写分布式后端应用程序时。<br>我们如何管理在语言/平台级别上完全不同的两个服务之间的通信？<br>我们使用可互操作的语言，如 JSON 或 XML，并且我们依赖异步协议，如 AMQP (或任何其他协议)。<br><img src="https://hackernoon.com/hn-images/1*9PsB7QpiXxg7bnmzS1UgCg.png" alt="Bidirectional communications between heterogeneous services"></p><p>如果我们希望这两个服务进行通信，我们依赖于消息队列。第一个服务将一些命令推送到队列中，另一个服务必须在可能的情况下执行这些命令。<br>React Native 的行为也是如此。JavaScript 域发送异步 JSON 消息，描述 Native 部分应该完成的操作。</p><p>例如，JavaScript 端将发送有关必须由 Native 端创建的视图的信息。当 nativeside 准备好后，它将有效地创建视图:<br><img src="https://hackernoon.com/hn-images/1*UHBv6Ctmm6n6xV0iED8zqA.png" alt="JavaScript sends commands asynchronously to the Native side for view management, with JSON JavaScript"><br>JavaScript 使用 JSON 异步将命令发送到 Native 端进行视图管理<br>在 React Native 中，桥接器支持消息代理角色，处理两个不同开发语言之间的异步命令。</p><p>它提供了多种可能性:</p><ul><li>因为它是异步的，所以它是非阻塞的，因此允许在屏幕上顺利地进行视图管理(6O fps 是 React Native 的黄金目标)</li><li>因为它是解耦的，并且基于可互操作的语言，所以它对其他框架和渲染系统开放 只要他们尊重 React Native bridge 命令界面<br>JS Bridge的语言越是无处不在，越是通用，可能性就越大… … 的确如此！</li></ul><h3 id="桥接的实现"><a href="#桥接的实现" class="headerlink" title="桥接的实现"></a><strong>桥接的实现</strong></h3><p>网桥是用 c/c + + 构建的，因此，可以在多个平台、操作系统等上运行。</p><p>它嵌入了苹果的 <em>JavaScriptCore</em> 框架，这个框架公开了 api 来访问实际的 javacripcore VM 功能。许多人在 Obj-C 和 Swift 世界中使用这些 api。但是有一个 C api，Obj-C 实际上只是一个包装器。</p><p>考虑到这一点，JavaScript 代码可以在 c/c++ 程序中运行。它可以注入变量、函数和声明全局变量来增强 JavaScript 现有代码。React Native 依靠这种魔法来使 JavaScript 与本机世界通信，从而触发 c/c++ 世界中的动作。</p><p>在 JavaScript 代码中注入内容也意味着函数可以由 c/c++ 代码执行。</p><p>这个图很快总结了 JavaScript 世界是如何处理 c/c++ one 的:<br><img src="https://hackernoon.com/hn-images/1*a6tsmWbB6JtgnOWy7Hyx0A.png" alt="The JS code is managed by the JSCore framework \\"></p><h3 id="原生的一面"><a href="#原生的一面" class="headerlink" title="原生的一面"></a>原生的一面</h3><p>原生方面的通信是“最简单的”部分。</p><p>让我们从 iOS 平台开始。由于 Obj-C 是 c 语言的扩展，它可以与 c 语言进行本机通信。这样，JS Bridge 与 Swift/Obj-C 世界之间的通信就变得简单而自然。<br><img src="https://hackernoon.com/hn-images/1*OhI5FguDjCJiMHGkyRUcwg.png" alt=" JS 与 iOS 世界交互的高层示意图"></p><p>在 Android 平台上，我们需要依靠 Java本地接口来与桥接器进行对话。<br><img src="https://hackernoon.com/hn-images/1*q16vcoe7CRolZLOCoG5_Pg.png" alt="JS 与 Android 世界交互的高级图表"></p><p>如果您对 React Native 内部构件有进一步的问题，请告诉我。关于这个话题，我会尽量提供我所知道的一切。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;理解-React-Native-Bridge-的概念&quot;&gt;&lt;a href=&quot;#理解-React-Native-Bridge-的概念&quot; class=&quot;headerlink&quot; title=&quot;理解 React Native Bridge 的概念&quot;&gt;&lt;/a&gt;理解 React
      
    
    </summary>
    
    
      <category term="h5" scheme="https://blog.jingzhengyi.top/categories/h5/"/>
    
    
      <category term="\-" scheme="https://blog.jingzhengyi.top/tags//"/>
    
  </entry>
  
  <entry>
    <title>前端-相关技能点我了解的</title>
    <link href="https://blog.jingzhengyi.top/2021/02/06/frontend-what-i-leaned/"/>
    <id>https://blog.jingzhengyi.top/2021/02/06/frontend-what-i-leaned/</id>
    <published>2021-02-06T10:30:00.000Z</published>
    <updated>2021-02-06T10:49:50.862Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js该学点啥"><a href="#js该学点啥" class="headerlink" title="js该学点啥"></a>js该学点啥</h1><p>“没有人因为java而失业” 对于该如何选择开发语言,我个人还是很喜欢javascript.但是也感觉挺痛苦的,对于一个跟着别人学的人来说.学过了vue,react各种框架,感觉其实基本就是一个功能学了不同的实现方式,现在想想感觉还是挺没啥成就感的.<br>总结一下我现在的感觉的js相关的技能点</p><h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><p>这个是在我学习redux时候接触的.然后最近看过了json的作者的在frontendmaster的课程,然后他总结99%的js开发者不知道js其实还可以这么写….感觉老爷子都胡子花白,虽然他的课程是16年的,而且长达10小时,但是感觉还是值得一看的.作为入门.</p><ul><li>最近想用jupyter把学习的做成js笔记,有运行结果,一目了然.这个就涉及如何做笔记的话题,我现在react是用mdx,反正就是那种可以运行看看效果的那种.</li></ul><h3 id="deno"><a href="#deno" class="headerlink" title="deno"></a>deno</h3><p>最近在了解的,其实我列出来,主要是想说一下node的作者在推出这个的时候说自己后悔node的几个点,那个视频在youtube上有,而且还是有专门的中文翻译,感觉可能是推广需要,但是感觉node 的作者还很年轻感觉:</p><ul><li>前端发展好快,他是用rust开发的,rust是火狐的公司M开发的…..最近看资料好多人想学一下这个语言…..</li><li>他说的一些如何编译node ,如何平台适应,如何通过v8优化性能,感觉自己都没怎么接触过….所以多看看感觉还是很能开阔自己眼界….提醒自己多学多看,周末出去找个咖啡馆学习多么重要……..<h3 id="node"><a href="#node" class="headerlink" title="node"></a>node</h3>这个主要是我有几个框架想学习……涉及graphql的……感觉自己做过几个demo,但是还是没有串联起来……….</li></ul><h3 id="parcel"><a href="#parcel" class="headerlink" title="parcel"></a>parcel</h3><p>这个就是感觉学过react,vue 老感觉虽然花了很多时间,但是感觉没啥成就感,就是感觉老是新瓶装旧酒…..技能老是提高不了…….关于如何作出一个东西的方式…….</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;js该学点啥&quot;&gt;&lt;a href=&quot;#js该学点啥&quot; class=&quot;headerlink&quot; title=&quot;js该学点啥&quot;&gt;&lt;/a&gt;js该学点啥&lt;/h1&gt;&lt;p&gt;“没有人因为java而失业” 对于该如何选择开发语言,我个人还是很喜欢javascript.但是也感觉挺痛苦
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://blog.jingzhengyi.top/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>思考一下前端</title>
    <link href="https://blog.jingzhengyi.top/2021/01/30/frontend-think/"/>
    <id>https://blog.jingzhengyi.top/2021/01/30/frontend-think/</id>
    <published>2021-01-30T07:23:00.000Z</published>
    <updated>2021-01-30T08:38:31.861Z</updated>
    
    <content type="html"><![CDATA[<pre><code>最近工作上老有种感觉后端压着前端的感觉,老感觉刚毕业的后端也觉得自己挺厉害,感觉没法商量.但是感觉自己其实花费了好多时间去学习...可能也算是人生误区吧,最近就开始多看一些算法相关的了又.然后说最好的学习是写下来,然后给别人讲明白.然后又开始写写博客了.虽然只是只言片语吧....给自己立的目标的一部分.(用todo软件 写的 每周得写点啥目标.)今年自己的目标老是想找到一个自己架构一个系统的方式,然后去年是找到了**jhipster**这个springweb,### 今年因为看了很长时间frontendMaster课程,然后划时间看graphql 这个架构.实际动手是:- 在一个原有项目(小度鱼社区)上改过- 看frontendmasters课 关于 gatby 的框架的(快速搭建官网,博客之类的网站)- 各种中断的续看资料.### django框架的这个是自己前年做过一个demo性质的...然后年底时候听播客,说graphql 不火了.....不过我还是想坚持自己实现一把吧.看到的其他言论是 用go去搭建基础框架......这个感觉自己比较缺的是信念去学习.PS:自己的域名又到期了,然后愤与续费太贵,又买了一个域名(www.jingzhengyi.top)......这个网站又要成为历史了........</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;最近工作上老有种感觉后端压着前端的感觉,老感觉刚毕业的后端也觉得自己挺厉害,感觉没法商量.但是感觉自己其实花费了好多时间去学习...


可能也算是人生误区吧,最近就开始多看一些算法相关的了又.然后说最好的学习是写下来,然后给别人讲明白.然后又开始写写博客了
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>计算机教育中缺失的一课</title>
    <link href="https://blog.jingzhengyi.top/2021/01/22/mit-missing-semater/"/>
    <id>https://blog.jingzhengyi.top/2021/01/22/mit-missing-semater/</id>
    <published>2021-01-22T02:38:32.295Z</published>
    <updated>2021-01-22T02:38:32.295Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MIT-课程"><a href="#MIT-课程" class="headerlink" title="MIT 课程"></a>MIT 课程</h3><p>最近看的一个 MIT 学生给学生开的课 <a href="%https://missing-semester-cn.github.io/%">missing semester</a> ,有中文翻译,感觉开发了好几年,还是能学到很多东西,其中 vim 我花了半天时间去按照他的配置,感觉终于能够可以替代 vscode 真正用用了.. 有对应的课程录屏.<br>主要讲了: - Shell 工具和脚本 - 编辑器 (Vim) - 数据整理 - 命令行环境 - 版本控制(Git) - 调试及性能分析 - 元编程 - 安全和密码学 - 大杂烩 - 提问&amp;回答</p><h4 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h4><p>这块我花费了最多时间 ,课程里提供的几份配置里,我选的 joe 的 dotfile 里的配置,他的 dotfile 有好多东西,然后是通 stow 做软连接连接到他的配置里的.反正一开始有点蒙.想全盘拷贝他的时候,出了好些问题…..然后仔细看了看才搞好.不过最终效果还是挺满意的.</p><h5 id="nvim"><a href="#nvim" class="headerlink" title="nvim"></a>nvim</h5><p>joe 其实是用的 nvim ,感觉这个挺牛逼,效果还不错,然后作者主要是配置了 python 相关的,如 lint, 然后用的 Plug 作为插件管理,其实 vim8 可以完全抛弃插(~/.vim/pack/vendor/start/) ,但是 nvim 其实是重新实现了一遍 vim .有几个地方不兼容. 然后.vimrc 里面有自定义的快捷键.</p><p>几个好用的插件:</p><ul><li>coc.vim 自动补全,代码高亮,还有些导航之类的功能</li><li>ale.vim 导航</li><li>fzf.vim 模糊查询</li></ul><h4 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h4><p>有几个点 感觉以前不知道 ,– -</p><ul><li>.aliases 有些 aliase 还挺好玩的感觉,比如 mac 里的 ls 之类的其实是 BSD 版本,然后 aliase 里有个如何替换,这样换平台就不会不一样了.</li></ul><h4 id="mac-工具"><a href="#mac-工具" class="headerlink" title="mac 工具"></a>mac 工具</h4><ul><li>hammperspoon 可以做写自动化的事情,通过写 lua 小脚本</li><li>yabai 平铺式的窗口管理,感觉好几个屏幕,或者大屏的挺好用的</li></ul><h4 id="scripts"><a href="#scripts" class="headerlink" title="scripts"></a>scripts</h4><ul><li>ocr 这个 ocr hammperspoon 里配置一下就可以截屏然后拷贝文字,不过大部分时候对着视频里文字出错挺高,不过还是有点用</li></ul><h4 id="git"><a href="#git" class="headerlink" title="git"></a>git</h4><p>这个先从 git 数据模型讲,感觉还是学到好些.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;MIT-课程&quot;&gt;&lt;a href=&quot;#MIT-课程&quot; class=&quot;headerlink&quot; title=&quot;MIT 课程&quot;&gt;&lt;/a&gt;MIT 课程&lt;/h3&gt;&lt;p&gt;最近看的一个 MIT 学生给学生开的课 &lt;a href=&quot;%https://missing-semester
      
    
    </summary>
    
    
      <category term="vim" scheme="https://blog.jingzhengyi.top/categories/vim/"/>
    
      <category term="shell" scheme="https://blog.jingzhengyi.top/categories/vim/shell/"/>
    
      <category term="git" scheme="https://blog.jingzhengyi.top/categories/vim/shell/git/"/>
    
    
  </entry>
  
  <entry>
    <title>阿里云ECS免密码登陆</title>
    <link href="https://blog.jingzhengyi.top/2021/01/22/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E9%99%86/"/>
    <id>https://blog.jingzhengyi.top/2021/01/22/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E9%99%86/</id>
    <published>2021-01-22T02:05:48.755Z</published>
    <updated>2021-01-22T02:05:48.755Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用SSH密钥对连接Linux实例"><a href="#使用SSH密钥对连接Linux实例" class="headerlink" title="使用SSH密钥对连接Linux实例"></a>使用SSH密钥对连接Linux实例</h2><p>阿里云ESC远程登陆只支持pem特定的ssh免密登陆,之前一直不知道,阿里客服打电话过来回访时候问了一下,才知道官方文档有写.</p><p><a href="https://help.aliyun.com/document_detail/51798.html?spm=a2c4g.11186623.2.12.303874f7nqJwUC#linux" target="_blank" rel="noopener">使用SSH密钥对连接Linux实例</a></p><p>配置完后,对自动下载的pem做配置.修改 ~/.ssh/config文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host ecs    &#x2F;&#x2F; 输入ECS实例的名称</span><br><span class="line">HostName 192.*.*.*   &#x2F;&#x2F; 输入ECS实例的公网IP地址</span><br><span class="line">Port 22   &#x2F;&#x2F; 输入端口号，默认为22</span><br><span class="line">User root   &#x2F;&#x2F; 输入登录账号</span><br><span class="line">IdentityFile ~&#x2F;.ssh&#x2F;ecs.pem &#x2F;&#x2F; 输入.pem私钥文件在本机的地址</span><br></pre></td></tr></table></figure><p>重启:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sshd restart</span><br><span class="line">ssh ecs</span><br></pre></td></tr></table></figure><p>我自己mac电脑配置了,但是还是要输入密码,后来查是权限问题 <a href="https://learnku.com/articles/19580" target="_blank" rel="noopener">https://learnku.com/articles/19580</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#设置 authorized_keys 的读写权限，只对其所有者开放</span><br><span class="line">chmod -R 700 ~&#x2F;.ssh</span><br><span class="line">chmod 644 ~&#x2F;.ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用SSH密钥对连接Linux实例&quot;&gt;&lt;a href=&quot;#使用SSH密钥对连接Linux实例&quot; class=&quot;headerlink&quot; title=&quot;使用SSH密钥对连接Linux实例&quot;&gt;&lt;/a&gt;使用SSH密钥对连接Linux实例&lt;/h2&gt;&lt;p&gt;阿里云ESC远程登陆
      
    
    </summary>
    
    
      <category term="Mac" scheme="https://blog.jingzhengyi.top/categories/Mac/"/>
    
      <category term="ECS" scheme="https://blog.jingzhengyi.top/categories/Mac/ECS/"/>
    
      <category term="SSH" scheme="https://blog.jingzhengyi.top/categories/Mac/ECS/SSH/"/>
    
    
      <category term="SSH" scheme="https://blog.jingzhengyi.top/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>vsCodeVim插件</title>
    <link href="https://blog.jingzhengyi.top/2021/01/22/vim/"/>
    <id>https://blog.jingzhengyi.top/2021/01/22/vim/</id>
    <published>2021-01-22T02:05:48.755Z</published>
    <updated>2021-01-22T02:05:48.755Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/VSCodeVim/Vim#mac" target="_blank" rel="noopener">https://github.com/VSCodeVim/Vim#mac</a></p><p>快速移动写代码，除了输入字符之外最常用的操作就是移动光标。vim除了hjkl ctrl+u ctr+f外还有更快捷的移动方式，这里介绍2个插件都是vscode自带的。</p><ol><li>vim-easymotion</li></ol><p>设置”vim.easymotion”: true 开启这个模式。<br><code>&lt;leader&gt;&lt;leader&gt; t/T &lt;char&gt;</code> 能够向前/向后快速到达可见范围内的某字符(<char>)的位置。<br><code>&lt;leader&gt;&lt;leader&gt; w/b</code> 向前/向后到达可见范围内任何单词的开头。<br><code>&lt;leader&gt;&lt;leader&gt; e/ge</code> 向前/向后到达可见范围内任何单词的结尾。<br><code>&lt;leader&gt;&lt;leader&gt; k/j</code> 向前/向后到达可见范围内任何行的行首。</p><ol start="2"><li>vim-sneak</li></ol><p>sneak模式下键入s后，再输入2个字符就可以跳转到目标位置。<br>s<char><char> 往前跳转到目标位置。<br>S<char><char> 往后跳转到目标位置。</p><p>链接：<a href="https://www.jianshu.com/p/cbfa86c8d8a5" target="_blank" rel="noopener">https://www.jianshu.com/p/cbfa86c8d8a5</a></p><p>3.vim-surround   </p><p>Based on <a href="https://github.com/tpope/vim-surround" target="_blank" rel="noopener">surround.vim</a>, the plugin is used to work with surrounding characters like parenthesis, brackets, quotes, and XML tags.</p><table><thead><tr><th>Setting</th><th>Description</th><th>Type</th><th>Default Value</th></tr></thead><tbody><tr><td>vim.surround</td><td>Enable/disable vim-surround</td><td>Boolean</td><td>true</td></tr></tbody></table><p><code>t</code> or <code>&lt;</code> as <code>&lt;desired char&gt;</code> or <code>&lt;existing char&gt;</code> will do tags and enter tag entry mode. Using <code>&lt;CR&gt;</code> instead of <code>&gt;</code> to finish changing a tag will preserve any existing attributes.</p><table><thead><tr><th>Surround Command</th><th>Description</th></tr></thead><tbody><tr><td><code>d s &lt;existing char&gt;</code></td><td>Delete existing surround</td></tr><tr><td><code>c s &lt;existing char&gt; &lt;desired char&gt;</code></td><td>Change surround existing to desired</td></tr><tr><td><code>y s &lt;motion&gt; &lt;desired char&gt;</code></td><td>Surround something with something using motion (as in “you surround”)</td></tr><tr><td><code>S &lt;desired char&gt;</code></td><td>Surround when in visual modes (surrounds full selection)</td></tr></tbody></table><p>Some examples:</p><ul><li><code>&quot;test&quot;</code> with cursor inside quotes type cs”‘ to end up with <code>&#39;test&#39;</code></li><li><code>&quot;test&quot;</code> with cursor inside quotes type ds” to end up with <code>test</code></li><li><code>test</code> with cursor on word test type ysaw) to end up with <code>(test)</code></li></ul><h4 id="苹果系统问题-To-enable-key-repeating"><a href="#苹果系统问题-To-enable-key-repeating" class="headerlink" title="苹果系统问题 To enable key-repeating"></a>苹果系统问题 To enable key-repeating</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># For VS Code</span></span><br><span class="line">$ defaults write com.microsoft.VSCode ApplePressAndHoldEnabled -bool <span class="literal">false</span></span><br><span class="line"><span class="comment"># For VS Code Insider</span></span><br><span class="line">$ defaults write com.microsoft.VSCodeInsiders ApplePressAndHoldEnabled -bool <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 还原设置</span></span><br><span class="line">$ defaults delete -g ApplePressAndHoldEnabled</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/VSCodeVim/Vim#mac&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/VSCodeVim/Vim#mac&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;快速移动写代码，除了输
      
    
    </summary>
    
    
      <category term="vim" scheme="https://blog.jingzhengyi.top/categories/vim/"/>
    
      <category term="tools" scheme="https://blog.jingzhengyi.top/categories/vim/tools/"/>
    
      <category term="vsCode" scheme="https://blog.jingzhengyi.top/categories/vim/tools/vsCode/"/>
    
    
      <category term="vim" scheme="https://blog.jingzhengyi.top/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>win10Linux子系统</title>
    <link href="https://blog.jingzhengyi.top/2021/01/22/win10Linux%E5%AD%90%E7%B3%BB%E7%BB%9F/"/>
    <id>https://blog.jingzhengyi.top/2021/01/22/win10Linux%E5%AD%90%E7%B3%BB%E7%BB%9F/</id>
    <published>2021-01-22T02:05:48.755Z</published>
    <updated>2021-01-22T02:05:48.755Z</updated>
    
    <content type="html"><![CDATA[<p>今天在配置<a href="https://github.com/zeit/hyper" target="_blank" rel="noopener">hyper</a>的时候说可以反向从linux的子系统使用win安装的命令,然后发现得需要升级内核系统，升级预览版preview后后发现win10加了好些功能，逐渐向mac系统靠拢。。。。作为个折腾党来说，虽然不怎么能用到。。。但是还是挺乐此不疲的。</p><h3 id="WSL"><a href="#WSL" class="headerlink" title="WSL"></a>WSL</h3><ul><li><a href="https://docs.microsoft.com/en-us/windows/wsl/interop" target="_blank" rel="noopener">wsl linux子系统和wind互通。。官网好些例子</a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">C:\temp&gt; wsl</span><br><span class="line">/mnt/c/temp/$ <span class="built_in">cd</span> ~</span><br><span class="line">~$ notepad.exe foo.txt</span><br><span class="line">~$ ls | grep foo.txt</span><br><span class="line">~$ <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">C:\temp&gt;dir | findstr foo.txt</span><br><span class="line">09/27/2016  02:15 PM                14 foo.txt</span><br></pre></td></tr></table></figure></li><li>linux 调用 win安装程序。<br>这个我没成功。。我是想试一下参考<a href="https://zhuanlan.zhihu.com/p/34667658" target="_blank" rel="noopener">混合 Windows 和 Linux 的环境</a>试了一下node ，不好使。。感觉是“parmgram File” 这种带空格的路径有问题？</li></ul><h3 id="其他功能，感觉挺好用的几个"><a href="#其他功能，感觉挺好用的几个" class="headerlink" title="其他功能，感觉挺好用的几个"></a>其他功能，感觉挺好用的几个</h3><ul><li>emjo表情（升级到17<br><code>win+.</code></li><li>剪贴板历史<br><code>win+v</code></li><li>截图<br><code>win+shift+s</code></li><li><a href="http://www.cnblogs.com/rainman/p/3457227.html" target="_blank" rel="noopener">Dos命令查看端口占用及关闭进程</a></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考\"></a>参考\</h3><ul><li><a href="https://github.com/microsoft/Terminal" target="_blank" rel="noopener">windows Terminal</a></li><li><a href="https://zhuanlan.zhihu.com/p/34667658" target="_blank" rel="noopener">混合 Windows 和 Linux 的环境</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天在配置&lt;a href=&quot;https://github.com/zeit/hyper&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hyper&lt;/a&gt;的时候说可以反向从linux的子系统使用win安装的命令,然后发现得需要升级内核系统，升级预览版prev
      
    
    </summary>
    
    
      <category term="win10" scheme="https://blog.jingzhengyi.top/categories/win10/"/>
    
      <category term="ubuntu" scheme="https://blog.jingzhengyi.top/categories/win10/ubuntu/"/>
    
      <category term="tools" scheme="https://blog.jingzhengyi.top/categories/win10/ubuntu/tools/"/>
    
    
      <category term="win10" scheme="https://blog.jingzhengyi.top/tags/win10/"/>
    
  </entry>
  
  <entry>
    <title>tailwindcss</title>
    <link href="https://blog.jingzhengyi.top/2021/01/22/tailwindcss/"/>
    <id>https://blog.jingzhengyi.top/2021/01/22/tailwindcss/</id>
    <published>2021-01-22T02:05:48.754Z</published>
    <updated>2021-01-22T02:05:48.754Z</updated>
    
    <content type="html"><![CDATA[<h2 id="tailWindCss"><a href="#tailWindCss" class="headerlink" title="tailWindCss"></a>tailWindCss</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>  写React 项目 有个痛点,有时候想拷贝个已有的js文件,因为有样式,但是现在基本主流都是cssModule ,所以还得拷贝个xx.less文件之类.做Vue开发也是,如果写.vue文件,本来文件就挺长,代码要用鼠标滚轮一直滚看,还要写style部分,又是一坨代码.看着文件一长个人就有点不舒服.</p><h3 id="救星"><a href="#救星" class="headerlink" title="救星"></a>救星</h3><p>  最近看到<a href="https://tailwindcss.com/docs/" target="_blank" rel="noopener">tailwincss</a>,感觉基本解决了这个痛点.可以参考这篇<a href="http://zhaima.tech/post/tailwindcss%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B" target="_blank" rel="noopener">文章</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;tailWindCss&quot;&gt;&lt;a href=&quot;#tailWindCss&quot; class=&quot;headerlink&quot; title=&quot;tailWindCss&quot;&gt;&lt;/a&gt;tailWindCss&lt;/h2&gt;&lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="css" scheme="https://blog.jingzhengyi.top/categories/css/"/>
    
    
  </entry>
  
  <entry>
    <title>umi适配华为自带浏览器和QQ浏览器</title>
    <link href="https://blog.jingzhengyi.top/2021/01/22/umi%E9%80%82%E9%85%8D%E5%8D%8E%E4%B8%BA%E8%87%AA%E5%B8%A6%E6%B5%8F%E8%A7%88%E5%99%A8%E5%92%8CQQ%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    <id>https://blog.jingzhengyi.top/2021/01/22/umi%E9%80%82%E9%85%8D%E5%8D%8E%E4%B8%BA%E8%87%AA%E5%B8%A6%E6%B5%8F%E8%A7%88%E5%99%A8%E5%92%8CQQ%E6%B5%8F%E8%A7%88%E5%99%A8/</id>
    <published>2021-01-22T02:05:48.754Z</published>
    <updated>2021-01-22T02:05:48.754Z</updated>
    
    <content type="html"><![CDATA[<p>最近准备面试一个H5的工作,然后准备了用umi+Django写一个H5前端页面练练手.写了一个<a href="http://www.jingzy.top:8002" target="_blank" rel="noopener">几个页面</a>,在UC,chrome浏览器和微信里面都正常,然后发现在华为自带浏览器,后来发现qq浏览器,都是感觉没调用webpack 打包生成的js……查了一下资料,说是华为自带的浏览器内核很老(我的是华为M5 android8),umi的GitHub也有人提,但是回复都没怎么看到希望. 折腾了半天后,用一下配置可行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">targets: &#123;</span><br><span class="line">chrome: <span class="number">58</span>,</span><br><span class="line">ie: <span class="number">9</span>,</span><br><span class="line">&#125;,</span><br><span class="line">exportStatic:&#123;&#125;,</span><br></pre></td></tr></table></figure><p>参考:<br><a href="https://github.com/umijs/umi/issues/304" target="_blank" rel="noopener">使用 umi 在华为手机上不渲染页面,加载出空白页 #304</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近准备面试一个H5的工作,然后准备了用umi+Django写一个H5前端页面练练手.写了一个&lt;a href=&quot;http://www.jingzy.top:8002&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;几个页面&lt;/a&gt;,在UC,chrome浏览器
      
    
    </summary>
    
    
      <category term="umi" scheme="https://blog.jingzhengyi.top/categories/umi/"/>
    
      <category term="android" scheme="https://blog.jingzhengyi.top/categories/umi/android/"/>
    
    
      <category term="h5" scheme="https://blog.jingzhengyi.top/tags/h5/"/>
    
  </entry>
  
  <entry>
    <title>利用 socket.io 实现消息实时推送</title>
    <link href="https://blog.jingzhengyi.top/2021/01/22/socket-io/"/>
    <id>https://blog.jingzhengyi.top/2021/01/22/socket-io/</id>
    <published>2021-01-22T02:05:48.754Z</published>
    <updated>2021-01-22T02:05:48.754Z</updated>
    
    <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>当发生了用户被点赞、评论、关注等操作时，需要由服务器向用户实时地推送一条消息。</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ul><li><p>后台Node.js</p><h3 id="后端推送消息的处理流程"><a href="#后端推送消息的处理流程" class="headerlink" title="后端推送消息的处理流程"></a>后端推送消息的处理流程</h3></li><li><p>在 Node 服务器建立一个用户信息和 socket id 的映射表，因为同一用户可能打开了多个页面，所以他的 socket id 可能存在多个值。当用户建立连接时，往其中添加值；用户断开连接后，删除相应值。</p></li><li><p>当 Java 后台存在需要推送的消息时，会向 Node 服务器的 /api 路径 post 一条消息，其中包括用于标识用户的 tokenId 和其它数据。</p></li><li><p>Node 服务器接收到 post 请求后，对请求内容进行处理。根据 tokenId 找出与该用户对应的 socket id，socket.io 会根据 id 来向用户推送消息。</p></li></ul><h3 id="对用户信息的处理"><a href="#对用户信息的处理" class="headerlink" title="对用户信息的处理"></a>对用户信息的处理</h3><p>方便起见，这里只用一个数组保存用户信息，实际工作中可以根据需要放入数据库中保存。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">global.users = []; <span class="comment">// 记录下登录用户的tokenId, socketId</span></span><br></pre></td></tr></table></figure><p>当用户登录时，client 会向 server 发送 user_login 事件，服务器接收到后会做如下操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">socket.on(<span class="string">'user_login'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">info</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; tokenId, userId, socketId &#125; = info;</span><br><span class="line">    addSocketId(users, &#123; tokenId, socketId, userId &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>addSocketId() 会向 users 数组中添加用户信息，不同用户通过 tokenId 进行区分，每个用户有一个 socketIds 数组，保存可能存在的多个 socketId。该函数的具体代码可见 src/utils.js 文件。</p><p>同理，还有一个 deleteSocketId() 函数用于删除用户信息，代码可见同一文件。</p><p>在获取了用户的 tokenId 之后，就需要找到对应的 socketId，然后向特定用户推送消息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只向 id = socketId 的这一连接发送消息</span></span><br><span class="line">io.sockets.to(socketId).emit(<span class="string">'receive_message'</span>, &#123;</span><br><span class="line">    entityType,</span><br><span class="line">    data</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>服务器的思路大致如此，接下来介绍客户端中是如何进行相应的处理的。</p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>Socket.io 的初始化<br>首先在 html 文件中引入 Socket.io 的 client 端文件，例如通过 CDN 引入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其它的引入方式:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> io = <span class="built_in">require</span>(<span class="string">'socket.io-client'</span>);</span><br><span class="line"><span class="comment">// or with import syntax</span></span><br><span class="line"><span class="keyword">import</span> io <span class="keyword">from</span> <span class="string">'socket.io-client'</span>;</span><br></pre></td></tr></table></figure><p>引入 Socket.io 后就获得了 io 函数，通过它来与消息推送服务器建立连接。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设你将 Node 服务器部署后的地址为：https://www.example.com/ws</span></span><br><span class="line"><span class="comment">// 则： WS_HOST = 'https://www.example.com'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> msgSocket = io(<span class="string">`<span class="subst">$&#123;WS_HOST&#125;</span>`</span>, &#123;</span><br><span class="line">    secure: <span class="literal">true</span>,</span><br><span class="line">    path: <span class="string">'/ws/socket.io'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果监听本地：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> msgSocket = io(<span class="string">'http://localhost:4001'</span>);</span><br></pre></td></tr></table></figure><p>这里如果写成 io(‘<a href="https://www.example.com/ws&#39;" target="_blank" rel="noopener">https://www.example.com/ws&#39;</a>) 会出现错误，需要将 /ws 写入path中。</p><p>为了能在其它文件使用这一变量，可将 msgSocket 作为一个全局变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.msgSocket = msgSocket;</span><br></pre></td></tr></table></figure><h3 id="用户建立连接"><a href="#用户建立连接" class="headerlink" title="用户建立连接"></a>用户建立连接</h3><p>// 用户登录时，向服务器发送用户的信息。服务器会在收到信息后建立 socket 与用户的映射。<br>msgSocket.emit(‘user_login’, {<br>    userId,<br>    socketId: msgSocket.id,<br>    tokenId<br>});</p><pre><code>##demo[demo博文原文](https://segmentfault.com/a/1190000010974426)[demo](https://github.com/noiron/socket-message-push)##资料[socket-io官网](https://socket.io/get-started/chat/)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h2&gt;&lt;p&gt;当发生了用户被点赞、评论、关注等操作时，需要由服务器向用户实时地推送一条消息。&lt;/p&gt;
&lt;h2 id=&quot;实现方式&quot;&gt;&lt;a href=&quot;#实现
      
    
    </summary>
    
    
      <category term="Mac" scheme="https://blog.jingzhengyi.top/categories/Mac/"/>
    
      <category term="socket-io" scheme="https://blog.jingzhengyi.top/categories/Mac/socket-io/"/>
    
    
      <category term="通信" scheme="https://blog.jingzhengyi.top/tags/%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>单点登陆方案</title>
    <link href="https://blog.jingzhengyi.top/2021/01/22/sso/"/>
    <id>https://blog.jingzhengyi.top/2021/01/22/sso/</id>
    <published>2021-01-22T02:05:48.754Z</published>
    <updated>2021-01-22T02:05:48.754Z</updated>
    
    <content type="html"><![CDATA[<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ul><li>CAS<ul><li>多个应用共用一个登陆设置.</li><li>我现在做的前后端分离的,不用关注权限问题,最后部署时候统一设置单点登陆就可以</li></ul></li><li>手机端不适合基于session的场景,看了jwt方案.<ul><li>现在好像auth2.0的方案也挺流行,之前工作中主要是用这个实现客户权限控制,最近感觉主要是感觉想微博登陆账号这种不用直接提过密码就可以授权的方案中.</li></ul></li></ul><hr><p><strong>注意以下实现主要是基于python django drf.</strong></p><h3 id="CAS方案"><a href="#CAS方案" class="headerlink" title="CAS方案"></a>CAS方案</h3><h5 id="单点登陆服务端-server-django-mama-cas"><a href="#单点登陆服务端-server-django-mama-cas" class="headerlink" title="单点登陆服务端:server django-mama-cas"></a>单点登陆服务端:<a href="https://github.com/jbittel/django-mama-cas" target="_blank" rel="noopener">server django-mama-cas</a></h5><h5 id="客户端-django-cas-ng"><a href="#客户端-django-cas-ng" class="headerlink" title="客户端:django-cas-ng"></a>客户端:<a href="https://github.com/mingchen/django-cas-ng" target="_blank" rel="noopener">django-cas-ng</a></h5><ul><li>看cas_ng代码 默认admin开头的,匹配<code>CAS_ADMIN_PREFIX</code>这个配置更改,但是感觉这个不够灵活吧<ul><li><a href="https://stackoverflow.com/questions/51652452/using-django-cas-ng-to-authenticate-on-admin-site" target="_blank" rel="noopener">django-cas-ng authenticate on admin site</a></li></ul></li></ul><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><ul><li>如果不加<code>CAS_ADMIN_PREFIX</code>,登陆/admin/会跳转,加上就/auth/test/ 这个测试</li></ul><h3 id="非session方案"><a href="#非session方案" class="headerlink" title="非session方案"></a>非session方案</h3><h5 id="sso-rest风格"><a href="#sso-rest风格" class="headerlink" title="sso rest风格"></a>sso rest风格</h5><ul><li><a href="https://django-rest-auth.readthedocs.io/en/latest/configuration.html" target="_blank" rel="noopener">django-rest-auth</a> demo 也是在rest-framework-tutorial ,然后放在了gitte上面.</li><li>测试<br>官方代码自己集成了swagger测试</li></ul><h4 id="REST-framework-JWT-Auth"><a href="#REST-framework-JWT-Auth" class="headerlink" title="REST framework JWT Auth"></a><a href="https://getblimp.github.io/django-rest-framework-jwt/" target="_blank" rel="noopener">REST framework JWT Auth</a></h4><ul><li>测试<br>参考官网</li><li><a href="https://www.jianshu.com/p/f00b3873f6f1" target="_blank" rel="noopener">JWT 配置</a><br>比如 <code>JWT_RESPONSE_PAYLOAD_HANDLER</code> 可以重写然后配置<pre><code class="python"><span class="comment"># urls.py</span><span class="keyword">from</span> rest_framework_jwt.views <span class="keyword">import</span> obtain_jwt_tokenurlpatterns = [url(<span class="string">r'^authorizations/&gt;, obtain_jwt_token),</span><span class="string">]</span><span class="string"># utils.py</span><span class="string">def jwt_response_payload_handler(token, user=None, request=None):</span><span class="string">"""</span><span class="string">自定义jwt认证成功返回数据</span><span class="string">"""</span><span class="string">return {</span><span class="string">'</span>token<span class="string">': token,</span><span class="string">'</span>user_id<span class="string">': user.id,</span><span class="string">'</span>username<span class="string">': user.username</span><span class="string">}</span><span class="string"># 修改配置 # JWT</span><span class="string">JWT_AUTH = {</span><span class="string">'</span>JWT_EXPIRATION_DELTA<span class="string">': datetime.timedelta(days=1),    '</span>JWT_RESPONSE_PAYLOAD_HANDLER<span class="string">':'</span>users.utils.jwt_response_payload_handle<span class="string">r',</span><span class="string">}</span></code></pre></li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://stackoverflow.com/questions/47591102/making-sso-with-django-rest-framework" target="_blank" rel="noopener">Making SSO with django rest framework</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;CAS&lt;ul&gt;
&lt;li&gt;多个应用共用一个登陆设置.&lt;/li&gt;
&lt;li&gt;我现在做的前后端分离的,不用关注权限问题,最后部署时候统一
      
    
    </summary>
    
    
      <category term="sso" scheme="https://blog.jingzhengyi.top/categories/sso/"/>
    
      <category term="cas" scheme="https://blog.jingzhengyi.top/categories/sso/cas/"/>
    
      <category term="django" scheme="https://blog.jingzhengyi.top/categories/sso/cas/django/"/>
    
      <category term="drf" scheme="https://blog.jingzhengyi.top/categories/sso/cas/django/drf/"/>
    
    
      <category term="sso" scheme="https://blog.jingzhengyi.top/tags/sso/"/>
    
  </entry>
  
  <entry>
    <title>NativeBase 主题配置</title>
    <link href="https://blog.jingzhengyi.top/2021/01/22/NativeBase_theme/"/>
    <id>https://blog.jingzhengyi.top/2021/01/22/NativeBase_theme/</id>
    <published>2021-01-22T02:05:48.753Z</published>
    <updated>2021-01-22T02:05:48.753Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://docs.nativebase.io/Components.html#toast-with-duration-headref" target="_blank" rel="noopener">NativeBase</a> 个人感觉资料等在开源的react-native组件库中算是比较出色的,官网还提供了不少集成其他状态管理,路由的demo.查资料没有看到过关于他V2版本的主题相关的中文说明,他官网感觉说的也不直白.大概按我的理解说一下他的<a href="https://docs.nativebase.io/Customize.html#Customize" target="_blank" rel="noopener">自定义主题配置</a></p><h4 id="NativeBase-Customizer"><a href="#NativeBase-Customizer" class="headerlink" title="NativeBase Customizer"></a>NativeBase Customizer</h4><p>官网有提供<a href="https://nativebase.io/customizer/#" target="_blank" rel="noopener">可视化主题颜色配置页面</a>,设置完颜色后,下载variables.js .可以下载单个组件的,也可以设置全部的.</p><h4 id="Theme-and-Variables"><a href="#Theme-and-Variables" class="headerlink" title="Theme and Variables"></a>Theme and Variables</h4><p>运行 <code>node node_modules/native-base/ejectTheme.js</code> 将nb的主题配置暴露到<strong>native-base-theme</strong>,包含俩个目录</p><blockquote><p><strong>components</strong>: Theme styling files for all the NativeBase components. This is where you would change the style properties of the components if you need to.</p></blockquote><blockquote><p>Example, if you need to change the height of Button component, you’ll need to change height in native-base-theme/components/Button.js.</p></blockquote><blockquote><p><strong>variables</strong>: Contains three preset theme variable files, namely Platform, material, commonColor. You can change the variables (for color, fontFamily, iconFamily etc) for a uniform look and feel throughout your app.</p></blockquote><h4 id="Set-Up"><a href="#Set-Up" class="headerlink" title="Set Up"></a>Set Up</h4><p>官网提供的下面的这个例子,Platform,Material,CommonColor,从variables目录里面选择一个官方提供了默认三套主题,可以修改一下对应js的变量,参考<a href="https://docs.nativebase.io/docs/ThemeVariables.html" target="_blank" rel="noopener">Theme variables Cheat sheet</a>设置.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Container, Content, Text, StyleProvider &#125; <span class="keyword">from</span> <span class="string">'native-base'</span>;</span><br><span class="line"><span class="keyword">import</span> getTheme <span class="keyword">from</span> <span class="string">'./native-base-theme/components'</span>;</span><br><span class="line"><span class="keyword">import</span> material <span class="keyword">from</span> <span class="string">'./native-base-theme/variables/material'</span>;</span><br><span class="line">​<span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ThemeExample</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;StyleProvider style=&#123;getTheme(material)&#125;&gt;</span><br><span class="line">        &lt;Container&gt;</span><br><span class="line">          &lt;Content&gt;</span><br><span class="line">            &lt;Text&gt;</span><br><span class="line">              I have changed the text color.</span><br><span class="line">            &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>Content&gt;</span><br><span class="line">        &lt;<span class="regexp">/Container&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>StyleProvider&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Theme-Color"><a href="#Theme-Color" class="headerlink" title="Theme Color"></a>Theme Color</h4><h4 id="Theme-Font"><a href="#Theme-Font" class="headerlink" title="Theme Font"></a>Theme Font</h4><p>可选择字体</p><h4 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h4><ul><li>With Variables<br>比如修改Button样式,可以从可视化修改页面下载variable.js,然后结合下面配置<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Container, Content, Button, Text, StyleProvider &#125; <span class="keyword">from</span> <span class="string">'native-base'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Container, Content, Button, Text, getTheme, StyleProvider &#125; <span class="keyword">from</span> <span class="string">'native-base'</span>;</span><br><span class="line"><span class="comment">//  从可视化网站下载</span></span><br><span class="line"><span class="keyword">import</span> customVariables <span class="keyword">from</span> <span class="string">'./Themes/variable'</span>;</span><br><span class="line">​<span class="comment">// buttonTheme is the customized theme of Button Component​,</span></span><br><span class="line"><span class="comment">// 我理解就是native-base-theme/components下面找对应的js</span></span><br><span class="line"><span class="keyword">import</span> buttonTheme <span class="keyword">from</span> <span class="string">'./Themes/buttonTheme'</span>;</span><br><span class="line">​<span class="comment">// getTheme is default theme of NativeBase Components</span></span><br><span class="line"><span class="comment">// customVariables is customized variables used in the components theme</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ThemeButtonExample</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Container&gt;</span><br><span class="line">        &lt;Content&gt;</span><br><span class="line">          &lt;StyleProvider style=&#123;buttonTheme(customVariables)&#125;&gt;</span><br><span class="line">            &lt;Button primary&gt;</span><br><span class="line">              &lt;Text&gt; Primary &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>Button&gt;</span><br><span class="line">            &lt;Button success&gt;</span><br><span class="line">              &lt;Text&gt; Success &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>Button&gt;</span><br><span class="line">            &lt;Button info&gt;</span><br><span class="line">              &lt;Text&gt; Info &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>Button&gt;</span><br><span class="line">            &lt;Button warning&gt;</span><br><span class="line">              &lt;Text&gt; Warning &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>Button&gt;</span><br><span class="line">            &lt;Button danger&gt;</span><br><span class="line">              &lt;Text&gt; Danger &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>Button&gt;</span><br><span class="line">            &lt;Button small&gt;</span><br><span class="line">              &lt;Text&gt; Small &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>Button&gt;</span><br><span class="line">            &lt;Button&gt;</span><br><span class="line">              &lt;Text&gt; Default &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>Button&gt;</span><br><span class="line">            &lt;Button large&gt;</span><br><span class="line">              &lt;Text&gt; Large &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>Button&gt;</span><br><span class="line">          &lt;<span class="regexp">/StyleProvider&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Content&gt;</span><br><span class="line">      &lt;<span class="regexp">/Container&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="Theme-Your-Custom-Component"><a href="#Theme-Your-Custom-Component" class="headerlink" title="Theme Your Custom Component"></a>Theme Your Custom Component</h4><p>可是结合官方的 StyleSheet 提供的styles ,可以覆盖,如果冲突? 这个有覆盖这个还没具体测试,yourTheme感觉也是可以随便写,<br>CustomComponent就是你写的这个组件的给的命名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; View, Text, StyleSheet &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connectStyle &#125; <span class="keyword">from</span> <span class="string">'native-base'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// connect styles to props.style defined by the theme</span></span><br><span class="line">    <span class="keyword">const</span> styles = <span class="keyword">this</span>.props.style;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">        &lt;Text style=&#123;styles.textContent&#125;&gt;</span><br><span class="line">          Your Component <span class="keyword">with</span> <span class="keyword">static</span> style</span><br><span class="line">        &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> styles = &#123;</span><br><span class="line">  container: &#123;</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">    backgroundColor: <span class="string">'green'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  textContent: &#123;</span><br><span class="line">    fontSize: <span class="number">20</span>,</span><br><span class="line">    color: <span class="string">'red'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// connect the component to the theme</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connectStyle(<span class="string">'yourTheme.CustomComponent'</span>, styles)(CustomComponent);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://docs.nativebase.io/Components.html#toast-with-duration-headref&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NativeBase&lt;/a&gt; 个人感觉资料等在开源
      
    
    </summary>
    
    
      <category term="react-native" scheme="https://blog.jingzhengyi.top/categories/react-native/"/>
    
      <category term="theme" scheme="https://blog.jingzhengyi.top/categories/react-native/theme/"/>
    
    
      <category term="react-native" scheme="https://blog.jingzhengyi.top/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>Tampermonkey</title>
    <link href="https://blog.jingzhengyi.top/2021/01/22/Tampermonkey/"/>
    <id>https://blog.jingzhengyi.top/2021/01/22/Tampermonkey/</id>
    <published>2021-01-22T02:05:48.753Z</published>
    <updated>2021-01-22T02:05:48.753Z</updated>
    
    <content type="html"><![CDATA[<p>最近又接触了油猴,可以定制化网站.比如去掉广告啦,排版文字加空格啦.</p><h4 id="Tampermonkey"><a href="#Tampermonkey" class="headerlink" title="Tampermonkey"></a>Tampermonkey</h4><p>类似的插件有好几个,然后其中最出名的我看的是Tampermonkey.他有几个优势.</p><ul><li>备份,在[实用工具]选项卡里面有几个选项,我是用的google cloud .试了一下还挺方便.不过他这个是增量的.可能需要删除一下重复,恢复的时候.</li><li>firefox ,chrome 都支持.不过听说chrome以后会禁用修改网页之类的.还是有风险的.不好的油猴插件有可能监控你的行为之类的.<strong>因为油猴脚本的灵活性和无限可能，不安全的油猴脚本是很危险的。比如它可以在你登录的账号页面上搜集信息，发送到后台，甚至直接下单，修改地址等等</strong></li><li>脚本站点（论坛）：<ul><li><a href="https://openuserjs.org/" target="_blank" rel="noopener">https://openuserjs.org/</a></li><li><a href="https://greasyfork.org/zh-CN" target="_blank" rel="noopener">https://greasyfork.org/zh-CN</a></li><li><a href="http://userscripts-mirror.org/" target="_blank" rel="noopener">http://userscripts-mirror.org/</a><h4 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h4></li></ul></li><li>现在想着是多看看人家怎么做的.然后就看了几个插件的源码.</li><li>没有找到好的教程…</li></ul><h5 id="Userscript-显示当前网站所有可用的UserJS脚本-Jaeger"><a href="#Userscript-显示当前网站所有可用的UserJS脚本-Jaeger" class="headerlink" title="Userscript+ : 显示当前网站所有可用的UserJS脚本 Jaeger"></a>Userscript+ : 显示当前网站所有可用的UserJS脚本 Jaeger</h5><p>我看的这个的<a href="https://github.com/jae-jae/Userscript-Plus/tree/develop" target="_blank" rel="noopener">githhub有源码</a>,</p><ul><li>依赖 <ul><li>iframejs  向iframe里面注入内如</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载依赖js库</span></span><br><span class="line">ljs.exec([<span class="string">'jQuery'</span>, <span class="string">'iframe'</span>, <span class="string">'psl'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fu = <span class="keyword">new</span> FetchUserjs();</span><br><span class="line">    fu.render();</span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure><ul><li>本地调试vue组件.<blockquote><p>主要是想弄明白他怎么单独用vue组件的..有点理解的似是而非…….跟之前理解的单独用vue组件感觉有点不一样.这个有点高端.相等于在一个页面中注入一个vue组件使用逻辑.先在frame里面注入html框架.然后再运行打包的vue组件js.要是我自己用webpack是实现的话感觉只有抄的水平.. </p></blockquote></li></ul><p>下载代码后.启动 <code>npm run watch:ui</code> 在dist目录生成vue的打包.然后可以 用 npm 包 serve 启动静态文件服务 <code>serve -l 5000</code>.然后替换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @resource     uiJs   https://raw.githubusercontent.com/jae-jae/Show-Site-All-UserJS/master/dist/ui.gf.js?_=1561104961645</span></span><br><span class="line"><span class="comment">// @resource     ui     https://raw.githubusercontent.com/jae-jae/Show-Site-All-UserJS/master/dist/ui.html?_=1561104961645</span></span><br></pre></td></tr></table></figure><p>为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @resource     uiJs   http://localhost:5000/ui.js?_=1561104961645</span></span><br><span class="line"><span class="comment">// @resource     ui      http://localhost:5000/ui.html?_=1561104961645</span></span><br></pre></td></tr></table></figure><p>可以加个断点之类的.这部分是调试这个插件用vue写的可选插件的table组件. 可以用vsCode 调试npm <code>npm run build --inspect-brk</code></p><ul><li>其他接口查询<br>其他的获取网站到底有多少可用插件之类的是在项目里面的 userscript目录里面.然后这个我看是放在插件的主入口里面.感觉有点麻烦,没细看.有时间再慢慢看看.</li></ul><h5 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h5><p>利用 github 的 Webhooks 同步发布到 greasyfork<br>初始化 import 脚本 <a href="https://greasyfork.org/en/import" target="_blank" rel="noopener">https://greasyfork.org/en/import</a><br>2. 开启 webhook 并应用 <a href="https://greasyfork.org/en/users/webhook-info" target="_blank" rel="noopener">https://greasyfork.org/en/users/webhook-info</a></p><p>按提示在 github 仓库的settings -&gt; webhooks创建 hook, 每次仓库更新就会同步更新到 greasyfork </p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://betacat.online/posts/2019-02-25/tampermonkey-user-script-with-vuejs/" target="_blank" rel="noopener">使用 VueJS 开发油猴（TamperMonkey）脚本</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近又接触了油猴,可以定制化网站.比如去掉广告啦,排版文字加空格啦.&lt;/p&gt;
&lt;h4 id=&quot;Tampermonkey&quot;&gt;&lt;a href=&quot;#Tampermonkey&quot; class=&quot;headerlink&quot; title=&quot;Tampermonkey&quot;&gt;&lt;/a&gt;Tampermo
      
    
    </summary>
    
    
      <category term="mac" scheme="https://blog.jingzhengyi.top/categories/mac/"/>
    
    
      <category term="plugin" scheme="https://blog.jingzhengyi.top/tags/plugin/"/>
    
  </entry>
  
  <entry>
    <title>codewar-Scramblies</title>
    <link href="https://blog.jingzhengyi.top/2021/01/22/codewar-Scramblies/"/>
    <id>https://blog.jingzhengyi.top/2021/01/22/codewar-Scramblies/</id>
    <published>2021-01-22T02:05:48.753Z</published>
    <updated>2021-01-22T02:05:48.753Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.codewars.com/kata/55c04b4cc56a697bb0000048/solutions/python" target="_blank" rel="noopener">Scramblies</a></p><ul><li>要求<blockquote><p>前者是否包含后者的每个字符,</p></blockquote></li><li>我的<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 支持 集合运算,相减看是否包含 刷code war 题目 优化 看的</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span>  Counter</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scramble</span><span class="params">(s1, s2)</span>:</span></span><br><span class="line">  <span class="comment"># Counter basically creates a dictionary of counts and letters</span></span><br><span class="line">  <span class="comment"># Using set subtraction, we know that if anything is left over,</span></span><br><span class="line">  <span class="comment"># something exists in s2 that doesn't exist in s1</span></span><br><span class="line">  <span class="keyword">return</span> len(Counter(s2)- Counter(s1)) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">print(scramble(<span class="string">'rkqodlw'</span>, <span class="string">'world'</span>),)</span><br></pre></td></tr></table></figure></li><li>别人的<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scramble</span><span class="params">(s1,s2)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> set(s2):</span><br><span class="line">        <span class="keyword">if</span> s1.count(c) &lt; s2.count(c):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="comment"># 2 多用库</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> sub</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scramble</span><span class="params">(s1,s2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> sub(*map(Counter, (s2,s1)))</span><br><span class="line"><span class="comment"># 2 特别的语法</span></span><br><span class="line">scramble=<span class="keyword">lambda</span> a,b,c=__import__(<span class="string">'collections'</span>).Counter:<span class="keyword">not</span> c(b)-c(a)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.codewars.com/kata/55c04b4cc56a697bb0000048/solutions/python&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Scramblies&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;

      
    
    </summary>
    
    
      <category term="python" scheme="https://blog.jingzhengyi.top/categories/python/"/>
    
      <category term="codewar" scheme="https://blog.jingzhengyi.top/categories/python/codewar/"/>
    
    
      <category term="python" scheme="https://blog.jingzhengyi.top/tags/python/"/>
    
      <category term="刷题" scheme="https://blog.jingzhengyi.top/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>如何结合Django,React搭建前后台框架</title>
    <link href="https://blog.jingzhengyi.top/2021/01/22/djangoreact/"/>
    <id>https://blog.jingzhengyi.top/2021/01/22/djangoreact/</id>
    <published>2021-01-22T02:05:48.753Z</published>
    <updated>2021-01-22T02:05:48.753Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.valentinog.com/blog/tutorial-api-django-rest-react/" target="_blank" rel="noopener">setting up a Django project with React.</a></p><p>Django,React搭建前后台框架主要有以下思路(which are common to almost every web framework):</p><ol><li><p>React in its own “frontend” Django app: load a single HTML template and let React manage the frontend (difficulty: medium)</p><ul><li>作者推荐,</li></ul></li><li><p>Django REST as a standalone API + React as a standalone SPA (difficulty: hard, it involves JWT for authentication)<br>demo都没怎么有设置权限,,作者有给提供连接,<a href="https://docs.djangoproject.com/en/2.0/topics/auth/default/#module-django.contrib.auth.views" target="_blank" rel="noopener">Django的登陆</a>, <a href="http://drf.jiuyou.info/#/drf/authentication" target="_blank" rel="noopener">drf的权限和认证</a>,</p><ul><li><p><a href="https://scotch.io/tutorials/build-a-to-do-application-using-django-and-react#toc-setting-up-the-backend" target="_blank" rel="noopener">样例1</a></p><ul><li>这个通过<code>CORS_ORIGIN_WHITELIST</code> 这个设置可以控制权限?要不就跨域.</li><li>感觉这个挺好的,然后集合了下面的用户请求,</li></ul></li><li><p><a href="https://zhuanlan.zhihu.com/p/33546988" target="_blank" rel="noopener">样例2</a></p><blockquote><p>这个是利用framework 发送用户名密码返回token然后存储,然后之后的请求都带上这个token</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -d <span class="string">"username=admin&amp;password=xxxx"</span> http://localhost:8000/auth</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Mix and match: mini React apps inside Django templates (difficulty: simple)</p><ul><li>不推荐对新手</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.valentinog.com/blog/tutorial-api-django-rest-react/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;setting up a Django project with
      
    
    </summary>
    
    
      <category term="React" scheme="https://blog.jingzhengyi.top/categories/React/"/>
    
      <category term="django" scheme="https://blog.jingzhengyi.top/categories/React/django/"/>
    
    
      <category term="Django" scheme="https://blog.jingzhengyi.top/tags/Django/"/>
    
      <category term="React" scheme="https://blog.jingzhengyi.top/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>redux-sega</title>
    <link href="https://blog.jingzhengyi.top/2021/01/22/redux-sega/"/>
    <id>https://blog.jingzhengyi.top/2021/01/22/redux-sega/</id>
    <published>2021-01-22T02:05:48.753Z</published>
    <updated>2021-01-22T02:05:48.753Z</updated>
    
    <content type="html"><![CDATA[<p>工作中用的是云谦大神封装的dva框架,其中集成了redux-sega .其特点是effect 中写带星号的方法处理异步事件.其中涉及的js的generator等知识点.之前看过原理.好久只是用,有点忘记了..最近感觉这个年纪还是多去想想其中的原理,要不心里还是挺慌张的.</p><h4 id="总体思路"><a href="#总体思路" class="headerlink" title="总体思路"></a>总体思路</h4><p>dva 里面处理异步的是放在effect 里面,然后里面都是 <code>function * {yield ....}</code><strong>这种generator</strong>,然后sega 能够驱动他去执行所有的yield.一口气执行完.感觉整个过程<a href="https://mp.weixin.qq.com/s?__biz=MzA4NjcyMDYzMg==&mid=2451805550&idx=1&sn=84c84d73789b960f845515d701a6e0d2&chksm=88135c79bf64d56fb27009192ec3d724645a1d375b9006b7c09bad0a2aa1a3446f823e90d928&scene=0&xtrack=1" target="_blank" rel="noopener" title="redux-saga，化异步为同步">redux-saga，化异步为同步</a>讲得很详细</p><h4 id="sega-名称由来"><a href="#sega-名称由来" class="headerlink" title="sega 名称由来"></a>sega 名称由来</h4><p>把多个事情分成小份,并串联起来</p><h4 id="副作用-名词解释"><a href="#副作用-名词解释" class="headerlink" title="副作用 名词解释"></a>副作用 名词解释</h4><p>会对外部产生影响,或结果不定的.与之相对的是纯函数.</p><h4 id="ES6-generator"><a href="#ES6-generator" class="headerlink" title="ES6 generator"></a>ES6 generator</h4><ol><li>产生原因改进最早的: 最早的地域回调写法</li><li>一开始Promise ,然后ES6 是<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* function()  &#123;</span><br><span class="line">  value &#x3D; yield step1()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>最新的是 async await</li></ol><ul><li>参考<br><a href="https://www.jianshu.com/p/e0778b004596" target="_blank" rel="noopener">理解 ES6 Generator 函数</a></li></ul><h4 id="sega-详解"><a href="#sega-详解" class="headerlink" title="sega 详解"></a>sega 详解</h4><h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><ul><li><a href="https://www.jianshu.com/p/05b73d826425" target="_blank" rel="noopener" title="Redux-Saga入门">Redux-Saga入门</a></li><li><a href="https://segmentfault.com/a/1190000016570727" target="_blank" rel="noopener" title="redux-saga实现与原理">redux-saga实现与原理</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;工作中用的是云谦大神封装的dva框架,其中集成了redux-sega .其特点是effect 中写带星号的方法处理异步事件.其中涉及的js的generator等知识点.之前看过原理.好久只是用,有点忘记了..最近感觉这个年纪还是多去想想其中的原理,要不心里还是挺慌张的.&lt;/
      
    
    </summary>
    
    
      <category term="dva" scheme="https://blog.jingzhengyi.top/categories/dva/"/>
    
      <category term="generator" scheme="https://blog.jingzhengyi.top/categories/dva/generator/"/>
    
    
      <category term="generator" scheme="https://blog.jingzhengyi.top/tags/generator/"/>
    
  </entry>
  
</feed>
