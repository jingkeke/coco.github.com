<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">
  <title>个人代码知识记录</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.jingzhengyi.top/"/>
  <updated>2021-05-02T13:45:39.770Z</updated>
  <id>https://blog.jingzhengyi.top/</id>
  
  <author>
    <name>Jing</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TypeScript 结合 React.useState 正确方式</title>
    <link href="https://blog.jingzhengyi.top/2021/05/02/ts-useState/"/>
    <id>https://blog.jingzhengyi.top/2021/05/02/ts-useState/</id>
    <published>2021-05-02T13:01:00.000Z</published>
    <updated>2021-05-02T13:45:39.770Z</updated>
    
    <content type="html"><![CDATA[<h2 id="useDarkMode-hook"><a href="#useDarkMode-hook" class="headerlink" title="useDarkMode hook :"></a><code>useDarkMode</code> hook :</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> DarkModeState = <span class="string">"dark"</span> | <span class="string">"light"</span>;</span><br><span class="line"><span class="keyword">type</span> SetDarkModeState = React.Dispatch&lt;React.SetStateAction&lt;DarkModeState&gt;&gt;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useDarkMode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> preferDarkQuery = <span class="string">"(prefers-color-scheme: dark)"</span>;</span><br><span class="line">  <span class="keyword">const</span> [mode, setMode] = React.useState&lt;DarkModeState&gt;<span class="function">(<span class="params">(<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> lsVal = <span class="built_in">window</span>.localStorage.getItem(<span class="params">"colorMode"</span>);</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">if</span> (<span class="params">lsVal</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">return</span> lsVal === "dark" ? "dark" : "light";</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">return</span> <span class="built_in">window</span>.matchMedia(<span class="params">preferDarkQuery</span>).matches ? "dark" : "light";</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">  &#125;</span>);</span></span><br><span class="line"><span class="function">  <span class="params">React</span>.<span class="params">useEffect</span>(<span class="params">(<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> mediaQuery = <span class="built_in">window</span>.matchMedia(<span class="params">preferDarkQuery</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> handleChange = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      setMode(<span class="params">mediaQuery.matches ? "dark" : "light"</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;;</span></span></span><br><span class="line"><span class="function"><span class="params">    mediaQuery.addEventListener(<span class="params">"change", handleChange</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">return</span> (<span class="params"></span>) =&gt; mediaQuery.removeEventListener(<span class="params">"change", handleChange</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">  &#125;, []</span>);</span></span><br><span class="line"><span class="function">  <span class="params">React</span>.<span class="params">useEffect</span>(<span class="params">(<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="built_in">window</span>.localStorage.setItem(<span class="params">"colorMode", mode</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">  &#125;, [mode]</span>);</span></span><br><span class="line"><span class="function">  // <span class="params">we</span>'<span class="params">re</span> <span class="params">doing</span> <span class="params">it</span> <span class="params">this</span> <span class="params">way</span> <span class="params">instead</span> <span class="params">of</span> <span class="params">as</span> <span class="params">an</span> <span class="params">effect</span> <span class="params">so</span> <span class="params">we</span> <span class="params">only</span></span></span><br><span class="line"><span class="function">  // <span class="params">set</span> <span class="params">the</span> <span class="params">localStorage</span> <span class="params">value</span> <span class="params">if</span> <span class="params">they</span> <span class="params">explicitly</span> <span class="params">change</span> <span class="params">the</span> <span class="params">default</span></span></span><br><span class="line"><span class="function">  <span class="params">return</span> [<span class="params">mode</span>, <span class="params">setMode</span>] <span class="params">as</span> <span class="params">const</span>;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="A-closer-look"><a href="#A-closer-look" class="headerlink" title="A closer look"></a>A closer look</h2><p>I want to call out a few things about the hook itself that made things work well from a TypeScript perspective. First, let’s clear out all the extra stuff and just look at the important bits. We’ll even clear out the TypeScript and add it iteratively:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useDarkMode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [mode, setMode] = React.useState(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"light"</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> [mode, setMode];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [mode, setMode] = useDarkMode();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;button onClick=&#123;<span class="function"><span class="params">()</span> =&gt;</span> setMode(mode === <span class="string">"light"</span> ? <span class="string">"dark"</span> : <span class="string">"light"</span>)&#125;&gt;</span><br><span class="line">      Toggle <span class="keyword">from</span> &#123;mode&#125;</span><br><span class="line">    &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>From the get-go, we’ve got an error when calling setMode:</p><p>This expression is not callable.<br>Not all constituents of type ‘string | React.Dispatch&lt;SetStateAction<string>&gt;’ are callable.<br>Type ‘string’ has no call signatures.(2349)<br>You can read each addition of indentation as “because”, so let’s read that again:</p><blockquote><p>这个表达式不是可被调用的. <em>Because</em> not all constituents of type ‘string | React.Dispatch&lt;SetStateAction<string>&gt;’ are callable. 因为推断出有俩值,其中是 string 不可调用(2349)</p></blockquote><p>我们肉眼可见 setMode 是个函数,为啥 ts 推断它是两种类型?</p><p>我们换种写法:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = useDarkMode();</span><br><span class="line"><span class="keyword">const</span> mode = array[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> setMode = array[<span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>在这种情形下 array 有以下推断:</p><p><code>Array&lt;string | React.Dispatch&lt;React.SetStateAction&lt;string&gt;&gt;&gt;</code></p><p>TypeScript 自己推断不出来数组的先后顺序,它只知道数组返回了个 string 和 Dispatch 类型</p><p>But React’s useState hook manages to ensure when we extract values out of it. Let’s take a quick look at their type definition for useState:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useState</span>&lt;<span class="title">S</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  initialState: S | (() =&gt; S)</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): [<span class="title">S</span>, <span class="title">Dispatch</span>&lt;<span class="title">SetStateAction</span>&lt;<span class="title">S</span>&gt;&gt;]</span>;</span><br></pre></td></tr></table></figure><p>Ah, so they have a return type that is an array with explicit types. So rather than an array of elements that can be one of two types, it’s explicitly an array with two elements where the first is the type of state and the second is a Dispatch SetStateAction for that type of state.</p><p>我们需要告诉 TypeScript 我们确保数组不会改变.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useDarkMode</span>(<span class="params"></span>): [<span class="title">string</span>, <span class="title">React</span>.<span class="title">Dispatch</span>&lt;<span class="title">React</span>.<span class="title">SetStateAction</span>&lt;<span class="title">string</span>&gt;&gt;] </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> [mode, setMode];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Or we could make a specific type for a variable:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useDarkMode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">const</span> returnValue: [<span class="built_in">string</span>, React.Dispatch&lt;React.SetStateAction&lt;<span class="built_in">string</span>&gt;&gt;] = [</span><br><span class="line">    mode,</span><br><span class="line">    setMode,</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">return</span> returnValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更好的方式 是 Typescript 内建了这个能力,因为 typescript 已经知道了 array 的类型.所以我们只需要告诉 ts “返回数据是不变的” 我们指定返回值为 const</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useDarkMode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> [mode, setMode] <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就不需要 ts 自己判断返回类型</p><p>And we can take it a step further because with our Dark Mode functionality, the string can be either dark or light so we can do better than TypeScript’s inference and pass the possible values explicitly:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useDarkMode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [mode, setMode] = React.useState&lt;<span class="string">"dark"</span> | <span class="string">"light"</span>&gt;<span class="function">(<span class="params">(<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="comment">// ...</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">return</span> "light";</span></span></span><br><span class="line"><span class="function"><span class="params">  &#125;</span>);</span></span><br><span class="line"><span class="function">  // ...</span></span><br><span class="line"><span class="function">  <span class="params">return</span> [<span class="params">mode</span>, <span class="params">setMode</span>] <span class="params">as</span> <span class="params">const</span>;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>This will help us when we call setMode to ensure we not only call it with a string, but the right type of string. I also created type aliases for this and the dispatch function to make the prop types easier as I pass these values around my app.</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="%https://kentcdodds.com/blog/wrapping-react-use-state-with-type-script%">ref1</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;useDarkMode-hook&quot;&gt;&lt;a href=&quot;#useDarkMode-hook&quot; class=&quot;headerlink&quot; title=&quot;useDarkMode hook :&quot;&gt;&lt;/a&gt;&lt;code&gt;useDarkMode&lt;/code&gt; hook :&lt;/h2&gt;
      
    
    </summary>
    
    
      <category term="react" scheme="https://blog.jingzhengyi.top/categories/react/"/>
    
      <category term="typescript" scheme="https://blog.jingzhengyi.top/categories/react/typescript/"/>
    
    
  </entry>
  
  <entry>
    <title>d3Js入门</title>
    <link href="https://blog.jingzhengyi.top/2021/04/25/d3/"/>
    <id>https://blog.jingzhengyi.top/2021/04/25/d3/</id>
    <published>2021-04-25T02:57:00.000Z</published>
    <updated>2021-04-25T03:26:47.651Z</updated>
    
    <content type="html"><![CDATA[<p>chart 之类如果用别人的库 其实 最终展示的 是 svg .然后 d3Js 是一个主要基于 svg 的一个 dom 操作的库. 最近学习了一下. 因为有些需要可能:</p><ul><li>用别人库可能杀鸡用牛刀</li><li>定制需求</li><li>如果老板想要一些炫的动效,或者一些有交互的组件, 比如一个行驶的小车.这些其实用 d3 很方便.</li><li>自己想折腾一下吧……..多了解一些</li></ul><h2 id="d3-vs-threeJs"><a href="#d3-vs-threeJs" class="headerlink" title="d3 vs threeJs"></a>d3 vs threeJs</h2><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li>d3 主要是基于 svg 的 ,如果是操作几个 dom,形状这个合适</li><li>threejs 主要是基于 webgl ,canval 的库,3d 效果的复杂的图像需求</li></ul><h2 id="svg"><a href="#svg" class="headerlink" title="svg"></a>svg</h2><p>svg 学习可以看看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial" target="_blank" rel="noopener">mdn 的官网  </a> .</p><h3 id="主要的元素"><a href="#主要的元素" class="headerlink" title="主要的元素"></a>主要的元素</h3><ul><li>path</li><li>line</li><li>rect</li><li>text<br><img src="./pics/d3-svg1.png" alt="元素"></li></ul><h2 id="d3-学习"><a href="#d3-学习" class="headerlink" title="d3 学习"></a>d3 学习</h2><p>我主要是看了一堆 frontendMaster 的课程.</p><p>个人感觉笔记难理解的是 d3 的链式调用吧.一开始 .主要就是有一些是找到 dom ,然后可以之间套用方法.</p><ul><li>.call 方法 参考<a href="https://stackoverflow.com/questions/12805309/javascript-library-d3-call-function" target="_blank" rel="noopener">stackoverflow d3 call function</a><br>.call()是 D3 API 函数，不要与<em>Function.prototype.call（）</em> 混淆<blockquote><p>selection.call(function<a href="">, arguments…</a>)<br>完全调用一次指定的函数，并将此选择与任何可选参数一起传递。返回此选择。这等效于手动调用功能，但有助于方法链接。例如，要在可重用函数中设置几种样式：<br>现在说：<br><code>d3.selectAll(&quot;div&quot;).call(name, &quot;John&quot;, &quot;Snow&quot;);</code><br>这大致相当于：<br><code>name(d3.selectAll(&quot;div&quot;), &quot;John&quot;, &quot;Snow&quot;);</code><br>唯一的区别是 selection.call 总是返回选择内容，而不是被调用函数 name 的返回值。</p></blockquote></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.cassie.codes/posts/swipey-image-grids/" target="_blank" rel="noopener">https://www.cassie.codes/posts/swipey-image-grids/</a> svg 的动效</li><li><a href="https://wattenberger.com/blog/react-and-d3" target="_blank" rel="noopener">https://wattenberger.com/blog/react-and-d3</a> 感觉挺炫的,不过感觉有点代码不全</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;chart 之类如果用别人的库 其实 最终展示的 是 svg .然后 d3Js 是一个主要基于 svg 的一个 dom 操作的库. 最近学习了一下. 因为有些需要可能:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用别人库可能杀鸡用牛刀&lt;/li&gt;
&lt;li&gt;定制需求&lt;/li&gt;
&lt;li&gt;如果老板
      
    
    </summary>
    
    
      <category term="css" scheme="https://blog.jingzhengyi.top/categories/css/"/>
    
    
  </entry>
  
  <entry>
    <title>程序猿的领导力</title>
    <link href="https://blog.jingzhengyi.top/2021/04/18/leader/"/>
    <id>https://blog.jingzhengyi.top/2021/04/18/leader/</id>
    <published>2021-04-18T13:32:00.000Z</published>
    <updated>2021-04-18T15:03:18.230Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>感觉网上很少有关程序员技术路线的职业规划,然后最近看了一篇,大概翻译了一下 原文<a href="https://career-ladders.dev/engineering/" target="_blank" rel="noopener">https://career-ladders.dev/engineering/</a></p></blockquote><h1 id="职业规划"><a href="#职业规划" class="headerlink" title="职业规划"></a>职业规划</h1><p>我为我所在的的团队使用的职业规划的一个样例，对任何人开源。</p><h2 id="一级工程师"><a href="#一级工程师" class="headerlink" title="一级工程师#"></a>一级工程师#</h2><ul><li>完成明确定义的任务，并在有阻塞的情况下进行沟通</li><li>努力学习相关技术和系统，积极维护和扩展系统</li><li>虚心地与内部和外部沟通</li><li>通过完成新功能、重构现有代码或更新系统来贴现自己的价值，从而使其他开发人员能够取得成功</li><li>帮助调试技术问题。提交问题，以便我们能够记录和改进我们的服务</li><li>工作经验：<em>无工作经验</em>。</li></ul><h2 id="二级工程师"><a href="#二级工程师" class="headerlink" title="二级工程师#"></a>二级工程师#</h2><ul><li>致力于推动更大特性的工程创新，同时注意不要在过程中产生任务延期</li><li>先发制人的扫描会导致积压。行动包括但不限于：熟悉系统中的疼痛点，应用相关标签和分类，通过拉请求或其他方式关闭它们</li><li>体谅团队中的其他成员，在工作中尽量支持他人</li><li>能够熟练地评价同行的工作。这包括要有礼貌，周到，周到，灵活，而不是迂腐</li><li>倾听他人的优先事项和关切，承认不同的观点。预测他人的反应</li><li>经验：通常需要至少 <em>2 年的专业经验</em>。</li></ul><h2 id="高级工程师"><a href="#高级工程师" class="headerlink" title="高级工程师"></a>高级工程师</h2><p>在这一点上，一个人正在体现他作为个人贡献者的效率。</p><ul><li>定义并执行针对特定功能或内部系统维护 / 升级的执行计划</li><li>积极参与工程工作，帮助简化我们产品的经验</li><li>通过结对编程、回顾和提供指导来帮助支持同事的工作</li><li>根据需要调整优先顺序</li><li>努力减少任务延期，同时与队友就任何更大的重构进行沟通</li><li>努力理解团队正在开发的特性的目的，并帮助向团队成员传达这一目的。在期望不明确的时候提出澄清问题</li><li>当任务很大时，将工作范围缩小到更小的、可操作的部分</li><li>展示对他人想法的开放性。适应他们的沟通风格，以最有效的沟通。有效和准确地分享想法和合作努力的成果</li><li>以预期工作范围所需的规模和维护类型的方式编写代码。在创建和审查拉取请求时考虑易读性</li><li>经验：通常需要至少 <em>5 年的专业经验</em>。</li></ul><h2 id="staff工程师"><a href="#staff工程师" class="headerlink" title="staff工程师#"></a>staff工程师#</h2><p>在这一点上，一个人的大部分时间都花在提升自己的技能以帮助他人上。</p><ul><li>积极参与会议，并在必要时创建跨团队协作以实现业务目标</li><li>创建和维护内部文档，以了解他们正在工作的系统的目的和结构。仔细记录不清楚的过程</li><li>教导同龄人如何建立系统和驱动特性和系统改进的执行计划</li><li>协调整个团队的工作，而不是在单打独斗。确保人们在不同的项目中感到价值感，并且他们的声音被听到</li><li>通过工程上的努力使团队快速前进</li><li>积极主动地沟通问题并做必要的取舍。拥有问题的主导权.</li><li>管理较大的重构和 / 或系统升级,可以帮助其他人进行相同的工作或参与。能够估计工作范围，当这些估计不准确时，与诸如产品管理之类的利益相关者协调，以解决风险，并获得主导权</li><li>经验：通常需要至少 <em>8 年的专业经验</em>。</li></ul><h2 id="首席工程师"><a href="#首席工程师" class="headerlink" title="首席工程师#"></a>首席工程师#</h2><p>在这一点上，一个是帮助别人做到最好，放弃自我成就大我?</p><ul><li>开发经过验证的系统。在整个团队中推广这些系统和方法，以便其他人可以从中学习和改进</li><li>深厚的行业知识和对技术领域的认识。将这一分析适当地纳入战略</li><li>不仅仅只是领导，要有提供指导和前瞻性地愿景</li><li>指导和积极推动技术技能的直接或扩展团队考虑到他们的职业阶段和个人轨迹</li><li>通过围绕共同的需求或客户利益与他人合作来消除障碍.创建跨组织边界的策略，以实现业务目标或扩大影响力</li><li>可以预见问题和其影响，他们的想法将对其他人产生影响，并追求互利的战略</li><li>除了参加会议，深思熟虑地创建和组织有效的会议</li><li>为一系列工作设定清晰而富有挑战性的目标，并以热情和激情追求它们。理解业务目标，并将其整合到这个工作体系中。严格审查多个计划，并根据需要进行调整</li><li>通过扩展 / 指导团队来推动可衡量的增长，积极影响工程路线图，管理关键指标，创建研究和 / 或项目</li><li>与其他团队合作，提高我们内部工具的有效性</li><li>预测他们周围人的需求。表现出关心他的队友,让其感觉可以在工作时间与他们取得联系。有主动性地写过程文档</li><li>经验：通常需要至少 10 年的专业经验。</li></ul><h2 id="杰出工程师"><a href="#杰出工程师" class="headerlink" title="杰出工程师#"></a>杰出工程师#</h2><ul><li>通过工程任务、开放源码工作或者为产品特性提供支持，确定整个行业范围内缺失的功能，实现那些可以大规模释放客户增长的潜力的功能 .</li><li>了解他们的活动对公司 OKRs 的影响，并且主动地 根据战略精确地选择需要做什么.</li><li>在内部和外部积极给予帮助，确保他们的工作被看到。扩展他们的社会资本来帮助其他人</li><li>在合作时，尤其是在棘手的情况下，要仔细考虑沟通的方式</li><li>致力于系统架构，思考问题，预测未来的使用情况。构建可扩展到适当数量的系统</li><li>当出现问题时，有效沟通，理解任何提议的变更的风险和影响。当别人在其他优先事项之外做出权衡时，要善于倾听</li><li>经验：通常需要至少 <em>12 年的专业经验</em>。</li></ul><h2 id="技术主管-还没达到-个人感觉"><a href="#技术主管-还没达到-个人感觉" class="headerlink" title="技术主管(还没达到,个人感觉)#"></a>技术主管(还没达到,个人感觉)#</h2><p>技术主管负责领导一个特定的项目，并对其技术成果的质量负责。</p><p>任何人都可以在他们职业生涯的任何阶段成为技术主管。</p><ul><li>包括大量的项目管理 —— 保证项目准时运行，保证人们工作畅通无阻，当人们陷入困境时向管理层提出建议</li><li>有时可能涉及到指导员工和结对编程</li><li>仍然涉及项目的编码 / 参与和 IC 工作。这也可能意味着要填补项目的空白</li><li>帮助组织和促进与利益相关者的富有成效的正向沟通的会议</li><li>创建与总体项目目标以及执行方式的一致性。以富有成效的方式引发冲突。此外，一旦设定了产品愿景，就要全力实现它.</li><li>技术领导温和地执行标准 —— 包括文化和态度。如果团队不协调，技术领导会花时间和工程经理一起引导他们提高生产力</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;感觉网上很少有关程序员技术路线的职业规划,然后最近看了一篇,大概翻译了一下 原文&lt;a href=&quot;https://career-ladders.dev/engineering/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;htt
      
    
    </summary>
    
    
      <category term="learn" scheme="https://blog.jingzhengyi.top/categories/learn/"/>
    
    
  </entry>
  
  <entry>
    <title>esmodule 在浏览器和node端使用</title>
    <link href="https://blog.jingzhengyi.top/2021/04/11/esmodule/"/>
    <id>https://blog.jingzhengyi.top/2021/04/11/esmodule/</id>
    <published>2021-04-11T02:47:00.000Z</published>
    <updated>2021-04-18T15:03:18.230Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>esmodule 在我 2016 年刚开始学 react 时候就开始用了,虽然用的理所当然,但是其实在 js 发展的历史中,早期好多项目其实是不支持的,包括浏览器, 这个淘汰过程需要很长的时间.最近感觉在 ie 逐步历史舞台的时期,去了解一下 node 浏览器里如何直接用 esmodule 还是很需要的.<br>翻了一些资料,总结一下如何使用.</p></blockquote><h2 id="NODE-里用-ESModules"><a href="#NODE-里用-ESModules" class="headerlink" title="NODE 里用 ESModules"></a>NODE 里用 ESModules</h2><p>主流的 node js 现在都支持 ESmodules</p><p>到 2021 年 4 月 20 号, Node v10 版本将停止维护 (更多参考 <a href="https://nodejs.org/en/about/releases/" target="_blank" rel="noopener">Node Releases</a> ).这很令人振奋因为这意味着每个在维护的 node 版本都官方支持 EcmaScript Modules! 可能有些人还是挺喜欢以前的 CommonJS 但是 EcmaScript Modules 是大势所趋.</p><p>First, we need the JavaScript we want to run:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; get-files.js</span><br><span class="line"></span><br><span class="line">import path from &#39;path&#39;</span><br><span class="line"></span><br><span class="line">import fs from &#39;fs&#x2F;promises&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const isDir \&#x3D; async d \&#x3D;&gt; (await fs.lstat(d)).isDirectory()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">async function getFiles(dir) &#123;</span><br><span class="line"></span><br><span class="line">const list \&#x3D; await fs.readdir(dir)</span><br><span class="line"></span><br><span class="line">const filePromises \&#x3D; list.map(async filename \&#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">const filepath \&#x3D; path.join(dir, filename)</span><br><span class="line"></span><br><span class="line">if (await isDir(filepath)) &#123;</span><br><span class="line"></span><br><span class="line">return &#123;type: &#39;dir&#39;, filepath&#125;</span><br><span class="line"></span><br><span class="line">&#125; else &#123;</span><br><span class="line"></span><br><span class="line">const content \&#x3D; String(await fs.readFile(filepath))</span><br><span class="line"></span><br><span class="line">return &#123;type: &#39;file&#39;, filepath, content&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">return Promise.all(filePromises)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export &#123;getFiles&#125;</span><br><span class="line"></span><br><span class="line">Next, let&#39;s make a JavaScript file that imports this and runs it:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; index.js</span><br><span class="line"></span><br><span class="line">import &#123;getFiles&#125; from &#39;.&#x2F;get-files.js&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.log(await getFiles(&#39;.&#39;))</span><br></pre></td></tr></table></figure><p>运行一下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">node .</span><br><span class="line"></span><br><span class="line">(node:5369) Warning: To load an ES module, set &quot;type&quot;: &quot;module&quot; in the package.json or use the .mjs extension.</span><br><span class="line"></span><br><span class="line">(Use \&#96;node --trace-warnings ...\&#96; to show where the warning was created)</span><br><span class="line"></span><br><span class="line">&#x2F;Users&#x2F;kentcdodds&#x2F;Desktop&#x2F;super-simple-start-to-esm-in-node&#x2F;index.js:1</span><br><span class="line"></span><br><span class="line">import &#123;getFiles&#125; from &#39;.&#x2F;get-files.js&#39;</span><br><span class="line"></span><br><span class="line">^^^^^^</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SyntaxError: Cannot use import statement outside a module</span><br><span class="line"></span><br><span class="line"> at wrapSafe (internal&#x2F;modules&#x2F;cjs&#x2F;loader.js:979:16)</span><br><span class="line"></span><br><span class="line"> at Module.\_compile (internal&#x2F;modules&#x2F;cjs&#x2F;loader.js:1027:27)</span><br><span class="line"></span><br><span class="line"> at Object.Module.\_extensions..js (internal&#x2F;modules&#x2F;cjs&#x2F;loader.js:1092:10)</span><br><span class="line"></span><br><span class="line"> at Module.load (internal&#x2F;modules&#x2F;cjs&#x2F;loader.js:928:32)</span><br><span class="line"></span><br><span class="line"> at Function.Module.\_load (internal&#x2F;modules&#x2F;cjs&#x2F;loader.js:769:14)</span><br><span class="line"></span><br><span class="line"> at Function.executeUserEntryPoint \[as runMain\] (internal&#x2F;modules&#x2F;run\_main.js:72:12)</span><br><span class="line"></span><br><span class="line"> at internal&#x2F;main&#x2F;run\_main\_module.js:17:47</span><br></pre></td></tr></table></figure><p>nodejs 运行 esmodule 不是默认项. 你有两个选择:</p><ul><li>把 <code>.js</code> 改成 to <code>.mjs</code></li><li>修改<code>package.json</code>,添加 <code>&quot;type&quot;: &quot;module&quot;</code>.</li></ul><p>以下是修改 package.json 后 再次运行 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">node .</span><br><span class="line"></span><br><span class="line">\[</span><br><span class="line"></span><br><span class="line"> &#123;</span><br><span class="line"></span><br><span class="line"> type: &#39;file&#39;,</span><br><span class="line"></span><br><span class="line"> filepath: &#39;get-files.js&#39;,</span><br><span class="line"></span><br><span class="line"> content: &quot;import path from &#39;path&#39;\\n&quot; +</span><br><span class="line"></span><br><span class="line"> &#x2F;&#x2F; clipped for brevity</span><br><span class="line"></span><br><span class="line"> &#39;export &#123;getFiles&#125;\\n&#39;</span><br><span class="line"></span><br><span class="line"> &#125;,</span><br><span class="line"></span><br><span class="line"> &#123;</span><br><span class="line"></span><br><span class="line"> type: &#39;file&#39;,</span><br><span class="line"></span><br><span class="line"> filepath: &#39;index.js&#39;,</span><br><span class="line"></span><br><span class="line"> content: &quot;import &#123;getFiles&#125; from &#39;.&#x2F;get-files.js&#39;\\n&quot; +</span><br><span class="line"></span><br><span class="line"> &#39;\\n&#39; +</span><br><span class="line"></span><br><span class="line"> &quot;console.log(await getFiles(&#39;.&#39;))\\n&quot;</span><br><span class="line"></span><br><span class="line"> &#125;,</span><br><span class="line"></span><br><span class="line"> &#123;</span><br><span class="line"></span><br><span class="line"> type: &#39;file&#39;,</span><br><span class="line"></span><br><span class="line"> filepath: &#39;package.json&#39;,</span><br><span class="line"></span><br><span class="line"> content: &#39;&#123;\\n  &quot;type&quot;: &quot;module&quot;\\n&#125;\\n&#39;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">\]</span><br></pre></td></tr></table></figure><p>参考:</p><ul><li><a href="https://nodejs.medium.com/announcing-core-node-js-support-for-ecmascript-modules-c5d6dc29b663" target="_blank" rel="noopener">the official initial announcement of ESM support</a>.</li><li><a href="https://kentcdodds.com/blog/super-simple-start-to-es-modules-in-node-js/" target="_blank" rel="noopener">esm by Kent C</a></li></ul><h2 id="在浏览器里用-ESModules"><a href="#在浏览器里用-ESModules" class="headerlink" title="在浏览器里用 ESModules"></a>在浏览器里用 ESModules</h2><p>_所有的主流浏览器现在都支持 ESModuels!!!!,demo 如下:</p><ul><li>先写一个想要运行的 js module:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; append-div.js</span><br><span class="line"></span><br><span class="line">function appendDiv(message) &#123;</span><br><span class="line"></span><br><span class="line"> const div \&#x3D; document.createElement(&#39;div&#39;)</span><br><span class="line"></span><br><span class="line"> div.textContent \&#x3D; message</span><br><span class="line"></span><br><span class="line"> document.body.appendChild(div)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export &#123;appendDiv&#125;</span><br><span class="line"></span><br><span class="line">Next, let&#39;s make an HTML file to load that file:</span><br><span class="line"></span><br><span class="line">&lt;!-- index.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type\&#x3D;&quot;module&quot;\&gt;</span><br><span class="line"></span><br><span class="line"> import &#123;appendDiv&#125; from &#39;.&#x2F;append-div.js&#39;</span><br><span class="line"></span><br><span class="line"> appendDiv(&#39;Hello from inline script&#39;)</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script\&gt;</span><br></pre></td></tr></table></figure><p>注意 <code>type=&quot;module&quot;</code> 属性. 这是所有我们需要修改的地方 ,用”module” 代替 “script”, 你可以参考<a href="https://usefulangle.com/post/256/script-type-module-vs-script-javascript" target="_blank" rel="noopener">several differences</a> 看看浏览器运行模块化 js 的原理.</p><p>我们需要 启动一个静态服务器来测试 ,推荐用<code>npx server .</code> 这个 npm 包 来做这个事情, 默认启动的是 <a href="http://localhost:5000/" target="_blank" rel="noopener">localhost:5000</a> 这个地址. 🎉</p><p>从另一个 js 文件来引用 module js 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; script-src.js</span><br><span class="line"></span><br><span class="line">import &#123;appendDiv&#125; from &#39;.&#x2F;append-div.js&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">appendDiv(&#39;Hello from external script&#39;)</span><br></pre></td></tr></table></figure><p>修改 html 文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- index.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type\&#x3D;&quot;module&quot;\&gt;</span><br><span class="line"></span><br><span class="line"> import &#123;appendDiv&#125; from &#39;.&#x2F;append-div.js&#39;</span><br><span class="line"></span><br><span class="line"> appendDiv(&#39;Hello from inline script&#39;)</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script\&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type\&#x3D;&quot;module&quot; src\&#x3D;&quot;.&#x2F;script-src.js&quot;\&gt;&lt;&#x2F;script\&gt;</span><br></pre></td></tr></table></figure><p>下一个知识点,<strong>动态引用</strong>module js 文件::</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; async-script.js</span><br><span class="line"></span><br><span class="line">import &#123;appendDiv&#125; from &#39;.&#x2F;append-div.js&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function go() &#123;</span><br><span class="line"></span><br><span class="line"> appendDiv(&#39;Hello from async script&#39;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export &#123;go&#125;</span><br><span class="line"></span><br><span class="line">Then we can load that using a dynamic import statement:</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; script-src.js</span><br><span class="line"></span><br><span class="line">import &#123;appendDiv&#125; from &#39;.&#x2F;append-div.js&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">appendDiv(&#39;Hello from external script&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import(&#39;.&#x2F;async-script.js&#39;).then(</span><br><span class="line"></span><br><span class="line"> moduleExports \&#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line"> moduleExports.go()</span><br><span class="line"></span><br><span class="line"> &#125;,</span><br><span class="line"></span><br><span class="line"> error \&#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line"> console.error(&#39;there was an error loading the script&#39;)</span><br><span class="line"></span><br><span class="line"> throw error</span><br><span class="line"></span><br><span class="line"> &#125;,</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>你甚至可以这样来引用这个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#96;import \* as d3 from &#39;https:&#x2F;&#x2F;unpkg.com&#x2F;d3?module&#39;&#96;</span><br></pre></td></tr></table></figure><p>The point is, the thing you put in the quotes in your import statements has to point to a JavaScript resource on some server somewhere. <a href="https://unpkg.com/" target="_blank" rel="noopener">Learn more about unpkg.com</a>.</p><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul><li><strong><a href="https://egghead.io/lessons/egghead-use-javascript-modules-in-the-browser?pl=kent-s-blog-posts-as-screencasts-eefa540c&af=5236ad" target="_blank" rel="noopener">Watch “Use JavaScript Modules in the browser” on egghead.io</a></strong></li><li><a href="https://gist.github.com/kentcdodds/48c069462a9ab4223eb93b5e19acee31" target="_blank" rel="noopener">the code for this</a></li><li><a href="https://v8.dev/features/modules" target="_blank" rel="noopener">v8.dev/features/modules</a></li><li><a href="https://www.sitepoint.com/using-es-modules/" target="_blank" rel="noopener">Using ES Modules in the Browser Today</a> by <a href="https://twitter.com/markbrown4" target="_blank" rel="noopener">Mark Brown</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;esmodule 在我 2016 年刚开始学 react 时候就开始用了,虽然用的理所当然,但是其实在 js 发展的历史中,早期好多项目其实是不支持的,包括浏览器, 这个淘汰过程需要很长的时间.最近感觉在 ie 逐步历史舞台的时期,去了解一下 no
      
    
    </summary>
    
    
      <category term="js" scheme="https://blog.jingzhengyi.top/categories/js/"/>
    
      <category term="esmodule" scheme="https://blog.jingzhengyi.top/categories/js/esmodule/"/>
    
    
      <category term="node" scheme="https://blog.jingzhengyi.top/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>不用花钱在教学网站进厂的方案</title>
    <link href="https://blog.jingzhengyi.top/2021/04/05/freebootcamps/"/>
    <id>https://blog.jingzhengyi.top/2021/04/05/freebootcamps/</id>
    <published>2021-04-04T21:49:00.000Z</published>
    <updated>2021-04-04T22:30:23.792Z</updated>
    
    <content type="html"><![CDATA[<p>如今，公司要求开发人员毕业的速度比他们毕业的速度还要快，而想要转行的人们已经让一种新的编程教育形式占据了主导地位: 编程训练营。</p><p>直截了当地说，编程训练营为有抱负的开发人员提供了一个合适的空间，他们希望获得全面的教育，而不必花费大量的金钱和时间。编码训练营已经变得很流行，因为它们帮助开发人员学习受欢迎的技术，并成为熟练的程序员，可以在不到一年的时间里找到工作。</p><p>然而，编码训练营并不是没有缺点的。随着价格接近数万元(美国标准)，以及学员找公司不尽如意的坏名声，所谓的“完美解决方案”的训练营现在正受到质疑。</p><p>作为一个在大学里学习软件开发的人，我总是从怀疑的角度来看待编程训练营。在回顾了顶级编程训练营的几个学习课程之后，我开始质疑一个训练营除了让学生付出巨额代价，并让他们声称自己完成了一个特定的大名鼎鼎的训练营之外，还能为他们带来什么。</p><p>当你仔细分析的时候，所有在训练营里学到的技能都是你可以通过在线资源免费自学的技能。</p><p>我意识到训练营有某些优势，包括面授(取决于你选择的教学方式)、人际交往机会、毕业后工作安排的支持可能性，以及学费延期支付，直到你有一份不错的薪水。但是—在一个堪比集训营的时代—存点钱，把课程中的所有知识都免费教给自己，这难道不是明智之举吗？为什么你必须在 16 周的时间里花费数万元来学习特定的技能？为什么不强迫自己在同样的 16 周内免费学习这些技能呢？</p><p>在完成了一个短暂的成本-收益分析之后，回答下面这个问题就变得更加困难了: 编写训练营值得吗？虽然你可以在短时间内学到即时需要的技能、社交机会和职业咨询，但这些并不一定比学费、生活费用和社会成本更重要。</p><p>编写训练营的文章，发表关于是否值得参加他们的课程的文章，往往掩盖了这样一个事实: 在今天这个时代，自学与每周坐在教室里 40 个小时，为基本相同的知识分发数万元一样有效。</p><p>我明白，<em>他们能提供一个底线的担保</em>。</p><p>然而，这样做的问题在于，它们提供了令人信服的论据，说明为什么有抱负的开发者不能以其他任何方式进入就业市场。这让人们感到无助，因为他们要权衡把数万元和几个月的失业时间投入到一些没有可靠保证的事情中的后果。</p><p>虽然我同意自我教学并不是适合每个人的方法，但我认为，对于那些自律、有动力、有成为开发人员的坚定目标的人来说，自我教学路线和参加编程训练营一样有效。</p><p>自学的好处是，你不必为了同样的知识而辞去工作并支付数万元。然而，对于每一个优点，都有一个缺点。在这种情况下，你不会因为完成了一个著名的训练营而得到恶名。此外，如果你不是一个积极主动的人，你将会失去社交活动和职业咨询的好处，而这些都是你在训练营里得到的。然而，有一些方法可以避免这些陷阱，这些方法可以帮助你像一个训练营毕业生一样具有竞争力。</p><p>当你把它分解开来，就有可能开发出一个有效的学习课程，类似于编程训练营，遵循类似的时间表，提供给你许多相同的机会。</p><p>为什么不在做出最终决定之前探索一下你的选择呢？</p><h2 id="如何破解编程训练营模式，免费学习你需要的一切"><a href="#如何破解编程训练营模式，免费学习你需要的一切" class="headerlink" title="如何破解编程训练营模式，免费学习你需要的一切?"></a>如何破解编程训练营模式，免费学习你需要的一切?</h2><ol><li>设定你的参数<br>在我们开发一个编码训练营式的课程之前，一些参数必须先到位。这些因人而异，因人而异，所以在开始之前了解这些问题的答案很重要。</li></ol><ul><li>“我愿意在这个课程上花多长时间?” 你需要回答这个问题，根据你愿意花多少周来学习这些概念，以及你每周可以留出多少小时来学习这些概念</li><li>“在这次经历之后，我想做什么?” 全套网页开发人员才能学到的东西，但是通过构建自己的课程，你可以学到任何你想学的技能。所以，问问你自己，你觉得哪个科技行业的工作你会感兴趣，然后调整你的课程来教你自己这些概念</li><li>“我愿意花多少钱?” 这个问题只有在你确实有一点额外的钱并且有兴趣完成一些 MOOCs 的时候才需要回答。许多大学都提供价格合理的 mooc 课程，如果你想学习后台开发或数据科学概念，这些课程可以成为很好的资源 </li></ul><ol start="2"><li>评估你现有的技能<br>是时候通过创建一个技能目录来评估你目前拥有的技能了。这将帮助你避免在你已经掌握的技能上花费不必要的时间，并确保你正在设置你的课程来获得你需要的技能。此外，这个技能清单将帮助你了解你从哪里开始，并提供一个伟大的方式来回顾，看看你有多少进步，到你的课程结束。</li></ol><p>首先创建以下三个列表:</p><ul><li>技术能力(编码经验，技术知识等)</li><li>个人技能(面试技巧、简历撰写、人际关系等)</li><li>商业技能(行业经验和知识，商业沟通技能，管理技能等) </li></ul><ol start="3"><li>决定你需要从这个训练营中学到哪些技能<br>在确定完成课程并发现自己已经掌握了哪些技能之后，你就可以开始拼凑你需要学习的技能。</li></ol><p>首先，对你想要进入的特定领域的编程语言和概念进行一些研究。最好的方法就是看一下招聘广告，找到你想要得到的职位。雇主们列出了他们希望开发人员拥有的所有必需的技术，所以这是一个很好的方法来确定你需要学习的具体技能。另一种方法是阅读趋势指南，这些指南将概述哪些语言和概念最受开发人员欢迎。</p><p>一旦你发现了一个全堆栈 web 开发人员需要知道的所有东西，你就可以开始收集你需要学习这些技能的在线材料。</p><ol start="4"><li>理解编码训练营模式<br>编写训练营的学习课程通常都是以项目为基础的，这迫使学生立即使用他们的新技能。此外，训练营确保毕业生离开时带着作品集、在线展示和其他商业技能，以帮助他们找工作。</li></ol><p>因此，你需要确保你经常建立可以添加到你的简历的项目，确保你在你的课程期间为自己建立一个在线存在，确保你没有忽视你的软技能的学习。</p><p>计划这些事情将帮助你创建一个学习计划，而不用花费数万块钱在编码训练营。</p><ol start="5"><li>构建你的课程<br>让我们构建一个涵盖全堆栈 web 开发的示例课程，同时触及一些软技能，如面试和简历撰写。</li></ol><p>课程将分为三个部分，每个部分学到的技术将与当前的全堆栈 web 开发人员职位相关。列出的大多数在线资源都是免费的，尽管有些可能需要支付费用，或者只能通过小额订阅费或组织凭证获得。</p><p>一个小小的警告: <em>这个课程只是举例来说，只是给你一个关于你的课程看起来如何和你可能想要包括的技术的想法。某些学习领域可能会花费你更长或更短的时间</em>.</p><h3 id="前端开发-第-1-5-周"><a href="#前端开发-第-1-5-周" class="headerlink" title="前端开发: 第 1-5 周"></a><strong>前端开发: 第 1-5 周</strong></h3><h4 id="课程"><a href="#课程" class="headerlink" title="课程:"></a>课程:</h4><ul><li><p>响应式网页设计/盖蒂图片社 freeCodeCamp</p></li><li><p>前端开发库 |freeCodeCamp</p><h4 id="项目"><a href="#项目" class="headerlink" title="项目:"></a>项目:</h4></li><li><p>搭建项目 ー 使用 HTML、 CSS 和 JavaScript (Vanilla JavaScript 或者 Angular、 React 或 Vue 等框架)建立一个网站</p></li></ul><h3 id="后端开发-第-6-14-周"><a href="#后端开发-第-6-14-周" class="headerlink" title="后端开发: 第 6-14 周"></a>后端开发: 第 6-14 周</h3><h4 id="课程-1"><a href="#课程-1" class="headerlink" title="课程:"></a>课程:</h4><ul><li>完全初学者的 Java 教程 | LinkedIn Learning</li><li>用 PHP 构建 Web 应用 | 密歇根大学 <a href="https://www.coursera.org/learn/web-applications-php#faq" target="_blank" rel="noopener">Coursera</a></li><li>SQL 教程ー面向初学者的全数据库课程 |<a href="https://www.youtube.com/watch?v=HXV3zeQKqGY" target="_blank" rel="noopener">freeCodeCamp</a></li><li>全堆栈 JavaScript 教程 |<a href="https://www.youtube.com/watch?v=lauywdXKEXI&t=178s" target="_blank" rel="noopener">freeCodeCamp</a><h4 id="项目-1"><a href="#项目-1" class="headerlink" title="项目:"></a>项目:</h4>搭建项目ーー继续开发为你的第一个 项目建立的网站，但是要提供后端功能，比如让 CRUD 功能链接到数据库</li></ul><h3 id="软技能-第-15-16-周"><a href="#软技能-第-15-16-周" class="headerlink" title="软技能: 第 15-16 周"></a>软技能: 第 15-16 周</h3><h4 id="课程-2"><a href="#课程-2" class="headerlink" title="课程:"></a>课程:</h4><ul><li><p>简历写作 |LinkedIn Learning</p></li><li><p>掌握常见面试问题 |LinkedIn Learning</p></li><li><p>职业战略家找工作指南 |LinkedIn Learning</p></li><li><p>如何制定你的职业生涯规划 LinkedIn Learning</p><h4 id="任务-活动"><a href="#任务-活动" class="headerlink" title="任务/活动:"></a>任务/活动:</h4></li><li><p>创建/更新你的简历和 LinkedIn 个人资料</p></li><li><p>参加一个社交活动</p></li><li><p>与技术招聘人员见面，他们可以帮助你安排工作</p></li><li><p>申请工作</p><h4 id="项目-2"><a href="#项目-2" class="headerlink" title="项目:"></a>项目:</h4><p>项目成果ー把你的专业作品集放在一起，包括你在课程中完成的项目和你最新的简历 </p></li></ul><h3 id="6-运用你学到的技能"><a href="#6-运用你学到的技能" class="headerlink" title="6. 运用你学到的技能"></a>6. 运用你学到的技能</h3><p>编写训练营的优势之一是，它允许你与业内专业人士建立联系，并获得职业咨询。虽然我提到做一些特定的活动，比如参加社交活动，在示例课程的最后一部分会见技术招聘人员，但我强烈建议你在整个学习过程中做这些事情。</p><p>一旦你已经完成或者即将完成你的课程，是时候开始申请工作，并且把自己放在那里，作为一个自学成才的全栈网络开发人员！</p><h2 id="最后的想法"><a href="#最后的想法" class="headerlink" title="最后的想法"></a>最后的想法</h2><p>我不是说编程训练营没有价值。我认为，如果他们能够兑现对学生的承诺，那么他们就是很好的工具。此外，对于那些需要那种学习环境来保持专注和实现目标的学生来说，训练营已经被证明可以提供他们在科技行业找到工作所需要的技能，或者在他们目前的工作岗位上获得大幅提升。</p><p>然而，我并不认为编码训练营是那些想成为开发人员的人的唯一选择。</p><p>编程训练营在时间和金钱上都很昂贵，对于那些需要继续全职工作来获得收入或者有不能被搁置半年的社会承诺的人来说，这些训练营是很差劲的选择。</p><p>因此，我希望你从本文中了解到，成为一名开发人员并不是一个要么全部要么一无所有的过程。你不必投资数万和数月的时间去接受一个可能会也可能不会让你被雇佣 的教育。</p><p>相反，通过建立你自己的课程，你可以获得你通过训练营学到的知识，并且让你继续以适合你需要的方式生活，你仍然可以成为一个有竞争力的开发者。</p><p><a href="%https://betterprogramming.pub/why-you-should-stop-paying-for-coding-bootcamps-in-2021-42ba215e43fc%" title="原文">原文 </a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如今，公司要求开发人员毕业的速度比他们毕业的速度还要快，而想要转行的人们已经让一种新的编程教育形式占据了主导地位: 编程训练营。&lt;/p&gt;
&lt;p&gt;直截了当地说，编程训练营为有抱负的开发人员提供了一个合适的空间，他们希望获得全面的教育，而不必花费大量的金钱和时间。编码训练营已经
      
    
    </summary>
    
    
      <category term="learn" scheme="https://blog.jingzhengyi.top/categories/learn/"/>
    
    
  </entry>
  
  <entry>
    <title>如何做计划&amp;工具推荐</title>
    <link href="https://blog.jingzhengyi.top/2021/03/28/todoPlan/"/>
    <id>https://blog.jingzhengyi.top/2021/03/28/todoPlan/</id>
    <published>2021-03-28T01:43:00.000Z</published>
    <updated>2021-03-29T03:00:34.317Z</updated>
    
    <content type="html"><![CDATA[<p>原文:<a href="https://www.taniarascia.com/everyday-systems/" target="_blank" rel="noopener" title="原文">Everyday Systems That Help Me | Tania Rascia</a><br>自己给翻译了一下,现在有在用她推荐的 Strides ,我用的是免费版本.其他的还是用我之前用的软件.</p><p>读过 <a href="https://zenhabits.net/unoptimizing/" target="_blank" rel="noopener">好生活的误解</a> , 很受触动,我现在认为 <a href="https://www.raptitude.com/2017/07/wise-people-have-rules-for-themselves/" target="_blank" rel="noopener">智者为自己制定规则</a> 对我来说是正确的方法.</p><p>前者试图说明，“不要试图建立一个完美的系统，没有什么是完美的，所以只要放松，习惯混乱，并试图把你所有的注意力集中在一件事情上。”。后者说，“建立自我强加的个人规则，因为当你的标准明确时，你的生活质量就会提高。”。</p><hr><p>这只是我自己给自己设置的”规则”,我个人感觉”眼不见为净”比出现问题了再”亡羊补牢”好.</p><ul><li>停止不停的刷新社交 app</li><li>大幅减少社交媒体</li><li>大幅减少通知</li><li>大幅减少邮件接收</li><li>把工作和生活分开</li></ul><h3 id="社交软件-and-不停刷屏-infinite-scrolling"><a href="#社交软件-and-不停刷屏-infinite-scrolling" class="headerlink" title="社交软件 and 不停刷屏(infinite scrolling)"></a>社交软件 and 不停刷屏(infinite scrolling)</h3><p>我已经训练自己不用浏览 Twitter，不用浏览 reddit，不用浏览 Instagram，我已经很多年没有使用 Facebook 了。根本不用担心自己上瘾担心自己上瘾.</p><p>事情没有绝对的,这些软件也有好的一面,我只是为了避免自己上瘾,没有在手机里装这些 app,但是我需要时候也会看看.</p><h3 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h3><p>我手机上只有两个通知: 电子邮件和短信。(还有日历事件，但是因为 2020 年我几乎没有日历事件，所以我差点忘了。)正如我上面提到的，我的手机上没有任何社交媒体应用。从浅层交互作用中获得的多巴胺越少越好。</p><p>推特是我与外部世界的唯一联系，因为它是我与其他开发者联系的地方，也是我推广我的工作的唯一地方，但我仍然只是每隔几天或每周查看一次。我也让 Slack 远离我的手机。</p><h3 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h3><p>我练习收件箱为零。我尽量及时回复那些需要我回复的邮件。我不回复我收到的所有甚至大部分邮件。我明确表示我不想在东西(来宾帖子、赞助商、广告请求)会被自动标记为垃圾邮件。那些没有明确要求我退订并标记为垃圾邮件的网站为我注册了他们的时事通讯。这导致我很少收到邮件，而我收到的邮件都是能学到东西的人的。</p><h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><p>现在，工作就是我的家，就像我们许多人的家一样。朝九晚五是我的工作时间，5 点以后我不做任何与工作相关的事情，除非有明确的特殊需要。我的手机上没有安装任何工作应用程序或连接(团队、 Slack、 Outlook、工作邮件)。</p><p>Systems</p><hr><p>我一直在高效地使用各种单一用途的应用程序。</p><ul><li>保存我所有的个人笔记、记忆、文章和列表 使用<a href="https://bear.app/" target="_blank" rel="noopener">Bear, 好像是改</a></li><li>跟踪我每天想做的任务/习惯/系统的网站 <a href="https://www.stridesapp.com/" target="_blank" rel="noopener">Strides</a></li><li>One to track the various to-dos I don’t want to forget <a href="https://todoist.com/app/#start" target="_blank" rel="noopener">Todoist</a></li></ul><blockquote><p>Secret note: I built <a href="">my own application</a>(<a href="https://takenote.dev/" target="_blank" rel="noopener">https://takenote.dev/</a>) for handling notes instead of using some other system, because none of the ones I found did exactly what I wanted. In the year I was building this app, I left my thoughts in limbo. I have since realized building and maintaining your own app for something like this is not the best approach. I did learn a ton while doing it, so it was overall a very positive experience.</p></blockquote><p>我不认为它们是不是应用程序真的很重要——你可以使用一本日记或随机的纸张。我不喜欢手写，所以应用程序让我写起来更容易。只要我有一个地方，我知道我可以去检索任何我想要记住或工作，和小日常事情不会落入缝隙。</p><p>我总是觉得我不能做乏味的，daily 任务(预算，计算卡路里，日记)。我过去从来没有做好过，而且我总是那么自由自在的生活！但事实证明，这些习惯并不是那么难以忍受，而且好处远远大于好处。</p><p>当然，你永远不可能一直做所有的事情。你会错过一天的锻炼。你会很累，然后上床睡觉。这很好——只需要毫不气馁地开始每一天崭新的一天。</p><p>Note, I’m only discussing the physical things I do here, not any mental thought processes I have.</p><h3 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h3><p>我每天都做的一些事情.</p><ul><li>整理床铺</li><li>清洗所有用的碗</li><li>整理衣服</li></ul><p>我从来不会把东西弄得一团糟，但是我可能会把事情搁置一、三天——几个盘子堆在一起，衣服堆在地板上，床永远不会整理好。现在我起床后立刻整理床铺，在做饭的时候洗盘子，立刻把衣服放到它们该放的地方。家里总是感觉干净整洁，尽管几乎没有时间和精力必须走进去，因为从来没有超过一天的菜肴或衣服处理的时间。</p><h3 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h3><p>是的，是的。锻炼身体是好的。我觉得我的认知是正确的。因为芝加哥是寒冷的自动对焦，户外运动几乎是不可能的，而且我不想成为健身房的会员。所以我只是选择一个数字(pick up a number ?)，每天做这些事情:</p><ul><li>仰卧起坐 Situps</li><li>俯卧撑 Pushups</li><li>下蹲 Squats</li><li>(如果天气允许的话)去散步/骑自行车 Take a walk/bike ride (weather permitting)</li></ul><p>你真的不能找借口不做前三项，因为它们不需要任何设备或空间。我每天花 45 分钟到 1 小时做这些运动，还有伸展运动。可以很容易地完成，同时一边看与电视或音频一边做。至于散步，我经常在一两英里外选一家咖啡馆，然后走到那里再回来喝杯咖啡。如果是骑自行车的天气，我会每周骑几次 10 英里(1 小时)。</p><h3 id="睡觉"><a href="#睡觉" class="headerlink" title="睡觉"></a>睡觉</h3><p>我经常在凌晨 1 点或 2 点起床，只是听听音乐，玩玩视频游戏，看看 Netflix，或者上上网。我也是一个习惯性打盹的人，通常在早上设置 3 个闹钟。现在我有了一条规则:</p><ul><li>In bed by midnight</li><li>Don’t snooze - wake up to the first alarm</li></ul><p>这很难,但我知道每次我这样生活，事情都会变得更好。有时候，你不得不做那些在当下糟糕的事情，为了今后的一天/一周/一个月/一年/一年/一生。</p><h3 id="Track-net-worth"><a href="#Track-net-worth" class="headerlink" title="Track net worth"></a>Track net worth</h3><p>I’ve been tracking my net worth for several years now. I see a lot of people budget month-to-month, but I like seeing the big picture. I just add up all my assets (checking/savings accounts, retirement accounts, stocks, crypto) and debts (credit cards, car loans, phone payments, student loans). Yes, that means if you have no retirement accounts or money in the bank and you owe $100,000 on student loans, your net worth is negative. I don’t like having any debt, so this helped me early on in my life to pay off all my student loans, and buy a cheap car with cash, and so on.</p><p>I just made my own custom Google Sheets page and I input all the numbers at the end of every month. So this is a “once a month” habit as opposed to some of the other “once a day” ones.</p><h3 id="Learning-and-practice"><a href="#Learning-and-practice" class="headerlink" title="Learning and practice"></a>Learning and practice</h3><p>I haven’t necessarily felt the most amount of focus in my life. Art and music don’t come as naturally to me as they used to. Although I want to practice music, for example, and learn new songs and how to sight read music, I don’t always feel the motivation to do so. Nonetheless, I’ve set up a daily thing to do - in this case, 10 minutes of sheet music flash card practice. It has the dual benefit of being a more productive thing to do while waiting in line somewhere than scrolling through the news or reddit, and I’ll be that much ahead when I do decide to sit down and learn a song.</p><p>So basically it was more productive for me to say “Practice sheet music 10 minutes a day” than “Learn this song” which is bigger and requires more upfront effort. And requires me to do something that isn’t coding related, which is where I’ll naturally gravitate for hobby purposes.</p><h3 id="Do-the-annoying-thing-immediately"><a href="#Do-the-annoying-thing-immediately" class="headerlink" title="Do the annoying thing immediately"></a>Do the annoying thing immediately</h3><p>There is nothing I hate more than dealing with bureaucracy. Paying bills by mail when I can’t do it any other way, calling up any sort of automated system, stuff like that. I usually put off very simple tasks like paying a bill or renewing car insurance for weeks or months, and it’s always sitting in the back of my mind as something I know I need to do but I really, really don’t want to.</p><p>I’m personally making an effort to put those on my daily to-do list and just getting them done. It’s so much better than sitting there and knowing there’s an annoying thing to do for weeks on end.</p><h3 id="Daily-journaling"><a href="#Daily-journaling" class="headerlink" title="Daily journaling"></a>Daily journaling</h3><p>Recently, Matthew McConaughey was <a href="">on the JRE podcast</a>(<a href="https://www.youtube.com/watch?v=BBCl9A9NlRw" target="_blank" rel="noopener">https://www.youtube.com/watch?v=BBCl9A9NlRw</a>) and talked about how he has kept a journal every day for basically his entire life. This is something I’ve never been able to do - I’ve just kind of been going through it day by day and living life in the moment. But there was some great advice there - when things are good, keep track of what’s going well. When things are bad, see all the factors of what was going on in your life during those times as well.</p><p>At least for myself, I occasionally have bouts where life just isn’t going the way I want, and I feel anxious and depressed seemingly out of nowhere. Then at other times, everything is going great, and I don’t know why. How much of it is within my control? How much is from external factors? Without having really kept track of anything that’s going on in my life, it’s really hard to say.</p><p>I’m aiming to adopt this strategy myself now. I can say things are going pretty well for me right now. I feel good at the moment, even with all the political craziness and lockdown and isolation and having a relatively recent breakup. I don’t feel anxiety or depression, and I feel a lot of positivity, hope, and potential. I know I won’t be able to write a detailed diary entry every single day of my life, but I’m making a point to remember to do it relatively often, and when important or interesting things happen.</p><p>Conclusion</p><hr><p>再说一次，这只是我在谈论我在做什么，而不是给你提供建议。所有的情况都是独一无二的，再加上我没有丈夫或孩子让我忙碌。不用上下班也可以腾出时间来处理这些任务。</p><p>顺便说一下，在这些系统中没有任何关于写作。我没有为写作设定任何任务、习惯、目标或系统。我只是想写就写。人们有时会问我，我是怎么写了这么多文章的，想象着我是如此高效，并且一直在做这件事。说实话，我每个月都会有一两天坐下来写作。这样做超过 5 年,你会感觉到你做了很多</p><p>最后，如果我只能恳求你每天做一件事，那就是牙线。照做就是了。只需要 15 秒。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文:&lt;a href=&quot;https://www.taniarascia.com/everyday-systems/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;原文&quot;&gt;Everyday Systems That Help Me | Tani
      
    
    </summary>
    
    
      <category term="plan" scheme="https://blog.jingzhengyi.top/categories/plan/"/>
    
    
  </entry>
  
  <entry>
    <title>滚动样式</title>
    <link href="https://blog.jingzhengyi.top/2021/03/22/scrollcss/"/>
    <id>https://blog.jingzhengyi.top/2021/03/22/scrollcss/</id>
    <published>2021-03-22T03:27:00.000Z</published>
    <updated>2021-03-29T02:34:37.307Z</updated>
    
    <content type="html"><![CDATA[<p>时不时会有些需求 ,如宣传页然后要求页面滚动跟随之类的要求.最近有些想法:</p><ul><li>最好不用 react 之类,最近看资料然后感觉 svelte 不错.</li><li>样式之类 ,个人挺头疼的</li><li>手机适配感觉其实挺难的,但是感觉大部分需求其实还没到用框架的底部,如宣传页面,几个页面,如果设计出的强,照着他给的宽高严格写就行了.然后加一些 meta 头信息</li></ul><p>言归正传,页面滚动相关的 css 如下:</p><h3 id="方案一-scrolltrigger-库"><a href="#方案一-scrolltrigger-库" class="headerlink" title="方案一 scrolltrigger 库"></a>方案一 <a href="https://greensock.com/scrolltrigger/" target="_blank" rel="noopener">scrolltrigger 库</a></h3><ul><li>codepen <a href="https://codepen.io/collection/AEbkkJ?cursor=ZD0xJm89MCZwPTEmdj01MzQzOTYy" target="_blank" rel="noopener">https://codepen.io/collection/AEbkkJ?cursor=ZD0xJm89MCZwPTEmdj01MzQzOTYy</a><br>![scrollcss][pics/scrollcss.gif]</li></ul><h3 id="方案二-Animate-Text-on-Scroll"><a href="#方案二-Animate-Text-on-Scroll" class="headerlink" title="方案二 Animate Text on Scroll"></a>方案二 <a href="https://css-tricks.com/animate-text-on-scroll/" target="_blank" rel="noopener">Animate Text on Scroll</a></h3><p>![scrollcss2][./pics/scrollcss2.gif]<br>Animate text along a path on scroll using SVG and a scoop of vanilla JavaScript. Tutorial by Stephen Shaw (@shshaw) of the @keyframers.<br>  * 💻 Final Code &amp; Demo: <a href="https://cdpn.io/pen/NWKyNqK" target="_blank" rel="noopener">https://cdpn.io/pen/NWKyNqK</a></p><ul><li><p>📺 Video: <a href="https://youtu.be/Tae96ze3xwY" target="_blank" rel="noopener">https://youtu.be/Tae96ze3xwY</a></p></li><li><p>💡 Inspiration: New York Times article, shared by Jen Simmons <a href="https://www.nytimes.com/interactive/2" target="_blank" rel="noopener">https://www.nytimes.com/interactive/2</a>…<br>Additional Resources:</p></li><li><p>Affinity Designer Vector Design App <a href="https://affinity.serif.com/en-us/designer/" target="_blank" rel="noopener">https://affinity.serif.com/en-us/designer/</a></p></li><li><p>SVGOMG by Jake Archibald <a href="https://jakearchibald.github.io/svgomg" target="_blank" rel="noopener">https://jakearchibald.github.io/svgomg</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.clear();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> textPath = <span class="built_in">document</span>.querySelector(<span class="string">"#text-path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> textContainer = <span class="built_in">document</span>.querySelector(<span class="string">"#text-container"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">document</span>.querySelector(textPath.getAttribute(<span class="string">"href"</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pathLength = path.getTotalLength();</span><br><span class="line"><span class="built_in">console</span>.log(pathLength);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateTextPathOffset</span>(<span class="params">offset</span>) </span>&#123;</span><br><span class="line">  textPath.setAttribute(<span class="string">"startOffset"</span>, offset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">updateTextPathOffset(pathLength);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onScroll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  requestAnimationFrame(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> rect = textContainer.getBoundingClientRect();</span><br><span class="line">    <span class="keyword">var</span> scrollPercent = rect.y / <span class="built_in">window</span>.innerHeight;</span><br><span class="line">    <span class="built_in">console</span>.log(scrollPercent);</span><br><span class="line">    updateTextPathOffset(scrollPercent * <span class="number">2</span> * pathLength);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"scroll"</span>, onScroll);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;时不时会有些需求 ,如宣传页然后要求页面滚动跟随之类的要求.最近有些想法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最好不用 react 之类,最近看资料然后感觉 svelte 不错.&lt;/li&gt;
&lt;li&gt;样式之类 ,个人挺头疼的&lt;/li&gt;
&lt;li&gt;手机适配感觉其实挺难的,但是感觉大部分需
      
    
    </summary>
    
    
      <category term="css" scheme="https://blog.jingzhengyi.top/categories/css/"/>
    
    
  </entry>
  
  <entry>
    <title>js里的this</title>
    <link href="https://blog.jingzhengyi.top/2021/03/14/js_this/"/>
    <id>https://blog.jingzhengyi.top/2021/03/14/js_this/</id>
    <published>2021-03-14T10:54:00.000Z</published>
    <updated>2021-03-15T01:19:36.484Z</updated>
    
    <content type="html"><![CDATA[<p>这周逛 v2 由看到有人发 js 的 this 的题目,然后说能做出来的都得算多少年薪……..个人感觉这种知识大部分都是为了应付面试,而且道格拉斯克罗克福特 说过 js 是最好的语言,但是你要用它 good part.<br>不过周末正好看到 相关的一篇<a href="https://web.dev/javascript-this/" target="_blank" rel="noopener" title="JavaScript: What is the meaning of this?">文章</a>,发出来,比如有时候为什么调用要加 that =this 避免找不到 还是有点作用的毕竟.</p><h2 id="If-the-function-is-defined-as-an-arrow-function"><a href="#If-the-function-is-defined-as-an-arrow-function" class="headerlink" title="If the function is defined as an arrow function"></a>If the function is defined as an arrow function</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const arrwoFunction &#x3D; ()&#x3D;&gt;&#123;</span><br><span class="line">  console.log(this)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>this 和父级 this 是一样.</p><ul><li>call or apply 不能改变 箭头函数 的 this</li></ul><h2 id="Otherwise-if-the-function-class-is-called-with-new"><a href="#Otherwise-if-the-function-class-is-called-with-new" class="headerlink" title="Otherwise, if the function/class is called with new"></a>Otherwise, if the function/class is called with new</h2><p>this 被设置成 Object.create(….prototype)的返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line"><span class="keyword">this</span>.constructor === <span class="built_in">Object</span>.create(MyClass.prototype).constructor</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">// Logs true</span></span><br><span class="line"><span class="keyword">new</span> MyClass()</span><br></pre></td></tr></table></figure><h2 id="Otherwise-if-the-function-has-a-‘bound’-this-value"><a href="#Otherwise-if-the-function-has-a-‘bound’-this-value" class="headerlink" title="Otherwise, if the function has a ‘bound’ this value"></a>Otherwise, if the function has a ‘bound’ this value</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">someFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> boundObject = &#123; <span class="attr">hellp</span>: <span class="string">"world"</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> boundFunction = someFunction.bind(boundObject);</span><br></pre></td></tr></table></figure><p>当 boundFuncton 被调用,this 指向 boundObject</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// false</span></span><br><span class="line">someFunction() === boundObject;</span><br><span class="line"><span class="comment">//true</span></span><br><span class="line">boundFunction() === boundObject;</span><br></pre></td></tr></table></figure><h2 id="Otherwise-if-this-is-set-at-call-time"><a href="#Otherwise-if-this-is-set-at-call-time" class="headerlink" title="Otherwise, if this is set at call-time"></a>Otherwise, if this is set at call-time</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">someFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> someObject = &#123; <span class="attr">hellp</span>: <span class="string">"world"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(someFunction.call(someObject) === someObject);</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(someFunction.apply(someObject) === someObject);</span><br></pre></td></tr></table></figure><h2 id="Otherwise-if-the-function-is-called-via-a-parent-object"><a href="#Otherwise-if-the-function-is-called-via-a-parent-object" class="headerlink" title="Otherwise, if the function is called via a parent object"></a>Otherwise, if the function is called via a parent object</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  someMethod() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">obj.someMethod() === obj;</span><br></pre></td></tr></table></figure><p>in this case the function is called as a member of obj, so this will be obj,the link is broken if the function is called without its object</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; someMethod &#125; = obj;</span><br><span class="line"><span class="comment">//false</span></span><br><span class="line">someMethod() === obj;</span><br></pre></td></tr></table></figure><h2 id="Otherwise-if-the-function-or-parent-scope-is-in-strict-mode"><a href="#Otherwise-if-the-function-or-parent-scope-is-in-strict-mode" class="headerlink" title="Otherwise, if the function or parent scope is in strict mode"></a>Otherwise, if the function or parent scope is in strict mode</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">someFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  "use strict"</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line">someFunction() === <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><p>如果父级是严格模式,不写’use strict’ 结果也是一样的</p><h2 id="Otherwise"><a href="#Otherwise" class="headerlink" title="Otherwise"></a>Otherwise</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">someFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">someFunction() === globalThis;</span><br></pre></td></tr></table></figure><p>this 指向全局 this</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这周逛 v2 由看到有人发 js 的 this 的题目,然后说能做出来的都得算多少年薪……..个人感觉这种知识大部分都是为了应付面试,而且道格拉斯克罗克福特 说过 js 是最好的语言,但是你要用它 good part.&lt;br&gt;不过周末正好看到 相关的一篇&lt;a href=&quot;h
      
    
    </summary>
    
    
      <category term="js" scheme="https://blog.jingzhengyi.top/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>vue3 typescript config</title>
    <link href="https://blog.jingzhengyi.top/2021/03/08/vue3_ts/"/>
    <id>https://blog.jingzhengyi.top/2021/03/08/vue3_ts/</id>
    <published>2021-03-08T01:19:00.000Z</published>
    <updated>2021-03-08T02:14:34.216Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue3-typescript"><a href="#vue3-typescript" class="headerlink" title="vue3 typescript"></a>vue3 typescript</h1><p>Vue Mastery 现时免费相关课程 <a href="(https://www.vuemastery.com/courses/vue3-typescript/creating-components-with-typescript)">Vue 3 + TypeScript course</a> 到20213月9号,然后自己看了一遍,总结了一下发出来.</p><h2 id="init-with-vuecli"><a href="#init-with-vuecli" class="headerlink" title="init with vuecli"></a>init with vuecli</h2><p>用工具初始化,会有提示是否用ts.</p><h2 id="create-components-with-ts"><a href="#create-components-with-ts" class="headerlink" title="create components with ts"></a>create components with ts</h2><p>对应代码看 <a href="(https://github.com/Code-Pop/Real-World-Vue-3-TypeScript)">Real World Vue 3 TypeScript GitHub Repo</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lant=<span class="string">"ts"</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123;defineComponent &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> EVentCard <span class="keyword">from</span> <span class="string">'../components/EventCard.vue'</span></span><br><span class="line"><span class="keyword">import</span> EventService <span class="keyword">from</span> <span class="string">'../services/EventService'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponnets(&#123;</span><br><span class="line">    name:<span class="string">'EventList'</span>,</span><br><span class="line">    components:&#123;EventCard&#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">events</span>:<span class="literal">null</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created()&#123;</span><br><span class="line">      EventService.getEvents().</span><br><span class="line">        then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">         ...&#125;</span><br><span class="line">    &#125;</span><br><span class="line">....</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="VueDX"><a href="#VueDX" class="headerlink" title="VueDX"></a>VueDX</h2><p>ide 支持是用的[VueDX][ref3]这个工具</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> TodoItem&#123;</span><br><span class="line">   label:<span class="built_in">string</span></span><br><span class="line">   complete:<span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> futureTodoItem =&#123;&#125; <span class="keyword">as</span> TOdoItem</span><br></pre></td></tr></table></figure><h2 id="Props-with-Types"><a href="#Props-with-Types" class="headerlink" title="Props with Types"></a>Props with Types</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineComponent ,PropType &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line">exprt <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line"></span><br><span class="line">    props :&#123;</span><br><span class="line">        event: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">Object</span> <span class="keyword">as</span> PropType&lt;EventItem&gt;,</span><br><span class="line">            <span class="built_in">require</span>:<span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">....</span><br></pre></td></tr></table></figure><h2 id="Computed-amp-Methods-with-Custom-Types"><a href="#Computed-amp-Methods-with-Custom-Types" class="headerlink" title="Computed &amp; Methods with Custom Types"></a>Computed &amp; Methods with Custom Types</h2><p>重点在想返回什么</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.....</span><br><span class="line">computed:&#123;</span><br><span class="line">  firstEvent():EventItem&#123;</span><br><span class="line">      ....</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="others-扩充资料"><a href="#others-扩充资料" class="headerlink" title="others 扩充资料"></a>others 扩充资料</h2><ul><li>The official Vue docs that now has a dedicated TypeScript section that will continue to grow as the ecosystem matures.<ul><li><a href="https://v3.vuejs.org/guide/typescript-support.html#typescript-support" target="_blank" rel="noopener">https://v3.vuejs.org/guide/typescript-support.html#typescript-support</a></li></ul></li><li>And of course, the official TypeScript docs site for an in-depth look at TypeScript<ul><li><a href="https://www.typescriptlang.org/docs/" target="_blank" rel="noopener">https://www.typescriptlang.org/docs/</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue3-typescript&quot;&gt;&lt;a href=&quot;#vue3-typescript&quot; class=&quot;headerlink&quot; title=&quot;vue3 typescript&quot;&gt;&lt;/a&gt;vue3 typescript&lt;/h1&gt;&lt;p&gt;Vue Mastery 现时免费相关
      
    
    </summary>
    
    
      <category term="vue3" scheme="https://blog.jingzhengyi.top/categories/vue3/"/>
    
      <category term="typescript" scheme="https://blog.jingzhengyi.top/categories/vue3/typescript/"/>
    
    
      <category term="typescript" scheme="https://blog.jingzhengyi.top/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>理解 React Native Bridge 的概念</title>
    <link href="https://blog.jingzhengyi.top/2021/02/28/ReactNativeBridge/"/>
    <id>https://blog.jingzhengyi.top/2021/02/28/ReactNativeBridge/</id>
    <published>2021-02-28T10:30:00.000Z</published>
    <updated>2021-02-28T11:39:37.158Z</updated>
    
    <content type="html"><![CDATA[<h1 id="理解-React-Native-Bridge-的概念"><a href="#理解-React-Native-Bridge-的概念" class="headerlink" title="理解 React Native Bridge 的概念"></a>理解 React Native Bridge 的概念</h1><blockquote><p>ref <a href="https://hackernoon.com/understanding-react-native-bridge-concept-e9526066ddb8" target="_blank" rel="noopener">origin</a><br>这里有一篇由 Tadeu Zagallo 发表的很老但是很棒很深奥的文章来解释这座桥是如何在 iOS 上实现的。<br>React Native 通常被认为是一个游戏规则改变者，它允许在移动环境中运行 JavaScript 代码。它的主要优势在于它不像其他竞争对手那样依赖于网络视图(Phonegap，Ionic，Cordova…) ，而是依赖于不同平台提供的真实材料。它具有对所有本机视图和组件的内置访问权，以及对大约70个特定设备 api 的默认访问权(您可以对其进行扩展)。</p></blockquote><p>在编写 React Native 应用程序时，我们构建了本地 ui。这就是关键所在，我们创建 UIView 实例，就像我们创建特定于平台的语言一样:</p><p>我对这个框架的第一个假设是这样的:</p><blockquote><p>他们可能会创建一个 <strong>AST</strong> 并将其转换为可在多个设备上运行</p></blockquote><p>这是有道理的，这实际上就是 Google/Flutter 在开发应用程序时所做的。但这不是RN的方式。</p><p>这种方法的主要问题是，基于 JavaScript 代码的编译目标平台意味着要创建新的编译器。我不知道有哪个现有的工具接受 JavaScript 作为输入代码，能够为每个目标平台生成代码<br><img src="https://hackernoon.com/hn-images/1*bf7U0_eRo_342L3I51gyPQ.png" alt="注意: 有些人尝试过，但只是用opinionated 的方法进行mobile开发"></p><p>但目前存在的是针对自己特定平台的编译器。例如，我们有接受 Java/Kotlin 代码和目标 Android 平台或 Obj-C/Swift 目标 iOS 平台的编译器。它存在许多不同语言和目标的编译器。它们之所以能够很好地完成工作，是因为它们被设计成能够为它们创造出最优化的开发语言。</p><p>使用现有的编译器:<br><img src="https://hackernoon.com/hn-images/1*sucxk9LMqW9booBv4f02cg.png" alt="It’s built with a really opened architecture that allows the code to be run, not only on mobile devices, but also on other platforms:"></p><p>它采用真正开放的架构，不仅可以在移动设备上运行，也可以在其他平台上运行:</p><ul><li>桌面应用程序</li><li>虚拟现实</li><li>还有更多<br>它也可以用于其他框架:</li><li>Weex(deprecated )</li><li>用RN 渲染器 运行angluar 应用</li></ul><p>那么，团队是如何通过使用现有的工具和编译器来构建这样一个与平台和框架无关的框架的呢？</p><h3 id="多个领域相互作用，没有其他"><a href="#多个领域相互作用，没有其他" class="headerlink" title="多个领域相互作用，没有其他"></a><strong>多个领域相互作用，没有其他</strong></h3><p>让我们退一步，看看 React Native 的大图。</p><p>React Native 处理两个领域，JavaScript 和 Native。他们都能够共享信息。他们使用“JS Bridge”进行通信，这无疑是 React Native 架构的核心，这部分提供了如此多的灵活性。</p><p>JS Bridge这个概念为这两个宇宙之间的双向和异步通信提供了一种方式。这里重要的是，它们完全是用不同的技术编写的，但是它们能够通信。<br><img src="https://hackernoon.com/hn-images/1*JT_Smf1u3fJTBY8ev9WAzg.png" alt="JS threads communicates with the native ones through the bridge JS 线程通过桥接与本地线程进行通信"></p><h3 id="记住你的后端"><a href="#记住你的后端" class="headerlink" title="记住你的后端"></a><strong>记住你的后端</strong></h3><p>让我们回想一下，当我们使用多服务通信编写分布式后端应用程序时。<br>我们如何管理在语言/平台级别上完全不同的两个服务之间的通信？<br>我们使用可互操作的语言，如 JSON 或 XML，并且我们依赖异步协议，如 AMQP (或任何其他协议)。<br><img src="https://hackernoon.com/hn-images/1*9PsB7QpiXxg7bnmzS1UgCg.png" alt="Bidirectional communications between heterogeneous services"></p><p>如果我们希望这两个服务进行通信，我们依赖于消息队列。第一个服务将一些命令推送到队列中，另一个服务必须在可能的情况下执行这些命令。<br>React Native 的行为也是如此。JavaScript 域发送异步 JSON 消息，描述 Native 部分应该完成的操作。</p><p>例如，JavaScript 端将发送有关必须由 Native 端创建的视图的信息。当 nativeside 准备好后，它将有效地创建视图:<br><img src="https://hackernoon.com/hn-images/1*UHBv6Ctmm6n6xV0iED8zqA.png" alt="JavaScript sends commands asynchronously to the Native side for view management, with JSON JavaScript"><br>JavaScript 使用 JSON 异步将命令发送到 Native 端进行视图管理<br>在 React Native 中，桥接器支持消息代理角色，处理两个不同开发语言之间的异步命令。</p><p>它提供了多种可能性:</p><ul><li>因为它是异步的，所以它是非阻塞的，因此允许在屏幕上顺利地进行视图管理(6O fps 是 React Native 的黄金目标)</li><li>因为它是解耦的，并且基于可互操作的语言，所以它对其他框架和渲染系统开放 只要他们尊重 React Native bridge 命令界面<br>JS Bridge的语言越是无处不在，越是通用，可能性就越大… … 的确如此！</li></ul><h3 id="桥接的实现"><a href="#桥接的实现" class="headerlink" title="桥接的实现"></a><strong>桥接的实现</strong></h3><p>网桥是用 c/c + + 构建的，因此，可以在多个平台、操作系统等上运行。</p><p>它嵌入了苹果的 <em>JavaScriptCore</em> 框架，这个框架公开了 api 来访问实际的 javacripcore VM 功能。许多人在 Obj-C 和 Swift 世界中使用这些 api。但是有一个 C api，Obj-C 实际上只是一个包装器。</p><p>考虑到这一点，JavaScript 代码可以在 c/c++ 程序中运行。它可以注入变量、函数和声明全局变量来增强 JavaScript 现有代码。React Native 依靠这种魔法来使 JavaScript 与本机世界通信，从而触发 c/c++ 世界中的动作。</p><p>在 JavaScript 代码中注入内容也意味着函数可以由 c/c++ 代码执行。</p><p>这个图很快总结了 JavaScript 世界是如何处理 c/c++ one 的:<br><img src="https://hackernoon.com/hn-images/1*a6tsmWbB6JtgnOWy7Hyx0A.png" alt="The JS code is managed by the JSCore framework \\"></p><h3 id="原生的一面"><a href="#原生的一面" class="headerlink" title="原生的一面"></a>原生的一面</h3><p>原生方面的通信是“最简单的”部分。</p><p>让我们从 iOS 平台开始。由于 Obj-C 是 c 语言的扩展，它可以与 c 语言进行本机通信。这样，JS Bridge 与 Swift/Obj-C 世界之间的通信就变得简单而自然。<br><img src="https://hackernoon.com/hn-images/1*OhI5FguDjCJiMHGkyRUcwg.png" alt=" JS 与 iOS 世界交互的高层示意图"></p><p>在 Android 平台上，我们需要依靠 Java本地接口来与桥接器进行对话。<br><img src="https://hackernoon.com/hn-images/1*q16vcoe7CRolZLOCoG5_Pg.png" alt="JS 与 Android 世界交互的高级图表"></p><p>如果您对 React Native 内部构件有进一步的问题，请告诉我。关于这个话题，我会尽量提供我所知道的一切。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;理解-React-Native-Bridge-的概念&quot;&gt;&lt;a href=&quot;#理解-React-Native-Bridge-的概念&quot; class=&quot;headerlink&quot; title=&quot;理解 React Native Bridge 的概念&quot;&gt;&lt;/a&gt;理解 React
      
    
    </summary>
    
    
      <category term="h5" scheme="https://blog.jingzhengyi.top/categories/h5/"/>
    
    
      <category term="\-" scheme="https://blog.jingzhengyi.top/tags//"/>
    
  </entry>
  
  <entry>
    <title>前端-相关技能点我了解的</title>
    <link href="https://blog.jingzhengyi.top/2021/02/06/frontend-what-i-leaned/"/>
    <id>https://blog.jingzhengyi.top/2021/02/06/frontend-what-i-leaned/</id>
    <published>2021-02-06T10:30:00.000Z</published>
    <updated>2021-02-06T10:49:50.862Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js该学点啥"><a href="#js该学点啥" class="headerlink" title="js该学点啥"></a>js该学点啥</h1><p>“没有人因为java而失业” 对于该如何选择开发语言,我个人还是很喜欢javascript.但是也感觉挺痛苦的,对于一个跟着别人学的人来说.学过了vue,react各种框架,感觉其实基本就是一个功能学了不同的实现方式,现在想想感觉还是挺没啥成就感的.<br>总结一下我现在的感觉的js相关的技能点</p><h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><p>这个是在我学习redux时候接触的.然后最近看过了json的作者的在frontendmaster的课程,然后他总结99%的js开发者不知道js其实还可以这么写….感觉老爷子都胡子花白,虽然他的课程是16年的,而且长达10小时,但是感觉还是值得一看的.作为入门.</p><ul><li>最近想用jupyter把学习的做成js笔记,有运行结果,一目了然.这个就涉及如何做笔记的话题,我现在react是用mdx,反正就是那种可以运行看看效果的那种.</li></ul><h3 id="deno"><a href="#deno" class="headerlink" title="deno"></a>deno</h3><p>最近在了解的,其实我列出来,主要是想说一下node的作者在推出这个的时候说自己后悔node的几个点,那个视频在youtube上有,而且还是有专门的中文翻译,感觉可能是推广需要,但是感觉node 的作者还很年轻感觉:</p><ul><li>前端发展好快,他是用rust开发的,rust是火狐的公司M开发的…..最近看资料好多人想学一下这个语言…..</li><li>他说的一些如何编译node ,如何平台适应,如何通过v8优化性能,感觉自己都没怎么接触过….所以多看看感觉还是很能开阔自己眼界….提醒自己多学多看,周末出去找个咖啡馆学习多么重要……..<h3 id="node"><a href="#node" class="headerlink" title="node"></a>node</h3>这个主要是我有几个框架想学习……涉及graphql的……感觉自己做过几个demo,但是还是没有串联起来……….</li></ul><h3 id="parcel"><a href="#parcel" class="headerlink" title="parcel"></a>parcel</h3><p>这个就是感觉学过react,vue 老感觉虽然花了很多时间,但是感觉没啥成就感,就是感觉老是新瓶装旧酒…..技能老是提高不了…….关于如何作出一个东西的方式…….</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;js该学点啥&quot;&gt;&lt;a href=&quot;#js该学点啥&quot; class=&quot;headerlink&quot; title=&quot;js该学点啥&quot;&gt;&lt;/a&gt;js该学点啥&lt;/h1&gt;&lt;p&gt;“没有人因为java而失业” 对于该如何选择开发语言,我个人还是很喜欢javascript.但是也感觉挺痛苦
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://blog.jingzhengyi.top/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>思考一下前端</title>
    <link href="https://blog.jingzhengyi.top/2021/01/30/frontend-think/"/>
    <id>https://blog.jingzhengyi.top/2021/01/30/frontend-think/</id>
    <published>2021-01-30T07:23:00.000Z</published>
    <updated>2021-01-30T08:38:31.861Z</updated>
    
    <content type="html"><![CDATA[<pre><code>最近工作上老有种感觉后端压着前端的感觉,老感觉刚毕业的后端也觉得自己挺厉害,感觉没法商量.但是感觉自己其实花费了好多时间去学习...可能也算是人生误区吧,最近就开始多看一些算法相关的了又.然后说最好的学习是写下来,然后给别人讲明白.然后又开始写写博客了.虽然只是只言片语吧....给自己立的目标的一部分.(用todo软件 写的 每周得写点啥目标.)今年自己的目标老是想找到一个自己架构一个系统的方式,然后去年是找到了**jhipster**这个springweb,### 今年因为看了很长时间frontendMaster课程,然后划时间看graphql 这个架构.实际动手是:- 在一个原有项目(小度鱼社区)上改过- 看frontendmasters课 关于 gatby 的框架的(快速搭建官网,博客之类的网站)- 各种中断的续看资料.### django框架的这个是自己前年做过一个demo性质的...然后年底时候听播客,说graphql 不火了.....不过我还是想坚持自己实现一把吧.看到的其他言论是 用go去搭建基础框架......这个感觉自己比较缺的是信念去学习.PS:自己的域名又到期了,然后愤与续费太贵,又买了一个域名(www.jingzhengyi.top)......这个网站又要成为历史了........</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;最近工作上老有种感觉后端压着前端的感觉,老感觉刚毕业的后端也觉得自己挺厉害,感觉没法商量.但是感觉自己其实花费了好多时间去学习...


可能也算是人生误区吧,最近就开始多看一些算法相关的了又.然后说最好的学习是写下来,然后给别人讲明白.然后又开始写写博客了
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>计算机教育中缺失的一课</title>
    <link href="https://blog.jingzhengyi.top/2021/01/22/mit-missing-semater/"/>
    <id>https://blog.jingzhengyi.top/2021/01/22/mit-missing-semater/</id>
    <published>2021-01-22T02:38:32.295Z</published>
    <updated>2021-01-22T02:38:32.295Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MIT-课程"><a href="#MIT-课程" class="headerlink" title="MIT 课程"></a>MIT 课程</h3><p>最近看的一个 MIT 学生给学生开的课 <a href="%https://missing-semester-cn.github.io/%">missing semester</a> ,有中文翻译,感觉开发了好几年,还是能学到很多东西,其中 vim 我花了半天时间去按照他的配置,感觉终于能够可以替代 vscode 真正用用了.. 有对应的课程录屏.<br>主要讲了: - Shell 工具和脚本 - 编辑器 (Vim) - 数据整理 - 命令行环境 - 版本控制(Git) - 调试及性能分析 - 元编程 - 安全和密码学 - 大杂烩 - 提问&amp;回答</p><h4 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h4><p>这块我花费了最多时间 ,课程里提供的几份配置里,我选的 joe 的 dotfile 里的配置,他的 dotfile 有好多东西,然后是通 stow 做软连接连接到他的配置里的.反正一开始有点蒙.想全盘拷贝他的时候,出了好些问题…..然后仔细看了看才搞好.不过最终效果还是挺满意的.</p><h5 id="nvim"><a href="#nvim" class="headerlink" title="nvim"></a>nvim</h5><p>joe 其实是用的 nvim ,感觉这个挺牛逼,效果还不错,然后作者主要是配置了 python 相关的,如 lint, 然后用的 Plug 作为插件管理,其实 vim8 可以完全抛弃插(~/.vim/pack/vendor/start/) ,但是 nvim 其实是重新实现了一遍 vim .有几个地方不兼容. 然后.vimrc 里面有自定义的快捷键.</p><p>几个好用的插件:</p><ul><li>coc.vim 自动补全,代码高亮,还有些导航之类的功能</li><li>ale.vim 导航</li><li>fzf.vim 模糊查询</li></ul><h4 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h4><p>有几个点 感觉以前不知道 ,– -</p><ul><li>.aliases 有些 aliase 还挺好玩的感觉,比如 mac 里的 ls 之类的其实是 BSD 版本,然后 aliase 里有个如何替换,这样换平台就不会不一样了.</li></ul><h4 id="mac-工具"><a href="#mac-工具" class="headerlink" title="mac 工具"></a>mac 工具</h4><ul><li>hammperspoon 可以做写自动化的事情,通过写 lua 小脚本</li><li>yabai 平铺式的窗口管理,感觉好几个屏幕,或者大屏的挺好用的</li></ul><h4 id="scripts"><a href="#scripts" class="headerlink" title="scripts"></a>scripts</h4><ul><li>ocr 这个 ocr hammperspoon 里配置一下就可以截屏然后拷贝文字,不过大部分时候对着视频里文字出错挺高,不过还是有点用</li></ul><h4 id="git"><a href="#git" class="headerlink" title="git"></a>git</h4><p>这个先从 git 数据模型讲,感觉还是学到好些.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;MIT-课程&quot;&gt;&lt;a href=&quot;#MIT-课程&quot; class=&quot;headerlink&quot; title=&quot;MIT 课程&quot;&gt;&lt;/a&gt;MIT 课程&lt;/h3&gt;&lt;p&gt;最近看的一个 MIT 学生给学生开的课 &lt;a href=&quot;%https://missing-semester
      
    
    </summary>
    
    
      <category term="vim" scheme="https://blog.jingzhengyi.top/categories/vim/"/>
    
      <category term="shell" scheme="https://blog.jingzhengyi.top/categories/vim/shell/"/>
    
      <category term="git" scheme="https://blog.jingzhengyi.top/categories/vim/shell/git/"/>
    
    
  </entry>
  
  <entry>
    <title>win10Linux子系统</title>
    <link href="https://blog.jingzhengyi.top/2021/01/22/win10Linux%E5%AD%90%E7%B3%BB%E7%BB%9F/"/>
    <id>https://blog.jingzhengyi.top/2021/01/22/win10Linux%E5%AD%90%E7%B3%BB%E7%BB%9F/</id>
    <published>2021-01-22T02:05:48.755Z</published>
    <updated>2021-01-22T02:05:48.755Z</updated>
    
    <content type="html"><![CDATA[<p>今天在配置<a href="https://github.com/zeit/hyper" target="_blank" rel="noopener">hyper</a>的时候说可以反向从linux的子系统使用win安装的命令,然后发现得需要升级内核系统，升级预览版preview后后发现win10加了好些功能，逐渐向mac系统靠拢。。。。作为个折腾党来说，虽然不怎么能用到。。。但是还是挺乐此不疲的。</p><h3 id="WSL"><a href="#WSL" class="headerlink" title="WSL"></a>WSL</h3><ul><li><a href="https://docs.microsoft.com/en-us/windows/wsl/interop" target="_blank" rel="noopener">wsl linux子系统和wind互通。。官网好些例子</a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">C:\temp&gt; wsl</span><br><span class="line">/mnt/c/temp/$ <span class="built_in">cd</span> ~</span><br><span class="line">~$ notepad.exe foo.txt</span><br><span class="line">~$ ls | grep foo.txt</span><br><span class="line">~$ <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">C:\temp&gt;dir | findstr foo.txt</span><br><span class="line">09/27/2016  02:15 PM                14 foo.txt</span><br></pre></td></tr></table></figure></li><li>linux 调用 win安装程序。<br>这个我没成功。。我是想试一下参考<a href="https://zhuanlan.zhihu.com/p/34667658" target="_blank" rel="noopener">混合 Windows 和 Linux 的环境</a>试了一下node ，不好使。。感觉是“parmgram File” 这种带空格的路径有问题？</li></ul><h3 id="其他功能，感觉挺好用的几个"><a href="#其他功能，感觉挺好用的几个" class="headerlink" title="其他功能，感觉挺好用的几个"></a>其他功能，感觉挺好用的几个</h3><ul><li>emjo表情（升级到17<br><code>win+.</code></li><li>剪贴板历史<br><code>win+v</code></li><li>截图<br><code>win+shift+s</code></li><li><a href="http://www.cnblogs.com/rainman/p/3457227.html" target="_blank" rel="noopener">Dos命令查看端口占用及关闭进程</a></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考\"></a>参考\</h3><ul><li><a href="https://github.com/microsoft/Terminal" target="_blank" rel="noopener">windows Terminal</a></li><li><a href="https://zhuanlan.zhihu.com/p/34667658" target="_blank" rel="noopener">混合 Windows 和 Linux 的环境</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天在配置&lt;a href=&quot;https://github.com/zeit/hyper&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hyper&lt;/a&gt;的时候说可以反向从linux的子系统使用win安装的命令,然后发现得需要升级内核系统，升级预览版prev
      
    
    </summary>
    
    
      <category term="win10" scheme="https://blog.jingzhengyi.top/categories/win10/"/>
    
      <category term="ubuntu" scheme="https://blog.jingzhengyi.top/categories/win10/ubuntu/"/>
    
      <category term="tools" scheme="https://blog.jingzhengyi.top/categories/win10/ubuntu/tools/"/>
    
    
      <category term="win10" scheme="https://blog.jingzhengyi.top/tags/win10/"/>
    
  </entry>
  
  <entry>
    <title>vsCodeVim插件</title>
    <link href="https://blog.jingzhengyi.top/2021/01/22/vim/"/>
    <id>https://blog.jingzhengyi.top/2021/01/22/vim/</id>
    <published>2021-01-22T02:05:48.755Z</published>
    <updated>2021-01-22T02:05:48.755Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/VSCodeVim/Vim#mac" target="_blank" rel="noopener">https://github.com/VSCodeVim/Vim#mac</a></p><p>快速移动写代码，除了输入字符之外最常用的操作就是移动光标。vim除了hjkl ctrl+u ctr+f外还有更快捷的移动方式，这里介绍2个插件都是vscode自带的。</p><ol><li>vim-easymotion</li></ol><p>设置”vim.easymotion”: true 开启这个模式。<br><code>&lt;leader&gt;&lt;leader&gt; t/T &lt;char&gt;</code> 能够向前/向后快速到达可见范围内的某字符(<char>)的位置。<br><code>&lt;leader&gt;&lt;leader&gt; w/b</code> 向前/向后到达可见范围内任何单词的开头。<br><code>&lt;leader&gt;&lt;leader&gt; e/ge</code> 向前/向后到达可见范围内任何单词的结尾。<br><code>&lt;leader&gt;&lt;leader&gt; k/j</code> 向前/向后到达可见范围内任何行的行首。</p><ol start="2"><li>vim-sneak</li></ol><p>sneak模式下键入s后，再输入2个字符就可以跳转到目标位置。<br>s<char><char> 往前跳转到目标位置。<br>S<char><char> 往后跳转到目标位置。</p><p>链接：<a href="https://www.jianshu.com/p/cbfa86c8d8a5" target="_blank" rel="noopener">https://www.jianshu.com/p/cbfa86c8d8a5</a></p><p>3.vim-surround   </p><p>Based on <a href="https://github.com/tpope/vim-surround" target="_blank" rel="noopener">surround.vim</a>, the plugin is used to work with surrounding characters like parenthesis, brackets, quotes, and XML tags.</p><table><thead><tr><th>Setting</th><th>Description</th><th>Type</th><th>Default Value</th></tr></thead><tbody><tr><td>vim.surround</td><td>Enable/disable vim-surround</td><td>Boolean</td><td>true</td></tr></tbody></table><p><code>t</code> or <code>&lt;</code> as <code>&lt;desired char&gt;</code> or <code>&lt;existing char&gt;</code> will do tags and enter tag entry mode. Using <code>&lt;CR&gt;</code> instead of <code>&gt;</code> to finish changing a tag will preserve any existing attributes.</p><table><thead><tr><th>Surround Command</th><th>Description</th></tr></thead><tbody><tr><td><code>d s &lt;existing char&gt;</code></td><td>Delete existing surround</td></tr><tr><td><code>c s &lt;existing char&gt; &lt;desired char&gt;</code></td><td>Change surround existing to desired</td></tr><tr><td><code>y s &lt;motion&gt; &lt;desired char&gt;</code></td><td>Surround something with something using motion (as in “you surround”)</td></tr><tr><td><code>S &lt;desired char&gt;</code></td><td>Surround when in visual modes (surrounds full selection)</td></tr></tbody></table><p>Some examples:</p><ul><li><code>&quot;test&quot;</code> with cursor inside quotes type cs”‘ to end up with <code>&#39;test&#39;</code></li><li><code>&quot;test&quot;</code> with cursor inside quotes type ds” to end up with <code>test</code></li><li><code>test</code> with cursor on word test type ysaw) to end up with <code>(test)</code></li></ul><h4 id="苹果系统问题-To-enable-key-repeating"><a href="#苹果系统问题-To-enable-key-repeating" class="headerlink" title="苹果系统问题 To enable key-repeating"></a>苹果系统问题 To enable key-repeating</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># For VS Code</span></span><br><span class="line">$ defaults write com.microsoft.VSCode ApplePressAndHoldEnabled -bool <span class="literal">false</span></span><br><span class="line"><span class="comment"># For VS Code Insider</span></span><br><span class="line">$ defaults write com.microsoft.VSCodeInsiders ApplePressAndHoldEnabled -bool <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 还原设置</span></span><br><span class="line">$ defaults delete -g ApplePressAndHoldEnabled</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/VSCodeVim/Vim#mac&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/VSCodeVim/Vim#mac&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;快速移动写代码，除了输
      
    
    </summary>
    
    
      <category term="vim" scheme="https://blog.jingzhengyi.top/categories/vim/"/>
    
      <category term="tools" scheme="https://blog.jingzhengyi.top/categories/vim/tools/"/>
    
      <category term="vsCode" scheme="https://blog.jingzhengyi.top/categories/vim/tools/vsCode/"/>
    
    
      <category term="vim" scheme="https://blog.jingzhengyi.top/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>阿里云ECS免密码登陆</title>
    <link href="https://blog.jingzhengyi.top/2021/01/22/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E9%99%86/"/>
    <id>https://blog.jingzhengyi.top/2021/01/22/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E9%99%86/</id>
    <published>2021-01-22T02:05:48.755Z</published>
    <updated>2021-01-22T02:05:48.755Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用SSH密钥对连接Linux实例"><a href="#使用SSH密钥对连接Linux实例" class="headerlink" title="使用SSH密钥对连接Linux实例"></a>使用SSH密钥对连接Linux实例</h2><p>阿里云ESC远程登陆只支持pem特定的ssh免密登陆,之前一直不知道,阿里客服打电话过来回访时候问了一下,才知道官方文档有写.</p><p><a href="https://help.aliyun.com/document_detail/51798.html?spm=a2c4g.11186623.2.12.303874f7nqJwUC#linux" target="_blank" rel="noopener">使用SSH密钥对连接Linux实例</a></p><p>配置完后,对自动下载的pem做配置.修改 ~/.ssh/config文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host ecs    &#x2F;&#x2F; 输入ECS实例的名称</span><br><span class="line">HostName 192.*.*.*   &#x2F;&#x2F; 输入ECS实例的公网IP地址</span><br><span class="line">Port 22   &#x2F;&#x2F; 输入端口号，默认为22</span><br><span class="line">User root   &#x2F;&#x2F; 输入登录账号</span><br><span class="line">IdentityFile ~&#x2F;.ssh&#x2F;ecs.pem &#x2F;&#x2F; 输入.pem私钥文件在本机的地址</span><br></pre></td></tr></table></figure><p>重启:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sshd restart</span><br><span class="line">ssh ecs</span><br></pre></td></tr></table></figure><p>我自己mac电脑配置了,但是还是要输入密码,后来查是权限问题 <a href="https://learnku.com/articles/19580" target="_blank" rel="noopener">https://learnku.com/articles/19580</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#设置 authorized_keys 的读写权限，只对其所有者开放</span><br><span class="line">chmod -R 700 ~&#x2F;.ssh</span><br><span class="line">chmod 644 ~&#x2F;.ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用SSH密钥对连接Linux实例&quot;&gt;&lt;a href=&quot;#使用SSH密钥对连接Linux实例&quot; class=&quot;headerlink&quot; title=&quot;使用SSH密钥对连接Linux实例&quot;&gt;&lt;/a&gt;使用SSH密钥对连接Linux实例&lt;/h2&gt;&lt;p&gt;阿里云ESC远程登陆
      
    
    </summary>
    
    
      <category term="Mac" scheme="https://blog.jingzhengyi.top/categories/Mac/"/>
    
      <category term="ECS" scheme="https://blog.jingzhengyi.top/categories/Mac/ECS/"/>
    
      <category term="SSH" scheme="https://blog.jingzhengyi.top/categories/Mac/ECS/SSH/"/>
    
    
      <category term="SSH" scheme="https://blog.jingzhengyi.top/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>利用 socket.io 实现消息实时推送</title>
    <link href="https://blog.jingzhengyi.top/2021/01/22/socket-io/"/>
    <id>https://blog.jingzhengyi.top/2021/01/22/socket-io/</id>
    <published>2021-01-22T02:05:48.754Z</published>
    <updated>2021-01-22T02:05:48.754Z</updated>
    
    <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>当发生了用户被点赞、评论、关注等操作时，需要由服务器向用户实时地推送一条消息。</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ul><li><p>后台Node.js</p><h3 id="后端推送消息的处理流程"><a href="#后端推送消息的处理流程" class="headerlink" title="后端推送消息的处理流程"></a>后端推送消息的处理流程</h3></li><li><p>在 Node 服务器建立一个用户信息和 socket id 的映射表，因为同一用户可能打开了多个页面，所以他的 socket id 可能存在多个值。当用户建立连接时，往其中添加值；用户断开连接后，删除相应值。</p></li><li><p>当 Java 后台存在需要推送的消息时，会向 Node 服务器的 /api 路径 post 一条消息，其中包括用于标识用户的 tokenId 和其它数据。</p></li><li><p>Node 服务器接收到 post 请求后，对请求内容进行处理。根据 tokenId 找出与该用户对应的 socket id，socket.io 会根据 id 来向用户推送消息。</p></li></ul><h3 id="对用户信息的处理"><a href="#对用户信息的处理" class="headerlink" title="对用户信息的处理"></a>对用户信息的处理</h3><p>方便起见，这里只用一个数组保存用户信息，实际工作中可以根据需要放入数据库中保存。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">global.users = []; <span class="comment">// 记录下登录用户的tokenId, socketId</span></span><br></pre></td></tr></table></figure><p>当用户登录时，client 会向 server 发送 user_login 事件，服务器接收到后会做如下操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">socket.on(<span class="string">'user_login'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">info</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; tokenId, userId, socketId &#125; = info;</span><br><span class="line">    addSocketId(users, &#123; tokenId, socketId, userId &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>addSocketId() 会向 users 数组中添加用户信息，不同用户通过 tokenId 进行区分，每个用户有一个 socketIds 数组，保存可能存在的多个 socketId。该函数的具体代码可见 src/utils.js 文件。</p><p>同理，还有一个 deleteSocketId() 函数用于删除用户信息，代码可见同一文件。</p><p>在获取了用户的 tokenId 之后，就需要找到对应的 socketId，然后向特定用户推送消息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只向 id = socketId 的这一连接发送消息</span></span><br><span class="line">io.sockets.to(socketId).emit(<span class="string">'receive_message'</span>, &#123;</span><br><span class="line">    entityType,</span><br><span class="line">    data</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>服务器的思路大致如此，接下来介绍客户端中是如何进行相应的处理的。</p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>Socket.io 的初始化<br>首先在 html 文件中引入 Socket.io 的 client 端文件，例如通过 CDN 引入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其它的引入方式:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> io = <span class="built_in">require</span>(<span class="string">'socket.io-client'</span>);</span><br><span class="line"><span class="comment">// or with import syntax</span></span><br><span class="line"><span class="keyword">import</span> io <span class="keyword">from</span> <span class="string">'socket.io-client'</span>;</span><br></pre></td></tr></table></figure><p>引入 Socket.io 后就获得了 io 函数，通过它来与消息推送服务器建立连接。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设你将 Node 服务器部署后的地址为：https://www.example.com/ws</span></span><br><span class="line"><span class="comment">// 则： WS_HOST = 'https://www.example.com'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> msgSocket = io(<span class="string">`<span class="subst">$&#123;WS_HOST&#125;</span>`</span>, &#123;</span><br><span class="line">    secure: <span class="literal">true</span>,</span><br><span class="line">    path: <span class="string">'/ws/socket.io'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果监听本地：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> msgSocket = io(<span class="string">'http://localhost:4001'</span>);</span><br></pre></td></tr></table></figure><p>这里如果写成 io(‘<a href="https://www.example.com/ws&#39;" target="_blank" rel="noopener">https://www.example.com/ws&#39;</a>) 会出现错误，需要将 /ws 写入path中。</p><p>为了能在其它文件使用这一变量，可将 msgSocket 作为一个全局变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.msgSocket = msgSocket;</span><br></pre></td></tr></table></figure><h3 id="用户建立连接"><a href="#用户建立连接" class="headerlink" title="用户建立连接"></a>用户建立连接</h3><p>// 用户登录时，向服务器发送用户的信息。服务器会在收到信息后建立 socket 与用户的映射。<br>msgSocket.emit(‘user_login’, {<br>    userId,<br>    socketId: msgSocket.id,<br>    tokenId<br>});</p><pre><code>##demo[demo博文原文](https://segmentfault.com/a/1190000010974426)[demo](https://github.com/noiron/socket-message-push)##资料[socket-io官网](https://socket.io/get-started/chat/)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h2&gt;&lt;p&gt;当发生了用户被点赞、评论、关注等操作时，需要由服务器向用户实时地推送一条消息。&lt;/p&gt;
&lt;h2 id=&quot;实现方式&quot;&gt;&lt;a href=&quot;#实现
      
    
    </summary>
    
    
      <category term="Mac" scheme="https://blog.jingzhengyi.top/categories/Mac/"/>
    
      <category term="socket-io" scheme="https://blog.jingzhengyi.top/categories/Mac/socket-io/"/>
    
    
      <category term="通信" scheme="https://blog.jingzhengyi.top/tags/%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>单点登陆方案</title>
    <link href="https://blog.jingzhengyi.top/2021/01/22/sso/"/>
    <id>https://blog.jingzhengyi.top/2021/01/22/sso/</id>
    <published>2021-01-22T02:05:48.754Z</published>
    <updated>2021-01-22T02:05:48.754Z</updated>
    
    <content type="html"><![CDATA[<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ul><li>CAS<ul><li>多个应用共用一个登陆设置.</li><li>我现在做的前后端分离的,不用关注权限问题,最后部署时候统一设置单点登陆就可以</li></ul></li><li>手机端不适合基于session的场景,看了jwt方案.<ul><li>现在好像auth2.0的方案也挺流行,之前工作中主要是用这个实现客户权限控制,最近感觉主要是感觉想微博登陆账号这种不用直接提过密码就可以授权的方案中.</li></ul></li></ul><hr><p><strong>注意以下实现主要是基于python django drf.</strong></p><h3 id="CAS方案"><a href="#CAS方案" class="headerlink" title="CAS方案"></a>CAS方案</h3><h5 id="单点登陆服务端-server-django-mama-cas"><a href="#单点登陆服务端-server-django-mama-cas" class="headerlink" title="单点登陆服务端:server django-mama-cas"></a>单点登陆服务端:<a href="https://github.com/jbittel/django-mama-cas" target="_blank" rel="noopener">server django-mama-cas</a></h5><h5 id="客户端-django-cas-ng"><a href="#客户端-django-cas-ng" class="headerlink" title="客户端:django-cas-ng"></a>客户端:<a href="https://github.com/mingchen/django-cas-ng" target="_blank" rel="noopener">django-cas-ng</a></h5><ul><li>看cas_ng代码 默认admin开头的,匹配<code>CAS_ADMIN_PREFIX</code>这个配置更改,但是感觉这个不够灵活吧<ul><li><a href="https://stackoverflow.com/questions/51652452/using-django-cas-ng-to-authenticate-on-admin-site" target="_blank" rel="noopener">django-cas-ng authenticate on admin site</a></li></ul></li></ul><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><ul><li>如果不加<code>CAS_ADMIN_PREFIX</code>,登陆/admin/会跳转,加上就/auth/test/ 这个测试</li></ul><h3 id="非session方案"><a href="#非session方案" class="headerlink" title="非session方案"></a>非session方案</h3><h5 id="sso-rest风格"><a href="#sso-rest风格" class="headerlink" title="sso rest风格"></a>sso rest风格</h5><ul><li><a href="https://django-rest-auth.readthedocs.io/en/latest/configuration.html" target="_blank" rel="noopener">django-rest-auth</a> demo 也是在rest-framework-tutorial ,然后放在了gitte上面.</li><li>测试<br>官方代码自己集成了swagger测试</li></ul><h4 id="REST-framework-JWT-Auth"><a href="#REST-framework-JWT-Auth" class="headerlink" title="REST framework JWT Auth"></a><a href="https://getblimp.github.io/django-rest-framework-jwt/" target="_blank" rel="noopener">REST framework JWT Auth</a></h4><ul><li>测试<br>参考官网</li><li><a href="https://www.jianshu.com/p/f00b3873f6f1" target="_blank" rel="noopener">JWT 配置</a><br>比如 <code>JWT_RESPONSE_PAYLOAD_HANDLER</code> 可以重写然后配置<pre><code class="python"><span class="comment"># urls.py</span><span class="keyword">from</span> rest_framework_jwt.views <span class="keyword">import</span> obtain_jwt_tokenurlpatterns = [url(<span class="string">r'^authorizations/&gt;, obtain_jwt_token),</span><span class="string">]</span><span class="string"># utils.py</span><span class="string">def jwt_response_payload_handler(token, user=None, request=None):</span><span class="string">"""</span><span class="string">自定义jwt认证成功返回数据</span><span class="string">"""</span><span class="string">return {</span><span class="string">'</span>token<span class="string">': token,</span><span class="string">'</span>user_id<span class="string">': user.id,</span><span class="string">'</span>username<span class="string">': user.username</span><span class="string">}</span><span class="string"># 修改配置 # JWT</span><span class="string">JWT_AUTH = {</span><span class="string">'</span>JWT_EXPIRATION_DELTA<span class="string">': datetime.timedelta(days=1),    '</span>JWT_RESPONSE_PAYLOAD_HANDLER<span class="string">':'</span>users.utils.jwt_response_payload_handle<span class="string">r',</span><span class="string">}</span></code></pre></li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://stackoverflow.com/questions/47591102/making-sso-with-django-rest-framework" target="_blank" rel="noopener">Making SSO with django rest framework</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;CAS&lt;ul&gt;
&lt;li&gt;多个应用共用一个登陆设置.&lt;/li&gt;
&lt;li&gt;我现在做的前后端分离的,不用关注权限问题,最后部署时候统一
      
    
    </summary>
    
    
      <category term="sso" scheme="https://blog.jingzhengyi.top/categories/sso/"/>
    
      <category term="cas" scheme="https://blog.jingzhengyi.top/categories/sso/cas/"/>
    
      <category term="django" scheme="https://blog.jingzhengyi.top/categories/sso/cas/django/"/>
    
      <category term="drf" scheme="https://blog.jingzhengyi.top/categories/sso/cas/django/drf/"/>
    
    
      <category term="sso" scheme="https://blog.jingzhengyi.top/tags/sso/"/>
    
  </entry>
  
  <entry>
    <title>tailwindcss</title>
    <link href="https://blog.jingzhengyi.top/2021/01/22/tailwindcss/"/>
    <id>https://blog.jingzhengyi.top/2021/01/22/tailwindcss/</id>
    <published>2021-01-22T02:05:48.754Z</published>
    <updated>2021-01-22T02:05:48.754Z</updated>
    
    <content type="html"><![CDATA[<h2 id="tailWindCss"><a href="#tailWindCss" class="headerlink" title="tailWindCss"></a>tailWindCss</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>  写React 项目 有个痛点,有时候想拷贝个已有的js文件,因为有样式,但是现在基本主流都是cssModule ,所以还得拷贝个xx.less文件之类.做Vue开发也是,如果写.vue文件,本来文件就挺长,代码要用鼠标滚轮一直滚看,还要写style部分,又是一坨代码.看着文件一长个人就有点不舒服.</p><h3 id="救星"><a href="#救星" class="headerlink" title="救星"></a>救星</h3><p>  最近看到<a href="https://tailwindcss.com/docs/" target="_blank" rel="noopener">tailwincss</a>,感觉基本解决了这个痛点.可以参考这篇<a href="http://zhaima.tech/post/tailwindcss%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B" target="_blank" rel="noopener">文章</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;tailWindCss&quot;&gt;&lt;a href=&quot;#tailWindCss&quot; class=&quot;headerlink&quot; title=&quot;tailWindCss&quot;&gt;&lt;/a&gt;tailWindCss&lt;/h2&gt;&lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="css" scheme="https://blog.jingzhengyi.top/categories/css/"/>
    
    
  </entry>
  
  <entry>
    <title>umi适配华为自带浏览器和QQ浏览器</title>
    <link href="https://blog.jingzhengyi.top/2021/01/22/umi%E9%80%82%E9%85%8D%E5%8D%8E%E4%B8%BA%E8%87%AA%E5%B8%A6%E6%B5%8F%E8%A7%88%E5%99%A8%E5%92%8CQQ%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    <id>https://blog.jingzhengyi.top/2021/01/22/umi%E9%80%82%E9%85%8D%E5%8D%8E%E4%B8%BA%E8%87%AA%E5%B8%A6%E6%B5%8F%E8%A7%88%E5%99%A8%E5%92%8CQQ%E6%B5%8F%E8%A7%88%E5%99%A8/</id>
    <published>2021-01-22T02:05:48.754Z</published>
    <updated>2021-01-22T02:05:48.754Z</updated>
    
    <content type="html"><![CDATA[<p>最近准备面试一个H5的工作,然后准备了用umi+Django写一个H5前端页面练练手.写了一个<a href="http://www.jingzy.top:8002" target="_blank" rel="noopener">几个页面</a>,在UC,chrome浏览器和微信里面都正常,然后发现在华为自带浏览器,后来发现qq浏览器,都是感觉没调用webpack 打包生成的js……查了一下资料,说是华为自带的浏览器内核很老(我的是华为M5 android8),umi的GitHub也有人提,但是回复都没怎么看到希望. 折腾了半天后,用一下配置可行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">targets: &#123;</span><br><span class="line">chrome: <span class="number">58</span>,</span><br><span class="line">ie: <span class="number">9</span>,</span><br><span class="line">&#125;,</span><br><span class="line">exportStatic:&#123;&#125;,</span><br></pre></td></tr></table></figure><p>参考:<br><a href="https://github.com/umijs/umi/issues/304" target="_blank" rel="noopener">使用 umi 在华为手机上不渲染页面,加载出空白页 #304</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近准备面试一个H5的工作,然后准备了用umi+Django写一个H5前端页面练练手.写了一个&lt;a href=&quot;http://www.jingzy.top:8002&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;几个页面&lt;/a&gt;,在UC,chrome浏览器
      
    
    </summary>
    
    
      <category term="umi" scheme="https://blog.jingzhengyi.top/categories/umi/"/>
    
      <category term="android" scheme="https://blog.jingzhengyi.top/categories/umi/android/"/>
    
    
      <category term="h5" scheme="https://blog.jingzhengyi.top/tags/h5/"/>
    
  </entry>
  
</feed>
