<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>程序员的职业修养</title>
      <link href="/2021/07/12/beProgrammer/"/>
      <url>/2021/07/12/beProgrammer/</url>
      
        <content type="html"><![CDATA[<p>有个程序员喝醉酒,然后分享的自己的经验 ,从 <a href="http://www.ruanyifeng.com/blog/2021/06/drunk-post-of-a-programmer.html" target="_blank" rel="noopener">阮一峰博客看的</a></p><p><img src="pics/advi.png" alt=""></p><p><img src="pics/adv2.png" alt=""></p><p>最近又看了 jebrain 的程序员调查结果 2021 版(话说我这个是年初填了一下,感觉出结果都半年之后了,估计可能我做的比较早?)<br>比较有意思的:</p><ul><li><p><a href="https://www.jetbrains.com/lp/devecosystem-2021/" target="_blank" rel="noopener">https://www.jetbrains.com/lp/devecosystem-2021/</a> ,感觉可能限于用 jetbrain 软件的人群,做 web 开发的人占很大比例.可以看看<br>里面的收入统计…………中国虽然跟美国差距大,但是还是在 14 位上,中位数 21000 美元</p></li><li><p>男女比例<br>女性还是少数群体,起码参与调查积极性不高…不逛社区也能反应些问题,总得来看感觉女性还是少数的.<br>中国是 5%;</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>cors跨域问题</title>
      <link href="/2021/07/04/cors/"/>
      <url>/2021/07/04/cors/</url>
      
        <content type="html"><![CDATA[<p>浏览器 跨域问题console 报错  </p><blockquote><p>No ‘Access-Control-Allow-Origin’ header is present on the requested resource.<br>Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at<a href="https://example.com/" target="_blank" rel="noopener">https://example.com/</a><br>Access to fetch at ‘<a href="https://example.com’" target="_blank" rel="noopener">https://example.com’</a> from origin ‘<a href="http://localhost:3000’" target="_blank" rel="noopener">http://localhost:3000’</a> has been blocked by CORS policy.</p></blockquote><p>如果你遇到这些报错，就是跨域问题。</p><a id="more"></a><h2 id="Origin-amp-Cross-origin"><a href="#Origin-amp-Cross-origin" class="headerlink" title="Origin &amp; Cross-origin"></a>Origin &amp; Cross-origin</h2><p>判断是否跨域 看三个指标：scheme，host，和port 。例如，<a href="https://example.com" target="_blank" rel="noopener">https://example.com</a>  <a href="http://example.com" target="_blank" rel="noopener">http://example.com</a> 是不用域的，因为前者是http scheme 后者是https. </p><h2 id="跨域的风险"><a href="#跨域的风险" class="headerlink" title="跨域的风险"></a>跨域的风险</h2><p>如果 CORS 不存在，网络浏览器允许各种各样的跨源请求。<br>想象一下，我在我的网站 evil. com 上有一个带有 &lt;script&gt; 的页面。表面上它看起来像一个简单的页面，在那里你可以读到一些有用的信息。但是在 &lt;script&gt; 中，我特别编写了一些代码，它们将向银行的 DELETE / 帐户端点发送一个特殊编写的请求。加载页面后，执行 JavaScript，然后一个 AJAX 调用访问银行的 API。 </p><p>想象一下，当你在网页上阅读一些信息时，你收到一封来自你银行的电子邮件，你已经成功地删除了你的帐户。我知道我知道… … 如果银行真的那么容易。我跑题了。<br>为了让我邪恶的 &lt;script&gt; 工作，作为请求的一部分，你的浏览器还必须从银行网站上发送你的证书 (cookies)。这样银行的服务器就能识别你的身份，并知道该删除哪个账户。 </p><ul><li>让我们看看一个不同的，不那么邪恶的场景。<br>我想找到那些为 Awesome Corp 工作的人，他们的内部网站在 intra.Awesome-Corp.com 上。在我的网站上，dangerous.com i got an &lt;img src = “<a href="https://intra.awesome-corp" target="_blank" rel="noopener">https://intra.awesome-corp</a>. com/avatars/john-doe.png”&gt; 。<br>对于那些没有使用 intra.awesome-corp.com 的会话活动的用户，虚拟化身不会渲染 - 它会产生一个错误。但是，如果你登录了 Awesome 公司的内部网，一旦你打开了 dangerous.com 网站，我就知道你有权限访问。<br>这意味着我将能够得到一些关于你的信息。虽然对我来说制造一个攻击绝对是很困难的，但是你可以访问 Awesome 公司的 仍然是一个潜在的攻击风险。 </li></ul><h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><p>同源策略 规则集<br>标签     Cross-origin     注意<br>&lt;iframe&gt;     允许  embeds     看情况X-Frame-Options<br>&lt;link&gt;     允许  embeds     适当的 可能需要<br>&lt;form&gt;     允许  write    Cross-origin write 是很常见的<br>&lt;img&gt;     允许  embeds     通过 JavaScript 进行跨源读取，并将其加载到 是被禁止的<br>&lt;audio&gt; / &lt;video&gt;     允许  embeds<br>&lt;script&gt;     允许  embeds     可能会禁止访问某些 api </p><h2 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h2><p>CORS（cross origin resource sharing ） 诞生的目标是放宽同源政策和微调跨源接入。 该机制将子资源访问分为三类：</p><ul><li>cross-origin write<br>指连接，重定向，表单提交。 还有一种是preflight请求的东西，可以微调cross -origin write 。</li><li>cross-origin embeds<br>通过 &lt;script&gt; ,&lt;link&gt;,img,video,audio ,iframe, embed 等标签加载的子资源。 </li><li>cross-orgin reads<br>通过ajax/fetch加载的子资源。通常情况下，这些在浏览器中事被blocked的。</li></ul><h3 id="prefilght-request"><a href="#prefilght-request" class="headerlink" title="prefilght request"></a>prefilght request</h3><p> 复杂请求 即是 options 请求通过了也会拦截。<br>现代浏览器定义的 <strong>复杂请求</strong></p><ul><li>一个使用GET、POST或HEAD以外的方法的请求</li><li>请求中包含除Accept、Accept-Language或Content-Language以外的头信息。</li><li>请求中的Content-Type头值不是application/x-www-form-urlencoded, multipart/form-data, 或text/plain。</li></ul><h2 id="nginx-配置cookie"><a href="#nginx-配置cookie" class="headerlink" title="nginx 配置cookie"></a>nginx 配置cookie</h2><p>正常的跨域解决就是网上搜的，然后有一点就是允许转发携带cookie，这个应该是现代浏览器加了校验，解决方案网上看了三个：</p><ol><li>客户端解决方案 （测试可以）<br>主要是 SameSite=None; Secure，具体cookie 设置<br>document.cookie = ‘cookie2=value2; SameSite=None; Secure’;</li><li>服务器端<br>模式是一样的，只是写入cookie的模式不一样,以下是node 的参考<br>response.setHeader(‘set-cookie’, <a href=""></a>  ‘cookie1=value1; SameSite=Lax’,<br>‘cookie2=value2; SameSite=None; Secure’,<br>]);</li><li>改用https 方式<br>注意 ：对于SameSite=None 同时也需要设置Secure，同时我们需要改用https，而且注意测试的时候不要使用无痕模式，chrome无痕模式默认是阻止三方cookie的<br>所以也是不能测试的，（<a href="https://samesite-sandbox.glitch.me/" target="_blank" rel="noopener">https://samesite-sandbox.glitch.me/</a> 是一个好工具，方便测试是否生效）对于web 推荐使用js-cookie 包装的比较完整，使用上简单<br>2，3方式可能有些重叠，需要验证。。。。。。</li></ol><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>W3C标准规定，http请求头的origin(源地址)与目的地址在协议（http1.1,https等），端口，域名（ip）任何一个不一致就会触发跨域拦截机制。<br>为什么只有ajax会触发跨域？<br>其实这个问题问的并不好，回答这个问题前，我们要了解跨域可以简单的分为两种：简单请求和复杂请求</p><ol><li>简单请求 ：</li><li>http请求方法的值限于三者之一：get,put,post;</li><li>Content-Type的值仅限于三者之一:text/plain，multipart/form-data，application/x-www-form-urlencoded；<br>除了被用户代理自动设置的首部字段（例如 Connection ，User-Agent）和在 Fetch 规范中定义为 禁用首部名称 的其他首部，允许人为设置的字段为 Fetch 规范定义的 对 CORS 安全的首部字段集合。该集合为：<br>Accept Accept-Language Content-Language Content-Type （需要注意额外的限制） DPR Downlink Save-Data Viewport-Width Width 123456789</li><li>复杂请求<br>除了简单请求都是复杂请求，我们大多数时候都是 ajax请求的Content-Type：application/json 这样的复杂请求导致的。<br>简单请求如果设置了Authentication认证header也会让请求“升级”为复杂请。<br>简单请求相比于复杂请求少了一步 预检请求，也就是http的OPTIONS请求<br>这些规则在现代浏览器都是有实现的。</li></ol>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>kaboomJs 做网页游戏</title>
      <link href="/2021/06/27/game_kaboomJs/"/>
      <url>/2021/06/27/game_kaboomJs/</url>
      
        <content type="html"><![CDATA[<p><a href="https://kaboomjs.com/guide" target="_blank" rel="noopener">kaboomJS </a> 自己介绍说是 极速开发网页游戏的一个库。周末看了一个 yutuber 博主发的一个用这个库实现马力欧游戏的视频，感觉确实眼前一亮。用对工具，果然干活就是一个库的事情。。。。。</p><p><a href="https://www.youtube.com/watch?v=2nucjefSr6I" target="_blank" rel="noopener">Coding Up a Mario Game in JavaScript with Kaboom.js </a></p><p>— Ania is back showing us how to create a basic platformer in the course of an hour in her typically breezy, easy to follow manner. Watch this if you want to reignite that coding spark.</p><p>最终结果就是 一个 html + 一个 game.js !!! 效果如下：<br><img src="pics/mario.png" alt=""></p><p>基本思路就是 加载各种图片 ，下面的路，马力欧，小怪兽，然后用这个框架驱动图片动，然后库提供了碰撞方法之类的。。。。。</p><p>Final code here: <a href="https://github.com/kubowania/mario" target="_blank" rel="noopener">https://github.com/kubowania/mario</a></p><p>Imgur: <a href="https://imgur.com/a/F8Jkryq" target="_blank" rel="noopener">https://imgur.com/a/F8Jkryq</a></p>]]></content>
      
      
      <categories>
          
          <category> frontend </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>高级工程师的技能清单</title>
      <link href="/2021/06/27/skillList/"/>
      <url>/2021/06/27/skillList/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://skamille.medium.com/an-incomplete-list-of-skills-senior-engineers-need-beyond-coding-8ed4a521b29f" target="_blank" rel="noopener">https://skamille.medium.com/an-incomplete-list-of-skills-senior-engineers-need-beyond-coding-8ed4a521b29f</a></p></blockquote><ul><li>如何主持会议，不，在会议上说得最多的人与主持会议不是一回事。</li><li>如何在合理的时间内撰写设计文件，接受反馈，并推动其解决。</li><li>如何指导职业生涯初期的队友、职业生涯中期的工程师、需要技术建议的新经理</li><li>如何在不翻白眼或让他们觉得愚蠢的情况下，纵容一个想谈论他们并不真正理解的技术问题的高级经理人？</li><li>如何向一个不好意思公开承认自己不懂的技术概念的高层人士解释，闭门造车？</li><li>如何影响另一个团队使用你的解决方案，而不是写他们自己的解决方案</li><li>如何通过请求帮助的方式让另一个工程师为你做事，让他们觉得自己受到赞赏</li><li>如何领导一个项目，即使你并不管理项目中的任何人员</li><li>如何让其他工程师倾听你的想法，而不使他们感到受到威胁</li><li>如何倾听其他工程师的想法而不觉得受到威胁</li><li>如何放弃你的宝贝项目，也就是那个你把它建设得很好的项目，以便你可以做别的事情。</li><li>如何教另一个工程师关心你真正关心的事情（操作、正确性、测试、代码质量、性能、简单性等等）。</li><li>如何与利益相关者沟通项目状态</li><li>如何说服管理层他们需要投资于一个非微不足道的技术项目</li><li>如何构建软件，同时在这个过程中提供增量价值</li><li>如何制定一个项目提案，使之社会化，并获得执行的支持</li><li>如何重复自己，使人们开始倾听</li><li>如何选择你的战斗</li><li><strong>高级工程师的技能之一，就是要帮忙其他人晋升</strong>。</li><li>如何获得关于真正发生的事情的信息（如何八卦，如何建立网络）。</li><li>如何自己找到有趣的工作，而不是等着别人把它带给你</li><li>如何告诉别人他们是错的而不使他们感到羞愧</li><li>如何优雅地接受负面反馈</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> skill </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webstormConfig</title>
      <link href="/2021/06/20/webstormConfig/"/>
      <url>/2021/06/20/webstormConfig/</url>
      
        <content type="html"><![CDATA[<h2 id="60-WebStorm-IntelliJ-IDE-Tips-Tricks-and-Features-That-Will-Make-Your-Life-Easier"><a href="#60-WebStorm-IntelliJ-IDE-Tips-Tricks-and-Features-That-Will-Make-Your-Life-Easier" class="headerlink" title="60 WebStorm/IntelliJ IDE Tips, Tricks, and Features That Will Make Your Life Easier"></a>60 WebStorm/IntelliJ IDE Tips, Tricks, and Features That Will Make Your Life Easier</h2><blockquote><p>ref <a href="https://medium.com/litslink/webstorm-intellij-ide-tips-tricks-and-features-that-will-make-your-life-easier-6d0c38ff3d4b" target="_blank" rel="noopener">https://medium.com/litslink/webstorm-intellij-ide-tips-tricks-and-features-that-will-make-your-life-easier-6d0c38ff3d4b</a><br>感觉学到了好些新的 intelJ 配置。。。。。。感觉挺好</p></blockquote><blockquote><p>In this article we will talk about capabilities, tip and features of JetBrains IDEs like Webstorm and Intellij that you get out of the box but 90% chance that you don’t use it.</p></blockquote><p>For our examples, I will use a simple Typescript React project created by <a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">create-react-app</a> script and simple TS files for tests like 2 + 2 = 4.</p><h2 id="1-Presentation-plugin"><a href="#1-Presentation-plugin" class="headerlink" title="1. Presentation plugin"></a>1. Presentation plugin</h2><p>Before we will begin our journey I will install a Presentation plugin…</p><p><img src="https://miro.medium.com/max/4936/1*duAiXryh-Gh1xNkDrrrzdA.png" alt=""></p><p>…that will show us notifications with the action name and shortcuts for iOS/Win/Linux:</p><p><img src="https://miro.medium.com/max/5144/1*tpbbOA4ffWme_ktFiWeGww.jpeg" alt=""></p><a id="more"></a><h2 id="2-Find-in-files"><a href="#2-Find-in-files" class="headerlink" title="2. Find in files"></a>2. Find in files</h2><p>We will start with a simple <code>Find in files</code> feature [<code>**Shift+Command+F**</code>]. It allows you to search any text fragments everywhere in your Project:</p><p><img src="https://miro.medium.com/max/4372/1*Y05WGNfE4M_qViXQYdUbZQ.png" alt=""></p><h2 id="3-Replace-in-files"><a href="#3-Replace-in-files" class="headerlink" title="3. Replace in files"></a>3. Replace in files</h2><p>[<code>Shift+Command+R</code>]</p><p>This feature allows you to rename all fragments that match the search.</p><p>You can just click <code>Replace All</code> and IDE will rename each and every variable that will be in the list. You need to be careful with using <code>Replace All</code> especially if you’re not using Git.</p><p><img src="https://miro.medium.com/max/5752/1*MejFRtLtzpWQ3jg4Kf8PQw.jpeg" alt=""></p><h2 id="4-Find-usages"><a href="#4-Find-usages" class="headerlink" title="4. Find usages"></a>4. Find usages</h2><p>[<code>Option+F7</code>]</p><p>Find usages will show you places where current function/class/variable is used:</p><p><img src="https://miro.medium.com/max/4372/1*7ZTw3H_5akHurZZy87YLxg.png" alt=""></p><h2 id="5-Find-usage-in-File"><a href="#5-Find-usage-in-File" class="headerlink" title="5. Find usage in File"></a>5. Find usage in File</h2><p>[<code>Shift+F7</code>]</p><p>IDE will highlight all appearances in the current file and highlights will remain until you press <code>**ESC**</code> key:</p><p><img src="https://miro.medium.com/max/4372/1*7dxrhaf5EZt-Z8rFM0Ig1A.png" alt=""></p><h2 id="6-Find-next-Move-to-next-Occurrence"><a href="#6-Find-next-Move-to-next-Occurrence" class="headerlink" title="6. Find next / Move to next Occurrence"></a>6. Find next / Move to next Occurrence</h2><p>You can move to the next occurrence with <code>Find Next/Move to next occurrence</code> action by selecting what you need to search and pressing <code>**Command+G**</code> hotkey:</p><p><img src="https://miro.medium.com/max/2152/1*hu8_1yudJecIww_B9YiuJw.gif" alt=""></p><h2 id="7-Go-to-declaration-or-usages"><a href="#7-Go-to-declaration-or-usages" class="headerlink" title="7. Go to declaration or usages"></a>7. Go to declaration or usages</h2><p>You don’t need to use your mouse for finding Usages, just use [<code>Command+B</code>] hotkey:</p><p><img src="https://miro.medium.com/max/2152/1*hv60Wiu9hvG5Ctml0HENyQ.gif" alt=""></p><h2 id="8-Go-to-Class"><a href="#8-Go-to-Class" class="headerlink" title="8. Go to Class:"></a>8. Go to Class:</h2><p>If you are looking for a class in your project you can use [<code>Command+O</code>] hotkey</p><p><img src="https://miro.medium.com/max/4316/1*kMygtDn_A8YJ7qwsaiQa7w.png" alt=""></p><p>If you don’t remember the name of your class, you can try to search by Name fragments:</p><p><img src="https://miro.medium.com/max/4316/1*ryuo0qYZtKJF4NOlqmVfNg.png" alt=""></p><p>If you know the specific code line you need to check you can use a dots <code>:</code> notation → <code>&lt;file name&gt;:&lt;codeline number&gt;</code> and IDE will redirect you directly there:</p><p><img src="https://miro.medium.com/max/4316/1*Zcgo-w_uNd76lBJHll_gew.png" alt=""></p><p>If you are at the <code>Classes navigation</code> press <code>Commad + O</code> again to search everywhere, including Project’s libraries/packages folders, I will look for types and interfaces too:</p><p><img src="https://miro.medium.com/max/4316/1*hkmB8SdZS9jY16mkHdV_qg.png" alt=""></p><h2 id="9-Go-to-File"><a href="#9-Go-to-File" class="headerlink" title="9. Go to File"></a>9. Go to File</h2><p>[<code>Shift+Command+O</code>]</p><p>This option will search for a files, in this case it doesn’t matter what is in there:</p><p><img src="https://miro.medium.com/max/4316/1*XGPZKjVc9hctu0XVDOgtHw.png" alt=""></p><h2 id="10-Go-to-Folder"><a href="#10-Go-to-Folder" class="headerlink" title="10. Go to Folder"></a>10. Go to Folder</h2><p>[<code>Shift+Command+O</code>]</p><p>If you will type a slash symbol before the searched name <code>/SomeFolderName</code>. IDE will search only folders, files will be excluded from a search result list:</p><p><img src="https://miro.medium.com/max/4316/1*N3lRt-WjyAJvfKkNhURq0A.png" alt=""></p><h2 id="11-Go-to-Symbol"><a href="#11-Go-to-Symbol" class="headerlink" title="11. Go to Symbol"></a>11. Go to Symbol</h2><p>[<code>Option+Command+O</code>]</p><p>This feature allows your search for functions and fields that are declared in a specific class name <code>&lt;ClassName&gt;.&lt;FunctionName&gt;</code>. It will show all <code>hello</code> <strong>functions</strong> and <strong>fields</strong> of a FirstClass or FirstClass TS files:</p><p><img src="https://miro.medium.com/max/4372/1*lmPPknfr9g7mExMArrlZDQ.png" alt=""></p><h2 id="12-Search-everywhere-anything"><a href="#12-Search-everywhere-anything" class="headerlink" title="12. Search everywhere anything"></a>12. Search everywhere anything</h2><p>[Double Shift]</p><p>This is the most powerful feature of JetBrains IDEs. It allows a developer to do almost anything:</p><ul><li>search class/files/folders;</li><li>run scripts (<em>will show later in this story</em>);</li><li>open preferences tabs;</li><li>change theme;</li><li>open menus/popups (<em>will show later in this story</em>)</li><li>etc…</li></ul><p>Functionality is almost limitless.</p><p><img src="https://miro.medium.com/max/4372/1*Pqk1yJgI5dqaOpMqwy-MfQ.png" alt=""></p><h2 id="13-Navigate-through-search-history"><a href="#13-Navigate-through-search-history" class="headerlink" title="13. Navigate through search history"></a>13. Navigate through search history</h2><p>If you press [<code>Option+Up/Down</code>] keys inside “Search everywhere” you can navigate through your search history:</p><h2 id="14-Problems-window-Highlighted-Errors-navigation"><a href="#14-Problems-window-Highlighted-Errors-navigation" class="headerlink" title="14. Problems window. Highlighted Errors navigation"></a>14. Problems window. Highlighted Errors navigation</h2><p>You don’t need scroll down when you are looking for errors in your code. Just use the [ <code>**F2**</code> ] key and IDE will scroll to the Next Highlighted Error:</p><p><img src="https://miro.medium.com/max/4648/1*ktSFPxeMBgP238_oq_wy1Q.jpeg" alt=""></p><p>Previous Highlighted Error → [ <code>**Shift+F2**</code> ]</p><p><img src="https://miro.medium.com/max/60/1*Sb3XtREM55hffNi2i_Vj4Q.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/4648/1*Sb3XtREM55hffNi2i_Vj4Q.jpeg" alt=""></p><p>⚠️ <strong>NOTE</strong>: IDE will only navigate you through <strong><em>errors</em></strong>, not formatting issues. You can click at the top-right icon…</p><p><img src="https://miro.medium.com/max/60/1*VOY6D1Ib6zvbdgeYN0hItw.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/3924/1*VOY6D1Ib6zvbdgeYN0hItw.jpeg" alt=""></p><p>… or press [ <code>**Command+6**</code> ] for showing the “Problems” window:</p><p><img src="https://miro.medium.com/max/60/1*Z7Kq7pElzLBZ4HyiinZFvg.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/4648/1*Z7Kq7pElzLBZ4HyiinZFvg.jpeg" alt=""></p><h2 id="15-Run-scripts-after-search"><a href="#15-Run-scripts-after-search" class="headerlink" title="15. Run scripts after search"></a>15. Run scripts after search</h2><p>You can even run commands from a search bar, <code>**npm start**</code> for example. Or maybe you have a test you want to run, you can do that without opening your tests file. <em>But you must remember</em> that you can run only that files/tests/scripts that were previously added to the IDE configuration scripts:</p><p><img src="https://miro.medium.com/max/4092/1*Pt0BAO_6oUT3lXQS7rbXnw.png" alt=""></p><p><img src="https://miro.medium.com/max/3412/1*R8JQVxyOK-7uXyLOeBYtiw.png" alt=""></p><p>Take a look at how it works:</p><p>You can even commit your changes by typing <code>commit</code>:</p><p><img src="https://miro.medium.com/max/60/1*YG-S1QZC9vBkCLLUsFkhhg.png?q=20" alt=""></p><p><img src="https://miro.medium.com/max/4372/1*YG-S1QZC9vBkCLLUsFkhhg.png" alt=""></p><p>👍 So, as you can see “Search Everywhere” action allows you to not just find something, but <strong>execute</strong> as well.</p><h2 id="16-Commit-without-“add”"><a href="#16-Commit-without-“add”" class="headerlink" title="16. Commit without “add”"></a>16. Commit without “add”</h2><p>IDE is smart enough to tell you that you have “Unversioned files” and you need to add them first before the commit, but…</p><p><img src="https://miro.medium.com/max/4096/1*Lmd-pTYm5NGjBuXn2RHnrg.jpeg" alt=""></p><p>… you can add “Unversioned files” you can add them in the “Commit changes” window by clicking the checkbox:</p><p><img src="https://miro.medium.com/max/60/1*zTLGb_2OZA_GgRwQumxtdg.jpeg?q=20" alt=""></p><p>!]can just click [<code>**Control+Option+O**</code> / ⌃⌥O] and IDE will do that for you</p><p><img src="https://miro.medium.com/max/60/1*N8H7ezyLd9iYIC_vzXtF3A.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/4416/1*N8H7ezyLd9iYIC_vzXtF3A.jpeg" alt=""></p><h2 id="19-VCS-Operations"><a href="#19-VCS-Operations" class="headerlink" title="19. VCS Operations"></a>19. VCS Operations</h2><p>You can open the VCS (Version Control System) menu by pressing [<code>**Control+V**</code> ], so you don’t have to remember all VCS commands like <code>commit</code> , <code>push</code> , etc…</p><p><img src="https://miro.medium.com/max/4556/1*CdgYnWK99qiDACwHlgRsow.jpeg" alt=""></p><h2 id="20-Open-in-a-split-tab"><a href="#20-Open-in-a-split-tab" class="headerlink" title="20. Open in a split tab"></a>20. Open in a split tab</h2><p>You can open the searched file in a new Tab by clicking <code>**Enter**</code>, or you can open the searched file in a split tab if you press <code>**Shift+Enter**</code> <strong>:</strong></p><h2 id="21-Evaluate-mathematical-expressions"><a href="#21-Evaluate-mathematical-expressions" class="headerlink" title="21. Evaluate mathematical expressions"></a>21. Evaluate mathematical expressions</h2><p>In the “Search everywhere” window you can quickly type and evaluate simple mathematical expressions.</p><p><img src="https://miro.medium.com/max/3412/1*bWVrNCvwBF__3Q3FwrYRpw.png" alt=""></p><p>You can use basic arithmetic operators — <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, as well as <code>^</code> for power — and basic math functions: <code>sqrt()</code>, <code>sin()</code>, <code>cos()</code>, <code>tan()</code>.</p><h2 id="22-File-structure"><a href="#22-File-structure" class="headerlink" title="22. File structure"></a>22. File structure</h2><p>Probably you noticed <code>Structure</code> window that you can show/hide by clicking on it or by pressing [ <code>**Command+7**</code> ] keys:</p><p><img src="https://miro.medium.com/max/4648/1*7jdlSs3_j-UdmxTQiWiKYw.jpeg" alt=""></p><p>But the cool thing is that you can open it without messing with your editor tabs in a popup window by pressing [ <code>**Command+F12**</code> ] hotkey:</p><p><img src="https://miro.medium.com/max/4648/1*wkpdTFkN6PTVVbTt7mTdnw.jpeg" alt=""></p><h2 id="23-See-recent-files"><a href="#23-See-recent-files" class="headerlink" title="23. See recent files"></a>23. See recent files</h2><p>If your search input field is empty, “Search everywhere” will show your recent files:</p><p><img src="https://miro.medium.com/max/3424/1*TsFm6wtnln7lCxMtMqPJpQ.png" alt=""></p><p>You can see exactly the same list by using [ <code>**Command+E**</code>/ ⌘E] hotkey → Recent Files window will show up.</p><p><img src="https://miro.medium.com/max/60/1*_OX50T3N1YlykXVxuqTQGw.png?q=20" alt=""></p><p><img src="https://miro.medium.com/max/4372/1*_OX50T3N1YlykXVxuqTQGw.png" alt=""></p><p>⚠️ <strong>NOTE</strong>: If you delete recent files from this list, they will be gone from the recent list of a <code>**Search Everywhere**</code> too</p><p>Recent Files will show you only changed files if you press [ <code>Command+E</code> / ⌘E ] hotkey:</p><p><img src="https://miro.medium.com/max/60/1*YjBugvPmDC0FqbnGZIsPYA.png?q=20" alt=""></p><p><img src="https://miro.medium.com/max/4372/1*YjBugvPmDC0FqbnGZIsPYA.png" alt=""></p><h2 id="24-Structural-search-and-replace"><a href="#24-Structural-search-and-replace" class="headerlink" title="24. Structural search and replace"></a>24. Structural search and replace</h2><p>WebStorm treats your code as regular text. The <strong>structural search and replace</strong> (<strong>SSR</strong>) actions let you search for a particular code pattern</p><p>WebStorm finds and replaces fragments of source code, based on the <strong>search templates</strong> that you create and conditions you apply.</p><p>This feature is very useful when you need to refactor the code <strong>structure.</strong></p><p>Select <code>Edit &gt; Find &gt; **Search Structurally**</code> from the main menu, or just type the required name in the “Search everywhere” window:</p><p><img src="https://miro.medium.com/max/3392/1*DLoQ4nidJ17zgkJvSf2kQg.jpeg" alt=""></p><p>It will open the <strong>Structural Search</strong> window:</p><p><img src="https://miro.medium.com/max/60/1*unGcnLRRYxA0xz0wDsvMdQ.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/3780/1*unGcnLRRYxA0xz0wDsvMdQ.jpeg" alt=""></p><p>You can use Existing Templates predefined in IDE by clicking on settings icon:</p><p><img src="https://miro.medium.com/max/60/1*WR0hxARMhnpXHDX3tK-DtQ.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/2244/1*WR0hxARMhnpXHDX3tK-DtQ.jpeg" alt=""></p><p>You can edit those templates and save them as your own:</p><p><img src="https://miro.medium.com/max/60/1*Cw7tMZfPRoG_hUZiUd1SQQ.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/3780/1*Cw7tMZfPRoG_hUZiUd1SQQ.jpeg" alt=""></p><p>You can check the history of your changes by clicking the <code>**search**</code> icon:</p><p><img src="https://miro.medium.com/max/60/1*3wbcdQN0ysCjVYb7zDtnkA.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/2508/1*3wbcdQN0ysCjVYb7zDtnkA.jpeg" alt=""></p><p>Here I will show you a simple example because Structural Search uses its own syntax (I will tell more about it next time).</p><p>Let’s imaging that we have empty functions defined in our code, and search by text will not help you find all of them:</p><p><img src="https://miro.medium.com/max/60/1*a0oY78lEd2BMbYbLaq3-PA.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/3588/1*a0oY78lEd2BMbYbLaq3-PA.jpeg" alt=""></p><p>We can define our search template…</p><p>const $name$ = ($parameter$) =&gt; {</p><pre><code>}</code></pre><p>…and replace template:</p><p>const $name$ = ($parameter$) =&gt; {<br>// <strong>TODO</strong>: This should be fixed, or removed<br>}</p><p>IDE will highlight elements that match this pattern. Click “Find”:</p><p><img src="https://miro.medium.com/max/3808/1*pvNYKMwvBp52UinelPAtzA.jpeg" alt=""></p><p>‘Find Window’ will be shown after the ‘Find’ click. You can check if all results are correct. After that, you can click <code>Replace All</code> (<strong>don’t recommend</strong> this approach, especially if you are not using VCS) or <code>Replace Selected</code>:</p><p><img src="https://miro.medium.com/max/4196/1*rlyECLV66JNbjiXdlkrKjA.jpeg" alt=""></p><p>Also, you can ‘<strong>Preview Replacement</strong>’ that will show you what your code fragment will look like after replacement:</p><p><img src="https://miro.medium.com/max/60/1*0qo2JZ1u3mzF4kKCE3GYVw.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/4196/1*0qo2JZ1u3mzF4kKCE3GYVw.jpeg" alt=""></p><p>You probably noticed that we made a mistake when we specified replace template. It will use only use parameter <strong><em>name</em></strong> but will exclude the parameter’s <strong><em>type</em></strong>.</p><p>But for educational purposes, I will click “<code>Replace All</code>” 🙂. Let’s see what we will get:</p><p><img src="https://miro.medium.com/max/60/1*wqYW4iNSoC85tmI5ayV9NQ.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/3072/1*wqYW4iNSoC85tmI5ayV9NQ.jpeg" alt=""></p><p>Now at least we have TODO markers in our Project that say to us that we should do something about it.</p><h2 id="25-Adding-a-custom-hotkey"><a href="#25-Adding-a-custom-hotkey" class="headerlink" title="25. Adding a custom hotkey"></a>25. Adding a custom hotkey</h2><p>As you noticed there are no hotkeys assigned to the “S<strong>tructural search and replace”</strong>, let’s change that. Open IDE preferences <code>Command+,</code> and type structural in the preference’s search field, find <code>Search Structurally…</code>and click the Right button:</p><p><img src="https://miro.medium.com/max/4548/1*kPvkeAtRKpr8Wy6sz5-Q2A.jpeg" alt=""></p><p>Just type keys you want to use and press <code>**Ok**</code>.</p><p><img src="https://miro.medium.com/max/1648/1*hFaC7wMJMtROYCjh0i2AQA.jpeg" alt=""></p><p>If there will be collisions with some other hotkeys, don’t worry, IDE will tell you about it:</p><p><img src="https://miro.medium.com/max/60/1*wjiCsseOKKXMNIJPJirTZg.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/1648/1*wjiCsseOKKXMNIJPJirTZg.jpeg" alt=""></p><p>⚠️ <strong>NOTE</strong>: Don’t try to type keys <strong>separately</strong> from each other like <code>Control</code>, <code>Option</code>, <code>S</code>. It will not work that way. Just use a combination like you are trying to use it already, like [<code>Control+Option+S</code> ] hotkey.</p><h2 id="26-Macros"><a href="#26-Macros" class="headerlink" title="26. Macros"></a>26. Macros</h2><p>Macros provide a convenient way to automate repetitive procedures you do frequently while writing code. You can <strong>record</strong>, <strong>edit,</strong> and <strong>playback</strong> macros, assign a <strong>shortcut</strong> to them, and <strong>share</strong> them.</p><p>You can start recording by clicking <code>**Edit&gt;Macros&gt;Start Macro Recording**</code>, but I will do it by typing <em>start macro</em> in <code>Search everything</code></p><p><img src="https://miro.medium.com/max/3392/1*TZncJf2NmG26i-07fSjNSA.jpeg" alt=""></p><p>You will see a pop-up with a <code>**STOP**</code> button:</p><p><img src="https://miro.medium.com/max/60/1*27BhRUFyLgAd1Tmv9_l4rg.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/2708/1*27BhRUFyLgAd1Tmv9_l4rg.jpeg" alt=""></p><p>⚠️ <strong>NOTE</strong>: When you are creating Macros, IDE will record only <strong>your</strong> actions, but it will not record autocompletion and auto imports. So before you Record a really big code fragment (which I don’t recommend, use templates instead), try it with something simple and by adding features step-by-step.</p><p>Let’s create something awesome… When you finished, click <code>**STOP**</code> icon and select a name for your <strong>Macro.</strong></p><p>export const sum = <em>(</em>a: string, b: string<em>)</em> =&gt; <em>{</em> return a + b;<br><em>}</em></p><p>I will delete all I have created in the file and click on <code>**Play Back Last Macro**</code>:</p><p><img src="https://miro.medium.com/max/60/1*MnXqpVIKo6p6ABYuU_EJ9Q.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/4032/1*MnXqpVIKo6p6ABYuU_EJ9Q.jpeg" alt=""></p><p><img src="https://miro.medium.com/freeze/max/60/1*8ySJEqk1cRAXi6jldzPGDw.gif?q=20" alt=""></p><p><img src="https://miro.medium.com/max/3248/1*8ySJEqk1cRAXi6jldzPGDw.gif" alt=""></p><h2 id="27-Language-injection"><a href="#27-Language-injection" class="headerlink" title="27. Language injection"></a>27. Language injection</h2><p>We all had such cases when we need to type a simple text that should represent JSON, RegEx, HTML, SQL, etc. You don’t need to create those files so that IDE would help you. You can use Language Injection so that IDE would handle those Language fragments in a simple string:</p><p><img src="https://miro.medium.com/max/4916/1*gWqYIXXpC3KAQgA-SXjOlg.jpeg" alt=""></p><p>In ES6 JavaScript you can use template literals <code>`{“name”: “John”}`</code>, but in this example, we will pretend that we are still using ES5 🙂</p><p><img src="https://miro.medium.com/max/3724/1*wyG45pJlJ3BCXuMyrkVI3w.jpeg" alt=""></p><p>Now IDE will highlight our JSON props and will notify us if we made a mistake:</p><p><img src="https://miro.medium.com/max/60/1*QuQaD6WIhEZCN-3WoaJWAw.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/2440/1*QuQaD6WIhEZCN-3WoaJWAw.jpeg" alt=""></p><p>‘Edit JSON fragment’ action will open a JSON editor:</p><p><img src="https://miro.medium.com/max/60/1*EOBF2uuqbkOHGcRFLCKYeQ.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/3296/1*EOBF2uuqbkOHGcRFLCKYeQ.jpeg" alt=""></p><p>Now let’s take a look at how it works in IDE:</p><p><img src="https://miro.medium.com/max/2960/1*TT01qmkyUeZSs7ODTXwlDg.gif" alt=""></p><p>⚠️ NOTE: If you don’t see <code>**Edit JSON Fragment**</code> in Context Actions — make sure that you have <code>Editor</code> &gt; <code>Intensions</code> &gt;<code>Edit injected fragment</code> enabled:</p><p><img src="https://miro.medium.com/max/2876/1*k0rbV_m_ryPqVMa9yRWldQ.jpeg" alt=""></p><p>⚠️ <strong>NOTE</strong>: All previous examples were <em>temporary</em> injections, they will reset if you restart the IDE, if you want to set this injection permanently you will need to add a comment above the string:</p><p>// language=JSON</p><p>… or you can just answer “Yes” when IDE will ask you 🙂</p><p><img src="https://miro.medium.com/max/60/1*9J9Wt_oYVy8-n_U-fg8D-A.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/3328/1*9J9Wt_oYVy8-n_U-fg8D-A.jpeg" alt=""></p><p>Same with RegExp:</p><p><img src="https://miro.medium.com/max/60/1*LxzJw3bddBVQsj3XYFSKhw.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/3584/1*LxzJw3bddBVQsj3XYFSKhw.jpeg" alt=""></p><p>Now you will be able to test your regex in the popup window:</p><p><img src="https://miro.medium.com/max/60/1*JS2hOi8pNBAHIDaxxOMEvQ.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/2316/1*JS2hOi8pNBAHIDaxxOMEvQ.jpeg" alt=""></p><h2 id="28-Live-Templates"><a href="#28-Live-Templates" class="headerlink" title="28. Live Templates"></a>28. Live Templates</h2><p>Just like with Macros Live Templates provide a powerful feature of creating your own templates of any code you like, variable/ function/ class/ component/ package declarations.</p><p>You can see available predefined templates by using [ <code>Command+J</code> / ⌘J] hotkey:</p><p><img src="https://miro.medium.com/max/3988/1*pztoEVQ3DKaDtRjiJtk_4g.jpeg" alt=""></p><p>You can create your own templates, just search ‘Live Templates’ in IDE preferences:</p><p><img src="https://miro.medium.com/max/60/1*Po6ohD3E1Wg9bhepMNwaug.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/4548/1*Po6ohD3E1Wg9bhepMNwaug.jpeg" alt=""></p><p>Let’s take o look at some simple example:</p><p><img src="https://miro.medium.com/max/60/1*0EYwLHZQKjSJYvitG_P73Q.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/4548/1*0EYwLHZQKjSJYvitG_P73Q.jpeg" alt=""></p><p>⚠️ <strong>NOTE</strong>: Don’t forget to set the Applicable context so that your templates were shown by IDE only in files that can use those templates (I don’t think that the Jest test fragment should be shown in SQL 🙂):</p><p><img src="https://miro.medium.com/max/60/1*TOBVGAtrk2d8fWzEmpKrpw.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/3228/1*TOBVGAtrk2d8fWzEmpKrpw.jpeg" alt=""></p><p>After applying new templates you can use them by typing your custom abbreviation:</p><p><img src="https://miro.medium.com/freeze/max/60/1*-WNwjz8FENPt4W9se64Fyw.gif?q=20" alt=""></p><p><img src="https://miro.medium.com/max/1972/1*-WNwjz8FENPt4W9se64Fyw.gif" alt=""></p><p>⚠️ <strong>NOTE</strong>: You can edit IDE’s predefined templates as well.</p><h2 id="29-Enable-preview-tab"><a href="#29-Enable-preview-tab" class="headerlink" title="29. Enable preview tab"></a>29. Enable preview tab</h2><p>The preview tab allows you to view files in a single tab one by one without opening each file in a new tab. Any other file that you select will replace the previous one in this tab.</p><p>You can enable this feature in the IDE Preferences:</p><p><img src="https://miro.medium.com/max/4536/1*XiCmUSB_LSmyFicnKMJKLA.png" alt=""></p><p>Or here in the Project window settings:</p><p><img src="https://miro.medium.com/max/60/1*RR6AvyU8VgLFcM03H14G5g.png?q=20" alt=""></p><p><img src="https://miro.medium.com/max/2724/1*RR6AvyU8VgLFcM03H14G5g.png" alt=""></p><p>Now you can preview files without opening them in a new tab by just clicking <strong>one</strong> time on a file, if you click twice — file will be opened in an old-fashioned way.</p><h2 id="30-Quick-preview"><a href="#30-Quick-preview" class="headerlink" title="30. Quick preview"></a>30. Quick preview</h2><p>If you don’t want to enable the ‘Preview Tab’ feature you can just press <code>Space</code> key and IDE will show you the content of the file in a pop-up window without opening any tabs:</p><p><img src="https://miro.medium.com/max/4372/1*Al8xEmoTOKnpiT3GHQv0Cg.png" alt=""></p><h2 id="31-Always-select-opened-file"><a href="#31-Always-select-opened-file" class="headerlink" title="31. Always select opened file"></a>31. Always select opened file</h2><p>If this option is on, WebStorm automatically locates documents that you open in the editor in the current view of this window.</p><p><img src="https://miro.medium.com/max/4372/1*rHs9DHt-HfFL5JJ0DTJd8w.png" alt=""></p><h2 id="32-Jump-to-Navigation-bar"><a href="#32-Jump-to-Navigation-bar" class="headerlink" title="32. Jump to Navigation bar"></a>32. Jump to Navigation bar</h2><p>This feature is useful when you don’t use the NavBar at the top of the IDE:</p><p><img src="https://miro.medium.com/max/4648/1*1JIgoSA2dvyI1PtfHvW8xg.jpeg" alt=""></p><p>You can disable it in <code>View &gt; Appearance &gt; ✔︎ Navigation Bar</code>, but note that the toolbar will disappear too:</p><p><img src="https://miro.medium.com/max/3596/1*4_r52oY3e6A7nq2rN1NsSg.jpeg" alt=""></p><p>You just need to enable it after disabling the Navigation Bar:</p><p><img src="https://miro.medium.com/max/60/1*F-C1YdfRJ3oyPZAn2_yqeg.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/3224/1*F-C1YdfRJ3oyPZAn2_yqeg.jpeg" alt=""></p><p>The point is that your workplace will become cleaner and you could just invoke it only when you needed by using [ <code>Command+Up</code> / ⌘↑] hotkeys “Jump to Navigation Bar” action:</p><p><img src="https://miro.medium.com/max/60/1*zyw8g-bPCYDhPW-ciLHu0g.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/4648/1*zyw8g-bPCYDhPW-ciLHu0g.jpeg" alt=""></p><p>⚠️ <strong>NOTE</strong>: You can use the ‘Show Source’ action by pressing [ <code>Command+Enter</code> ] hotkey that will show you selected folder in the Project window or create a new File/Folder inside of selected folder by pressing [<code>Command+N</code>] hotkey</p><p><img src="https://miro.medium.com/max/60/1*WTpOMpUrSk4vP9hLUPtQtw.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/3904/1*WTpOMpUrSk4vP9hLUPtQtw.jpeg" alt=""></p><p><img src="https://miro.medium.com/max/60/1*_C8_-TfSplCXSArxFKUJVA.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/3360/1*_C8_-TfSplCXSArxFKUJVA.jpeg" alt=""></p><h2 id="33-Editor-tabs"><a href="#33-Editor-tabs" class="headerlink" title="33. Editor tabs"></a>33. Editor tabs</h2><p>If you like working with Tabs enabled, you can place your tab in the Top/ Left/ Bottom/ Right or None. Let’s set the placement to the <strong>Left</strong>:</p><p><img src="https://miro.medium.com/max/3440/1*0iFGM1zsu3kRe-1J-0XXog.jpeg" alt=""></p><p>It will have some benefits, now your tabs will not mess up with names and you will see the whole list with the full names:</p><p><img src="https://miro.medium.com/max/60/1*59NPsVQfgBQNL3a4Y4pluw.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/4372/1*59NPsVQfgBQNL3a4Y4pluw.jpeg" alt=""></p><p>Or you can just disable them and use “Recent files” -&gt; [ <code>Command+E</code> ] hotkey…</p><p><img src="https://miro.medium.com/max/60/1*_OX50T3N1YlykXVxuqTQGw.png?q=20" alt=""></p><p><img src="https://miro.medium.com/max/4372/1*_OX50T3N1YlykXVxuqTQGw.png" alt=""></p><p>… and navigating through the Project window only. You can hide/show it by using [<code>Command+1</code> / ⌘1] hotkey:</p><p><img src="https://miro.medium.com/max/60/1*ggUKxxGUSZz-K6xlXqGnDg.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/4348/1*ggUKxxGUSZz-K6xlXqGnDg.jpeg" alt=""></p><p>You can switch between the Project and Editor tab only with ⌘1 and ESC, let’s take a look how it works:</p><h2 id="34-Create-a-new-file"><a href="#34-Create-a-new-file" class="headerlink" title="34. Create a new file"></a>34. Create a new file</h2><p>If you want to create a new file inside a folder you can just select a folder in which you want to create a file or select a file in that folder and press [<code>Command+N</code> / ⌘N] hotkey:</p><p><img src="https://miro.medium.com/max/4556/1*Zj7FS46uhNFbXz8tXztW5Q.jpeg" alt=""></p><p>⚠️ <strong>NOTE</strong>: If you want to create a file inside folders you can create it by separate folders with use of a a slash: <code>folder1/folder2/folder3/**File.ts**</code>:</p><p><img src="https://miro.medium.com/max/4968/1*bK7PyRxJNpV970PK6ybNDg.jpeg" alt=""></p><p>⚠️ <strong>NOTE</strong>: If you open a file for editing, and you want to create a new file inside of a current folder you can use the ‘<strong><em>New in This Directory</em></strong>’ action [<code>Control+Option+N</code> / ⌃⌥N] hotkey:</p><p><img src="https://miro.medium.com/max/4236/1*PD24YU9rPULkQPCBjEWUmw.jpeg" alt=""></p><h2 id="35-Create-file-template"><a href="#35-Create-file-template" class="headerlink" title="35. Create file template"></a>35. Create file template</h2><p>You can create your own File Templates so that when you ‘Create new file’ your own template will be in that list.</p><p>Search for the <code>file and code templates</code> in ‘Search everywhere’ window:</p><p><img src="https://miro.medium.com/max/4556/1*GJnFc6n9mbzPtHvRBMx-6Q.jpeg" alt=""></p><p>Or find it in IDE’s Preferences window:</p><p><img src="https://miro.medium.com/max/4540/1*5rhShZVVrzHNLSzNb7Vrbw.jpeg" alt=""></p><p>After creating your template, when you use “New in this directory” you will see your own template, and you can specify additional props values:</p><p><img src="https://miro.medium.com/max/3972/1*FKLx6Fso_oYIpy487FsRNA.jpeg" alt=""></p><p><img src="https://miro.medium.com/max/3972/1*CPQ_vMBMCqnG61_Leu895A.jpeg" alt=""></p><p>🎉 Awesome.</p><h2 id="36-Hide-all-windows"><a href="#36-Hide-all-windows" class="headerlink" title="36. Hide all windows"></a>36. Hide all windows</h2><p>If you use [ <code>Shift+Command+F12</code> / ⇧⌘F12] hotkey → it will hide all opened windows except the editor window, if you press the hotkey again → it will restore all hidden windows:</p><p><img src="https://miro.medium.com/max/1968/1*7-0Y9PpaU5zoMaLTdoGT-A.gif" alt=""></p><h2 id="37-Resize-active-window"><a href="#37-Resize-active-window" class="headerlink" title="37. Resize active window"></a>37. Resize active window</h2><p>You can resize the active window without using a mouse: Stretch to Right/Letf by using [<code>Shift+Command+Left/Right</code>] hotkey:</p><p><img src="https://miro.medium.com/max/1968/1*bHHcANLAvnd4sgpb_K0bag.gif" alt=""></p><h2 id="38-Select-and-move-lines"><a href="#38-Select-and-move-lines" class="headerlink" title="38. Select and move lines"></a>38. Select and move lines</h2><p>Most of the time we need to move lines from one place in code to another. Stop using copy-paste actions. You can select lines by pressing [<code>Shift+Up/Down</code>] hotkey:</p><p><img src="https://miro.medium.com/max/2536/1*el95GoiyBCTNzmjoQts2Tw.gif" alt=""></p><p>… and after that press <code>Option</code>, so your combination would become [<code>Shift+Option+Up/Down</code>] and move lines in the current file:</p><p><img src="https://miro.medium.com/freeze/max/60/1*CQynRP04oWXRET1S9zgp6A.gif?q=20" alt=""></p><p><img src="https://miro.medium.com/max/2536/1*CQynRP04oWXRET1S9zgp6A.gif" alt=""></p><h2 id="39-Move-statement"><a href="#39-Move-statement" class="headerlink" title="39. Move statement"></a>39. Move statement</h2><p>If you want to move a function you can just use “Move statement” action by pressing Shift + Command + Up/Down. In that case IDE will move a function without selecting it:</p><p><img src="https://miro.medium.com/max/2596/1*yAE2H0a02PoA4nRcLKvcMA.gif" alt=""></p><h2 id="40-Select-line-fragment-function-class-package"><a href="#40-Select-line-fragment-function-class-package" class="headerlink" title="40. Select line, fragment, function, class, package"></a>40. Select line, fragment, function, class, package</h2><p>What if you want to select a specific code fragment, maybe a part of a function, or some props or a class or entire package? You can do that by using “Extend/Shrink Selection” action by pressing Option + Up/Down:</p><h2 id="41-Clipboard-history"><a href="#41-Clipboard-history" class="headerlink" title="41. Clipboard history"></a>41. Clipboard history</h2><p>How many times you missed your keys and instead of using [<code>Command+V</code>] (copy) after [<code>Command+X</code>] (cut), you used [<code>Command+X</code>] again? 🤦‍♂</p><p>In that case, you will lose your Clipboard history, but not if you are using JetBrains IDEs 🙂.</p><p>If you used [<code>Command+X</code>] twice you can press [<code>Shift+Command+V</code>] and IDE will show you all your Copy/Cut history you used:</p><p><img src="https://miro.medium.com/max/5108/1*GA6BkL53Lmw354s1xsRVsw.jpeg" alt=""></p><h2 id="42-Duplicate-a-line-selection"><a href="#42-Duplicate-a-line-selection" class="headerlink" title="42. Duplicate a line/selection"></a>42. Duplicate a line/selection</h2><p>If you want to create a copy of a code fragment you don’t need to use Copy/Paste functionality, you can just use the “Duplicate Line” action by [<code>Command+D</code>] hotkey:</p><p><img src="https://miro.medium.com/max/2536/1*2yMwu-pbYLgJbvsEmdr0jQ.gif" alt=""></p><p>If will perfectly work for selections too:</p><p><img src="https://miro.medium.com/freeze/max/60/1*Wd2kJvkwkHmgK_PprU3Oyg.gif?q=20" alt=""></p><p><img src="https://miro.medium.com/max/2536/1*Wd2kJvkwkHmgK_PprU3Oyg.gif" alt=""></p><h2 id="43-Multiple-cursors-by-mouse-click"><a href="#43-Multiple-cursors-by-mouse-click" class="headerlink" title="43. Multiple cursors by mouse click"></a>43. Multiple cursors by mouse click</h2><p>You can set multiple cursors by pressing <code>Option</code>/<code>Alt</code> key with the <em>Mouse</em> click:</p><p><img src="https://miro.medium.com/max/2536/1*wUhTKb5BJW4gUkhgVaI7Ig.gif" alt=""></p><h2 id="44-Multiple-cursors-by-next-Occurrence"><a href="#44-Multiple-cursors-by-next-Occurrence" class="headerlink" title="44. Multiple cursors by next Occurrence"></a>44. Multiple cursors by next Occurrence</h2><p>[<code>Control+Command+G</code>] hotkey will select only <strong><em>next</em></strong> Occurrence. This is definitely will be in handy:</p><p><img src="https://miro.medium.com/max/5516/1*q3a6l0gZqEg_o6CKDSG0Cg.jpeg" alt=""></p><p>Check this out:</p><p><img src="https://miro.medium.com/freeze/max/60/1*Rj_RkNyZ4SVtiPkbLcowhQ.gif?q=20" alt=""></p><p><img src="https://miro.medium.com/max/2016/1*Rj_RkNyZ4SVtiPkbLcowhQ.gif" alt=""></p><h2 id="45-Multiple-cursors-Select-All-Occurrences"><a href="#45-Multiple-cursors-Select-All-Occurrences" class="headerlink" title="45. Multiple cursors. Select All Occurrences"></a>45. Multiple cursors. Select All Occurrences</h2><p>[<code>Control+Command+G</code>] hotkey will set multiple cursors at every occurrence in the code:</p><p><img src="https://miro.medium.com/max/6068/1*ihiUXooE9wo6goXF4T8bqw.jpeg" alt=""></p><h2 id="46-Parameter-info"><a href="#46-Parameter-info" class="headerlink" title="46. Parameter info"></a>46. Parameter info</h2><p>If you forgot what params you need to pass to the function, you don’t need to delete brackets and set them again.</p><p>You can just use the [<code>Command+P</code>] hotkey</p><p><img src="https://miro.medium.com/max/4032/1*7RgicV1nUfNU4iDHgOIpuw.jpeg" alt=""></p><h2 id="47-Reformat-code"><a href="#47-Reformat-code" class="headerlink" title="47. Reformat code"></a>47. Reformat code</h2><p>You can reformat all file by using the “Reformat code” action via [<code>Option+Command+L</code>] hotkey.</p><p><img src="https://miro.medium.com/max/2880/1*uC90zOA6q7aGnVBb1TOB8w.gif" alt=""></p><p>⚠️ <strong>NOTE</strong>: If you want to reformat only specific lines you can select required lines and use the “Auto-Indent lines” action via [Control+Option+I] hotkey:</p><p>You can open ‘Code cleanup’ preferences by searching code cleanup in the <em>Search everywhere</em>:</p><p><img src="https://miro.medium.com/max/60/1*CKEHIriS9bNYjQqsLuW6oQ.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/3392/1*CKEHIriS9bNYjQqsLuW6oQ.jpeg" alt=""></p><p><img src="https://miro.medium.com/max/60/1*9nNZEwlOHG-WSc4ATTphpQ.jpeg?q=20" alt=""></p><p>!Bog`, and IDE will suggest with a completion list:</p><p><img src="https://miro.medium.com/max/2552/1*RKvztfihm_mt__kieo7mUw.gif" alt=""></p><h2 id="52-Surround-with"><a href="#52-Surround-with" class="headerlink" title="52. Surround with"></a>52. Surround with</h2><p>‘Surround With’ popup will appear when you use [<code>Option+Command+T</code>] hotkey:</p><p><img src="https://miro.medium.com/max/3988/1*PrWDOw4CIG4C3V0YNVb5gA.jpeg" alt=""></p><h2 id="53-Create-constructor-getters-setters-override-methods"><a href="#53-Create-constructor-getters-setters-override-methods" class="headerlink" title="53. Create constructor, getters, setters, override methods"></a>53. Create constructor, getters, setters, override methods</h2><p>If you created a class with some fields, you don’t need to create constructors, getters, setters, override methods manually → IDE could do that for you:</p><p>[ <code>Command+N</code> ] or [ <code>Control+Enter</code> ]:</p><p><img src="https://miro.medium.com/max/2144/1*gGZV0T2ZfaIHLOFs0Gf2Fw.jpeg" alt=""></p><p>All this is generated:</p><h2 id="54-Postfix-code-completion"><a href="#54-Postfix-code-completion" class="headerlink" title="54. Postfix code completion"></a>54. Postfix code completion</h2><p>Postfix code completion helps you reduce backward caret jumps as you write code. You can transform an already-typed expression to a different one based on a postfix you type after the dot, the type of expression, and its context.</p><p><img src="https://miro.medium.com/max/2864/1*bLz2zGRg3lc8aFy6F8bYNA.jpeg" alt=""></p><p>List of available completions for user prop:</p><p><img src="https://miro.medium.com/max/52/1*-6X29gQ-oXSTdsS2g7JQtA.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/2552/1*-6X29gQ-oXSTdsS2g7JQtA.jpeg" alt=""></p><p>You can create your own completions in the IDE Preferences:</p><p><img src="https://miro.medium.com/max/60/1*gWJD_ay_aWvCSY1iqNiacw.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/2900/1*gWJD_ay_aWvCSY1iqNiacw.jpeg" alt=""></p><h2 id="55-Show-quick-documentation"><a href="#55-Show-quick-documentation" class="headerlink" title="55. Show quick documentation"></a>55. Show quick documentation</h2><p>You can see the documentation in the popup window by using <code>F1</code> key:</p><p><img src="https://miro.medium.com/max/4884/1*wrKEf9Z_HDZHsFKFNmW5hg.jpeg" alt=""></p><p>Quick Documentation action screenshot</p><h2 id="56-Refactor-this"><a href="#56-Refactor-this" class="headerlink" title="56. Refactor this"></a>56. Refactor this</h2><p>You don’t need to remember all IDE Refactor hotkeys, you can just use [<code>Control+T</code>] hotkey for showing all available refactor actions, and you can use them right away:</p><p><img src="https://miro.medium.com/max/4884/1*ks-08Qu07TI4MUJQ1MmXaQ.jpeg" alt=""></p><h2 id="57-Run-the-current-file"><a href="#57-Run-the-current-file" class="headerlink" title="57. Run the current file"></a>57. Run the current file</h2><p>If you have a test file, you can run all tests in it by using [<code>Control+Shift+R</code>] hotkey:</p><p><img src="https://miro.medium.com/max/4884/1*E4UlCGRP_GaFuFZ1_JKWTA.jpeg" alt=""></p><h2 id="58-Scratch-files"><a href="#58-Scratch-files" class="headerlink" title="58. Scratch files"></a>58. Scratch files</h2><p>Sometimes you may need to create temporary notes or draft up some code outside of the project context. Instead of switching to a different application for this purpose, you can use <em>scratch files</em> and <em>scratch buffers</em>.</p><p>You can run them just like if they were included in the Project:</p><p><img src="https://miro.medium.com/max/4012/1*svJkLRtuTYViyueP4-gYeA.jpeg" alt=""></p><h2 id="59-Creating-your-own-menu-list"><a href="#59-Creating-your-own-menu-list" class="headerlink" title="59. Creating your own menu list"></a>59. Creating your own menu list</h2><p>If you navigate to IDE’s <code>Preferences</code> &gt; <code>Quick Lists</code>, you could add your own menu with actions you like the most:</p><p><img src="https://miro.medium.com/max/3864/1*7UozXQg9XYLlq8JLixcKwA.jpeg" alt=""></p><p>After creating you list, navigate to the <code>Keymap</code>, search for your list name, and assign a new Keyboard Shortcut:</p><p><img src="https://miro.medium.com/max/60/1*OKCHoCpvlPROzgQjr7SEJg.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/4548/1*OKCHoCpvlPROzgQjr7SEJg.jpeg" alt=""></p><p>Now you will be able to invoke your list by using your shortcut:</p><p><img src="https://miro.medium.com/max/60/1*yAmi_mJ745-6ngT-VWszMw.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/1756/1*yAmi_mJ745-6ngT-VWszMw.jpeg" alt=""></p><h2 id="60-Keymap-reference"><a href="#60-Keymap-reference" class="headerlink" title="60. Keymap reference"></a>60. Keymap reference</h2><p>If you want to see all available hotkey in your IDE, or you forgot some of them, you can search for Keymap reference in the ‘Search everywhere’:</p><p><img src="https://miro.medium.com/max/3432/1*rqh8-rM0ANHVDMHJaCBZHA.jpeg" alt=""></p><p>It will open a PDF file with all available hotkeys and actions:</p><p><img src="https://miro.medium.com/max/60/1*Xqn9QIduQ5xZjt-pM_86Kg.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/3524/1*Xqn9QIduQ5xZjt-pM_86Kg.jpeg" alt=""></p><h2 id="Related-storiesasic-Code-Completion’-at-it-will-provide-you-a-list-of-a-proper-variable-name-Control-Space-hotkey"><a href="#Related-storiesasic-Code-Completion’-at-it-will-provide-you-a-list-of-a-proper-variable-name-Control-Space-hotkey" class="headerlink" title="Related storiesasic Code Completion’ at it will provide you a list of a proper variable name, [ Control+Space ] hotkey:"></a>Related storiesasic Code Completion’ at it will provide you a list of a proper variable name, [ <code>Control+Space</code> ] hotkey:</h2><p><img src="https://miro.medium.com/max/4368/1*QANlqjYMPT8Y-rD4xpsooA.jpeg" alt=""></p><h2 id="49-Code-completion-Basic-completion"><a href="#49-Code-completion-Basic-completion" class="headerlink" title="49. Code completion. Basic completion"></a>49. Code completion. Basic completion</h2><p>‘Basic Completion’ will show you all available functions and variables you can use for completion, [ <code>Control+Space</code> ] hotkey:</p><p><img src="https://miro.medium.com/max/5824/1*JNMl9IfO1HyULSMDFDDEQA.jpeg" alt=""></p><h2 id="50-Code-completion-Smart-completion"><a href="#50-Code-completion-Smart-completion" class="headerlink" title="50. Code completion. Smart completion"></a>50. Code completion. Smart completion</h2><p>Smart Completion will analyze your code and will narrow down the suggestion list to what makes sense, [ <code>Control+Shift+Space</code> ] hotkey:</p><p><img src="https://miro.medium.com/max/6400/1*k3vm-szBseBGJYYoGv4w_Q.jpeg" alt=""></p><h2 id="51-Code-completion-without-a-ref"><a href="#51-Code-completion-without-a-ref" class="headerlink" title="51. Code completion without a ref"></a>51. Code completion without a ref</h2><p>If you want to type a <code>console.log</code> you can just type `l](<a href="https://miro.medium.com/max/2528/1*9nNZEwlOHG-WSc4ATTphpQ.jpeg" target="_blank" rel="noopener">https://miro.medium.com/max/2528/1*9nNZEwlOHG-WSc4ATTphpQ.jpeg</a>)</p><p>You can change code style in those Preferences:</p><p><img src="https://miro.medium.com/max/4548/1*pBzFVFf6wKisp3fUOiQhLw.jpeg" alt=""></p><p>⚠️ <strong>NOTE</strong>: You can adjust code styles interactively by selecting your code fragment and select ‘_Adjust code style setting_’ in the ‘_Show Context Actions_’, [<code>Option+Enter</code>] hotkey:</p><p><img src="https://miro.medium.com/max/4556/1*W0c5CiHh-J1rl0P2dxV10A.jpeg" alt=""></p><p>Let’s have a look at how it works in the IDE:</p><p><img src="https://miro.medium.com/freeze/max/60/1*HLwutLBLw9GJGGYNHK6k9A.gif?q=20" alt=""></p><p><img src="https://miro.medium.com/max/2256/1*HLwutLBLw9GJGGYNHK6k9A.gif" alt=""></p><p>GIF. Adjust Code Style Settings dynamically</p><h2 id="48-Code-completion-Variable-name"><a href="#48-Code-completion-Variable-name" class="headerlink" title="48. Code completion. Variable name"></a>48. Code completion. Variable name</h2><p>If you want to rename a variable you can use a ‘[(<a href="https://miro.medium.com/max/4408/1*zTLGb_2OZA_GgRwQumxtdg.jpeg" target="_blank" rel="noopener">https://miro.medium.com/max/4408/1*zTLGb_2OZA_GgRwQumxtdg.jpeg</a>)</p><p>If you click a file in a “Commit changes” window, IDE will open a Compare Changelist window, where you can review changes and even exclude parts of code that should not be committed:</p><p><img src="https://miro.medium.com/max/60/1*gepMempOih7CBu98E9CIWA.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/4220/1*gepMempOih7CBu98E9CIWA.jpeg" alt=""></p><p>IDE will show you the <code>changed</code> checkbox icon with the number of committed changes:</p><p><img src="https://miro.medium.com/max/60/1*9ugU-kx4whv5wljXgNgtrA.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/4408/1*9ugU-kx4whv5wljXgNgtrA.jpeg" alt=""></p><h2 id="17-Run-menu"><a href="#17-Run-menu" class="headerlink" title="17. Run menu"></a>17. Run menu</h2><p>Every file, test, script you run IDE adds those into its configurations (if you saved those they will be available after IDE restart):</p><p><img src="https://miro.medium.com/max/3432/1*2nHTncwVt9bl56v5ZwX7ew.jpeg" alt=""></p><p>… for saving configuration use <code>Edit Configuration</code> &gt; <code>Save Configuration</code> icon:</p><p><img src="https://miro.medium.com/max/60/1*CxQrFUPsE0LQ74tRpiDlqA.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/3760/1*CxQrFUPsE0LQ74tRpiDlqA.jpeg" alt=""></p><p>But the cool thing is that you can open a pop-up window with all your saved configurations by pressing <code>Control+Option+R</code> and run them without navigating elsewhere:</p><p><img src="https://miro.medium.com/max/60/1*jDk3gwisR-z_yOmnLfzXaA.jpeg?q=20" alt=""></p><p><img src="https://miro.medium.com/max/3432/1*jDk3gwisR-z_yOmnLfzXaA.jpeg" alt=""></p><h2 id="18-Optimize-imports"><a href="#18-Optimize-imports" class="headerlink" title="18. Optimize imports"></a>18. Optimize imports</h2><p>You don’t have to manually delete unused imports from your file:</p><p><img src="https://miro.medium.com/max/4416/1*uCFCnNId61y5kggym_yngw.jpeg" alt=""></p><p>You [</p>]]></content>
      
      
      <categories>
          
          <category> mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>postcss</title>
      <link href="/2021/06/13/postcss/"/>
      <url>/2021/06/13/postcss/</url>
      
        <content type="html"><![CDATA[<blockquote><p>练习可以用 <a href="http://plnkr.co/" target="_blank" rel="noopener">http://plnkr.co/</a> 感觉还挺好<br>原文 :<a href="https://github.com/postcss/postcss/blob/main/docs/README-cn.md" target="_blank" rel="noopener">https://github.com/postcss/postcss/blob/main/docs/README-cn.md</a></p></blockquote><h1 id="PostCSS"><a href="#PostCSS" class="headerlink" title="PostCSS "></a>PostCSS <a href="https://gitter.im/postcss/postcss" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/Gitter-Join_the_PostCSS_chat-brightgreen.svg" alt="Gitter"></a></h1><p><img align="right" width="95" height="95"     alt="哲学家的石头 - PostCSS 的 logo"     src="https://postcss.org/logo.svg"></p><p>PostCSS 是一个允许使用 JS 插件转换样式的工具。<br>这些插件可以检查（lint）你的 CSS，支持 CSS Variables 和 Mixins，<br>编译尚未被浏览器广泛支持的先进的 CSS 语法，内联图片，以及其它很多优秀的功能。</p><p>PostCSS 在工业界被广泛地应用，其中不乏很多有名的行业领导者，如：维基百科，Twitter，阿里巴巴，<br>JetBrains。PostCSS 的 <a href="https://github.com/postcss/autoprefixer" target="_blank" rel="noopener">Autoprefixer</a> 插件是最流行的 CSS 处理工具之一。</p><p>PostCSS 接收一个 CSS 文件并提供了一个 API 来分析、修改它的规则（通过把 CSS 规则转换成一个<a href="https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%AA%9E%E6%B3%95%E6%A8%B9" target="_blank" rel="noopener">抽象语法树</a>的方式）。在这之后，这个 API 便可被许多<a href="https://github.com/postcss/postcss/blob/main/README-cn.md#%E6%8F%92%E4%BB%B6" target="_blank" rel="noopener">插件</a>利用来做有用的事情，比如寻错或自动添加 CSS vendor 前缀。</p><p><strong>Twitter 账号:</strong> <a href="https://twitter.com/postcss" target="_blank" rel="noopener">@postcss</a><br><br><strong>支持 / 讨论:</strong> <a href="https://gitter.im/postcss/postcss" target="_blank" rel="noopener">Gitter</a><br></p><a id="more"></a><p>如果需要 PostCSS 商业支持（如咨询，提升公司的前端文化，<br>PostCSS 插件），请联系 <a href="https://evilmartians.com/?utm_source=postcss" target="_blank" rel="noopener">Evil Martians</a><br>邮箱 <a href="mailto:&#x73;&#117;&#x72;&#x72;&#x65;&#x6e;&#100;&#101;&#114;&#x40;&#x65;&#x76;&#105;&#108;&#x6d;&#97;&#x72;&#116;&#x69;&#x61;&#x6e;&#115;&#x2e;&#99;&#111;&#109;" target="_blank" rel="noopener">&#x73;&#117;&#x72;&#x72;&#x65;&#x6e;&#100;&#101;&#114;&#x40;&#x65;&#x76;&#105;&#108;&#x6d;&#97;&#x72;&#116;&#x69;&#x61;&#x6e;&#115;&#x2e;&#99;&#111;&#109;</a>。</p><a href="https://evilmartians.com/?utm_source=postcss" target="_blank" rel="noopener">  <img src="https://evilmartians.com/badges/sponsored-by-evil-martians.svg"       alt="由 Evil Martians 赞助" width="236" height="54"></a><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>截止到目前，PostCSS 有 200 多个插件。你可以在 <a href="https://github.com/postcss/postcss/blob/main/docs/plugins.md" target="_blank" rel="noopener">插件列表</a> 或 <a href="http://postcss.parts" target="_blank" rel="noopener">搜索目录</a> 找到它们。<br>下方的列表是我们最喜欢的插件 - 它们很好地演示了我们可以用 PostCSS 做些什么。</p><p>如果你有任何新的想法，<a href="https://github.com/postcss/postcss/blob/main/docs/writing-a-plugin.md" target="_blank" rel="noopener">开发 PostCSS 插件</a> 非常简单易上手。</p><h3 id="解决全局-CSS-的问题"><a href="#解决全局-CSS-的问题" class="headerlink" title="解决全局 CSS 的问题"></a>解决全局 CSS 的问题</h3><ul><li><a href="https://github.com/postcss/postcss-use" target="_blank" rel="noopener"><code>postcss-use</code></a> 允许你在 CSS 里明确地设置 PostCSS 插件，并且只在当前文件执行它们。</li><li><a href="https://github.com/outpunk/postcss-modules" target="_blank" rel="noopener"><code>postcss-modules</code></a> 和 <a href="https://github.com/gajus/react-css-modules" target="_blank" rel="noopener"><code>react-css-modules</code></a> 可以自动以组件为单位隔绝 CSS 选择器。</li><li><a href="https://github.com/maximkoretskiy/postcss-autoreset" target="_blank" rel="noopener"><code>postcss-autoreset</code></a> 是全局样式重置的又一个选择，它更适用于分离的组件。</li><li><a href="https://github.com/maximkoretskiy/postcss-initial" target="_blank" rel="noopener"><code>postcss-initial</code></a> 添加了 <code>all: initial</code> 的支持，重置了所有继承的样式。</li><li><a href="https://github.com/ausi/cq-prolyfill" target="_blank" rel="noopener"><code>cq-prolyfill</code></a> 添加了容器查询的支持，允许添加响应于父元素宽度的样式.</li></ul><h3 id="提前使用先进的-CSS-特性"><a href="#提前使用先进的-CSS-特性" class="headerlink" title="提前使用先进的 CSS 特性"></a>提前使用先进的 CSS 特性</h3><ul><li><a href="https://github.com/postcss/autoprefixer" target="_blank" rel="noopener"><code>autoprefixer</code></a> 添加了 vendor 浏览器前缀，它使用 Can I Use 上面的数据。</li><li><a href="https://github.com/jonathantneal/postcss-preset-env" target="_blank" rel="noopener"><code>postcss-preset-env</code></a> 允许你使用未来的 CSS 特性。</li></ul><h3 id="更佳的-CSS-可读性"><a href="#更佳的-CSS-可读性" class="headerlink" title="更佳的 CSS 可读性"></a>更佳的 CSS 可读性</h3><ul><li><a href="https://github.com/jonathantneal/precss" target="_blank" rel="noopener"><code>precss</code></a> 囊括了许多插件来支持类似 Sass 的特性，比如 CSS 变量，套嵌，mixins 等。</li><li><a href="https://github.com/hudochenkov/postcss-sorting" target="_blank" rel="noopener"><code>postcss-sorting</code></a> 给规则的内容以及@规则排序。</li><li><a href="https://github.com/ismamz/postcss-utilities" target="_blank" rel="noopener"><code>postcss-utilities</code></a> 囊括了最常用的简写方式和书写帮助。</li><li><a href="https://github.com/jonathantneal/postcss-short" target="_blank" rel="noopener"><code>short</code></a> 添加并拓展了大量的缩写属性。</li></ul><h3 id="图片和字体"><a href="#图片和字体" class="headerlink" title="图片和字体"></a>图片和字体</h3><ul><li><a href="https://github.com/assetsjs/postcss-assets" target="_blank" rel="noopener"><code>postcss-assets</code></a> 可以插入图片尺寸和内联文件。</li><li><a href="https://github.com/2createStudio/postcss-sprites" target="_blank" rel="noopener"><code>postcss-sprites</code></a> 能生成雪碧图。</li><li><a href="https://github.com/jonathantneal/postcss-font-magician" target="_blank" rel="noopener"><code>font-magician</code></a> 生成所有在 CSS 里需要的 <code>@font-face</code> 规则。</li><li><a href="https://github.com/TrySound/postcss-inline-svg" target="_blank" rel="noopener"><code>postcss-inline-svg</code></a> 允许你内联 SVG 并定制它的样式。</li><li><a href="https://github.com/jonathantneal/postcss-write-svg" target="_blank" rel="noopener"><code>postcss-write-svg</code></a> 允许你在 CSS 里写简单的 SVG。</li></ul><h3 id="提示器（Linters）"><a href="#提示器（Linters）" class="headerlink" title="提示器（Linters）"></a>提示器（Linters）</h3><ul><li><a href="https://github.com/stylelint/stylelint" target="_blank" rel="noopener"><code>stylelint</code></a> 是一个模块化的样式提示器。</li><li><a href="https://github.com/morishitter/stylefmt" target="_blank" rel="noopener"><code>stylefmt</code></a> 是一个能根据 <code>stylelint</code> 规则自动优化 CSS 格式的工具。</li><li><a href="https://github.com/anandthakker/doiuse" target="_blank" rel="noopener"><code>doiuse</code></a> 提示 CSS 的浏览器支持性，使用的数据来自于 Can I Use。</li><li><a href="https://github.com/SlexAxton/css-colorguard" target="_blank" rel="noopener"><code>colorguard</code></a> 帮助你保持一个始终如一的调色板。</li></ul><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><ul><li><a href="https://github.com/vkalinichev/postcss-rtl" target="_blank" rel="noopener"><code>postcss-rtl</code></a> 在单个 CSS 文件里组合了两个方向（左到右，右到左）的样式。</li><li><a href="http://cssnano.co" target="_blank" rel="noopener"><code>cssnano</code></a> 是一个模块化的 CSS 压缩器。</li><li><a href="https://github.com/peterramsing/lost" target="_blank" rel="noopener"><code>lost</code></a> 是一个功能强大的 <code>calc()</code> 栅格系统。</li><li><a href="https://github.com/MohammadYounes/rtlcss" target="_blank" rel="noopener"><code>rtlcss</code></a> 镜像翻转 CSS 样式，适用于 right-to-left 的应用场景。</li></ul><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>PostCSS 可以转化样式到任意语法，不仅仅是 CSS。<br>如果还没有支持你最喜欢的语法，你可以编写一个解释器以及（或者）一个 stringifier 来拓展 PostCSS。</p><ul><li><a href="https://github.com/postcss/sugarss" target="_blank" rel="noopener"><code>sugarss</code></a> 是一个以缩进为基础的语法，类似于 Sass 和 Stylus。</li><li><a href="https://github.com/gucong3000/postcss-syntax" target="_blank" rel="noopener"><code>postcss-syntax</code></a> 通过文件扩展名自动切换语法。</li><li><a href="https://github.com/gucong3000/postcss-html" target="_blank" rel="noopener"><code>postcss-html</code></a> 解析类 HTML 文件里<code>&lt;style&gt;</code>标签中的样式。</li><li><a href="https://github.com/gucong3000/postcss-markdown" target="_blank" rel="noopener"><code>postcss-markdown</code></a> 解析 Markdown 文件里代码块中的样式。</li><li><a href="https://github.com/gucong3000/postcss-jsx" target="_blank" rel="noopener"><code>postcss-jsx</code></a> 解析源文件里模板或对象字面量中的 CSS。</li><li><a href="https://github.com/gucong3000/postcss-styled" target="_blank" rel="noopener"><code>postcss-styled</code></a> 解析源文件里模板字面量中的 CSS。</li><li><a href="https://github.com/postcss/postcss-scss" target="_blank" rel="noopener"><code>postcss-scss</code></a> 允许你使用 SCSS _(但并没有将 SCSS 编译到 CSS)_。</li><li><a href="https://github.com/AleshaOleg/postcss-sass" target="_blank" rel="noopener"><code>postcss-sass</code></a> 允许你使用 Sass _(但并没有将 Sass 编译到 CSS)_。</li><li><a href="https://github.com/webschik/postcss-less" target="_blank" rel="noopener"><code>postcss-less</code></a> 允许你使用 Less _(但并没有将 LESS 编译到 CSS)_。</li><li><a href="https://github.com/Crunch/postcss-less" target="_blank" rel="noopener"><code>postcss-less-engine</code></a> 允许你使用 Less _(并且使用真正的 Less.js 把 LESS 编译到 CSS)_。</li><li><a href="https://github.com/postcss/postcss-js" target="_blank" rel="noopener"><code>postcss-js</code></a> 允许你在 JS 里编写样式，或者转换成 React 的内联样式／Radium／JSS。</li><li><a href="https://github.com/postcss/postcss-safe-parser" target="_blank" rel="noopener"><code>postcss-safe-parser</code></a> 查找并修复 CSS 语法错误。</li><li><a href="https://github.com/ben-eb/midas" target="_blank" rel="noopener"><code>midas</code></a> 将 CSS 字符串转化成高亮的 HTML。</li></ul><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><ul><li><a href="http://julian.io/some-things-you-may-think-about-postcss-and-you-might-be-wrong" target="_blank" rel="noopener">一些你对 PostCSS 可能产生的误解</a></li><li><a href="http://davidtheclark.com/its-time-for-everyone-to-learn-about-postcss" target="_blank" rel="noopener">PostCSS 究竟是什么，是做什么的</a></li><li><a href="http://webdesign.tutsplus.com/series/postcss-deep-dive--cms-889" target="_blank" rel="noopener">PostCSS 指南</a></li></ul><p>你可以在 <a href="https://github.com/jjaderg/awesome-postcss" target="_blank" rel="noopener">awesome-postcss</a> 列表里找到更多优秀的文章和视频。</p><h2 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h2><ul><li>Alex Libby, Packt 的 <a href="https://www.packtpub.com/web-development/mastering-postcss-web-design" target="_blank" rel="noopener">网页设计之精通 PostCSS</a> (2016 年 6 月)</li></ul><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>你可以通过简单的两步便开始使用 PostCSS：</p><ol><li>在你的构建工具中查找并添加 PostCSS 拓展。</li><li><a href="http://postcss.parts" target="_blank" rel="noopener">选择插件</a>并将它们添加到你的 PostCSS 处理队列中。</li></ol><h3 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h3><p>在 <code>webpack.config.js</code> 里使用 <a href="https://github.com/postcss/postcss-loader" target="_blank" rel="noopener"><code>postcss-loader</code></a> :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">"style-loader"</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">"css-loader"</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              importLoaders: <span class="number">1</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">"postcss-loader"</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后创建 <code>postcss.config.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [<span class="built_in">require</span>(<span class="string">"precss"</span>), <span class="built_in">require</span>(<span class="string">"autoprefixer"</span>)],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a>Gulp</h3><p>使用 <a href="https://github.com/postcss/gulp-postcss" target="_blank" rel="noopener"><code>gulp-postcss</code></a> 和 <a href="https://github.com/floridoo/gulp-sourcemaps" target="_blank" rel="noopener"><code>gulp-sourcemaps</code></a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">"css"</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> postcss = <span class="built_in">require</span>(<span class="string">"gulp-postcss"</span>);</span><br><span class="line">  <span class="keyword">const</span> sourcemaps = <span class="built_in">require</span>(<span class="string">"gulp-sourcemaps"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">"src/**/*.css"</span>)</span><br><span class="line">    .pipe(sourcemaps.init())</span><br><span class="line">    .pipe(postcss([<span class="built_in">require</span>(<span class="string">"precss"</span>), <span class="built_in">require</span>(<span class="string">"autoprefixer"</span>)]))</span><br><span class="line">    .pipe(sourcemaps.write(<span class="string">"."</span>))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">"build/"</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="npm-run-CLI"><a href="#npm-run-CLI" class="headerlink" title="npm run / CLI"></a>npm run / CLI</h3><p>如果需要在你的命令行界面或 npm 脚本里使用 PostCSS，你可以使用 <a href="https://github.com/postcss/postcss-cli" target="_blank" rel="noopener"><code>postcss-cli</code></a>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">postcss --use autoprefixer -c options.json -o main.css css/*.css</span><br></pre></td></tr></table></figure><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><p>如果你想编译浏览器里的 CSS 字符串（例如像 CodePen 一样的在线编辑器），<br>只需使用 <a href="http://browserify.org/" target="_blank" rel="noopener">Browserify</a> 或 <a href="https://webpack.github.io/" target="_blank" rel="noopener">webpack</a>。它们会把 PostCSS 和插件文件打包进一个独立文件。</p><p>如果想要在 React 内联样式／JSS／Radium／其它 <a href="https://github.com/MicheleBertoli/css-in-js" target="_blank" rel="noopener">CSS-in-JS</a> 里使用 PostCSS，<br>你可以用 <a href="https://github.com/postcss/postcss-js" target="_blank" rel="noopener"><code>postcss-js</code></a> 然后转换样式对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> postcss = <span class="built_in">require</span>(<span class="string">"postcss-js"</span>);</span><br><span class="line"><span class="keyword">var</span> prefixer = postcss.sync([<span class="built_in">require</span>(<span class="string">"autoprefixer"</span>)]);</span><br><span class="line"></span><br><span class="line">prefixer(&#123; <span class="attr">display</span>: <span class="string">"flex"</span> &#125;); <span class="comment">//=&gt; &#123; display: ['-webkit-box', '-webkit-flex', '-ms-flexbox', 'flex'] &#125;</span></span><br></pre></td></tr></table></figure><h3 id="运行器"><a href="#运行器" class="headerlink" title="运行器"></a>运行器</h3><ul><li><strong>Grunt</strong>: <a href="https://github.com/nDmitry/grunt-postcss" target="_blank" rel="noopener"><code>grunt-postcss</code></a></li><li><strong>HTML</strong>: <a href="https://github.com/posthtml/posthtml-postcss" target="_blank" rel="noopener"><code>posthtml-postcss</code></a></li><li><strong>Stylus</strong>: <a href="https://github.com/seaneking/poststylus" target="_blank" rel="noopener"><code>poststylus</code></a></li><li><strong>Rollup</strong>: <a href="https://github.com/egoist/rollup-plugin-postcss" target="_blank" rel="noopener"><code>rollup-plugin-postcss</code></a></li><li><strong>Brunch</strong>: <a href="https://github.com/brunch/postcss-brunch" target="_blank" rel="noopener"><code>postcss-brunch</code></a></li><li><strong>Broccoli</strong>: <a href="https://github.com/jeffjewiss/broccoli-postcss" target="_blank" rel="noopener"><code>broccoli-postcss</code></a></li><li><strong>Meteor</strong>: <a href="https://atmospherejs.com/juliancwirko/postcss" target="_blank" rel="noopener"><code>postcss</code></a></li><li><strong>ENB</strong>: <a href="https://github.com/awinogradov/enb-postcss" target="_blank" rel="noopener"><code>enb-postcss</code></a></li><li><strong>Taskr</strong>: <a href="https://github.com/lukeed/taskr/tree/master/packages/postcss" target="_blank" rel="noopener"><code>taskr-postcss</code></a></li><li><strong>Start</strong>: <a href="https://github.com/start-runner/postcss" target="_blank" rel="noopener"><code>start-postcss</code></a></li><li><strong>Connect/Express</strong>: <a href="https://github.com/jedmao/postcss-middleware" target="_blank" rel="noopener"><code>postcss-middleware</code></a></li></ul><h3 id="JS-API"><a href="#JS-API" class="headerlink" title="JS API"></a>JS API</h3><p>对于其它的应用环境，你可以使用 JS API：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> autoprefixer = <span class="built_in">require</span>(<span class="string">"autoprefixer"</span>);</span><br><span class="line"><span class="keyword">const</span> postcss = <span class="built_in">require</span>(<span class="string">"postcss"</span>);</span><br><span class="line"><span class="keyword">const</span> precss = <span class="built_in">require</span>(<span class="string">"precss"</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">"src/app.css"</span>, (err, css) =&gt; &#123;</span><br><span class="line">  postcss([precss, autoprefixer])</span><br><span class="line">    .process(css, &#123; <span class="attr">from</span>: <span class="string">"src/app.css"</span>, <span class="attr">to</span>: <span class="string">"dest/app.css"</span> &#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">      fs.writeFile(<span class="string">"dest/app.css"</span>, result.css);</span><br><span class="line">      <span class="keyword">if</span> (result.map) fs.writeFile(<span class="string">"dest/app.css.map"</span>, result.map);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>阅读 <a href="https://postcss.org/api/" target="_blank" rel="noopener">PostCSS API 文档</a> 获取更多有关 JS API 的信息.</p><p>所有的 PostCSS 运行器应当通过 <a href="https://github.com/postcss/postcss/blob/main/docs/guidelines/runner.md" target="_blank" rel="noopener">PostCSS 运行器指南</a>。</p><h3 id="配置选项"><a href="#配置选项" class="headerlink" title="配置选项"></a>配置选项</h3><p>绝大多数 PostCSS 运行器接受两个参数：</p><ul><li>一个包含所需插件的数组</li><li>一个配置选项的对象</li></ul><p>常见的选项：</p><ul><li><code>syntax</code>: 一个提供了语法解释器和 stringifier 的对象。</li><li><code>parser</code>: 一个特殊的语法解释器（例如 <a href="https://github.com/postcss/postcss-scss" target="_blank" rel="noopener">SCSS</a>）。</li><li><code>stringifier</code>: 一个特殊的语法 output 生成器（例如 <a href="https://github.com/ben-eb/midas" target="_blank" rel="noopener">Midas</a>）。</li><li><code>map</code>: <a href="https://postcss.org/api/#sourcemapoptions" target="_blank" rel="noopener">source map 选项</a>.</li><li><code>from</code>: input 文件名称（大多数运行器自动设置了这个）。</li><li><code>to</code>: output 文件名称（大多数运行器自动设置了这个）。</li></ul><h3 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h3><ul><li><a href="https://atom.io/packages/language-postcss" target="_blank" rel="noopener"><code>language-postcss</code></a> 添加了 PostCSS 和 <a href="https://github.com/postcss/sugarss" target="_blank" rel="noopener">SugarSS</a> 代码高亮。</li><li><a href="https://atom.io/packages/source-preview-postcss" target="_blank" rel="noopener"><code>source-preview-postcss</code></a> 在一个独立窗口里实时预览生成的 CSS。</li></ul><h3 id="Sublime-Text"><a href="#Sublime-Text" class="headerlink" title="Sublime Text"></a>Sublime Text</h3><ul><li><a href="https://github.com/hudochenkov/Syntax-highlighting-for-PostCSS" target="_blank" rel="noopener"><code>Syntax-highlighting-for-PostCSS</code></a> 添加了 PostCSS 代码高亮。</li></ul><h3 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h3><ul><li><a href="https://github.com/stephenway/postcss.vim" target="_blank" rel="noopener"><code>postcss.vim</code></a> 添加了 PostCSS 代码高亮。</li></ul><h3 id="WebStorm"><a href="#WebStorm" class="headerlink" title="WebStorm"></a>WebStorm</h3><p>自 WebStorm 2016.3 开始，<a href="https://blog.jetbrains.com/webstorm/2016/08/webstorm-2016-3-early-access-preview/" target="_blank" rel="noopener">提供了</a> 内建的 PostCSS 支持。</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>微前端</title>
      <link href="/2021/06/07/qiankun/"/>
      <url>/2021/06/07/qiankun/</url>
      
        <content type="html"><![CDATA[<blockquote><p>乾坤一个项目 node_modules 包就 8 个 G……虽然知道是好几个子项目的事…..但是还是挺不爽的…….</p></blockquote><h2 id="一些相关名词"><a href="#一些相关名词" class="headerlink" title="一些相关名词"></a>一些相关名词</h2><p>| – |– |<br>|SSI|server side includes|<br>|BFF|Backend For Frontend |</p><h2 id="一些知识点"><a href="#一些知识点" class="headerlink" title="一些知识点"></a>一些知识点</h2><ul><li>ReactDOM.unmountComponentAtNode(container) - <a href="https://zh-hans.reactjs.org/docs/react-dom.html#unmountcomponentatnode" target="_blank" rel="noopener">ref</a><br>从 Dom 中卸载组件,会将其事件处理器(event handlers) 和 state 一并清楚.如果指定容器上没有对应已挂载的组件,这函数什么也不做,如果组件被移除将会返回 True</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">window.renderBrowser &#x3D;(containerId, history)&#x3D;&gt;&#123;</span><br><span class="line">    ReactDOM.render(&lt;App history&#x3D;&#123;history&#125; &#x2F;&gt;,</span><br><span class="line">    document.getElementById(containerId)) ;</span><br><span class="line"></span><br><span class="line">    registerServiceWorker();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">window.unmountBrowse&#x3D;containerId&#x3D;&gt;&#123;</span><br><span class="line">    ReactDOM.unmountComponentAtNode(document.getElementById(containerId ));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="qiankun-工具"><a href="#qiankun-工具" class="headerlink" title="qiankun-工具"></a>qiankun-工具</h2><ul><li>import-html-entry<br><a href="https://github.com/kuitos/import-html-entry" target="_blank" rel="noopener">https://github.com/kuitos/import-html-entry</a></li></ul><h2 id="qiankun-实践"><a href="#qiankun-实践" class="headerlink" title="qiankun-实践"></a>qiankun-实践</h2><p>基于 qiankun 的微前端最佳实践 @nice<br>@by <a href="https://github.com/a1029563229/blogs" target="_blank" rel="noopener">https://github.com/a1029563229/blogs</a><br>@code <a href="https://github.com/a1029563229/micro-front-template" target="_blank" rel="noopener">https://github.com/a1029563229/micro-front-template</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://luo0412.gitee.io/plana/nav.4.ui-javascript/ch5-devops-scaffold/micro/case/02--fang-an--wei-qian-duan-react-qiankun.html" target="_blank" rel="noopener">方案微前端(react+qiankun)</a></p>]]></content>
      
      
      <categories>
          
          <category> frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qiankun </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hook 规则</title>
      <link href="/2021/05/30/hook/"/>
      <url>/2021/05/30/hook/</url>
      
        <content type="html"><![CDATA[<blockquote><p>hook 规则官网的文档 ,以前没看,主要是用 umi 每次运行 eslint 都会改 hooks 的依赖,原来是官方的 eslint 插件 eslint-plugin-react-hooks 搞的鬼…<br>然后看了一下官网的文档 学习了一下,感觉有好些知识点<br><a href="https://zh-hans.reactjs.org/docs/hooks-rules.html" target="_blank" rel="noopener">https://zh-hans.reactjs.org/docs/hooks-rules.html</a></p></blockquote><p><em>Hook</em> 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。</p><p>Hook 本质就是 JavaScript 函数，但是在使用它时需要遵循两条规则。我们提供了一个 <a href="https://www.npmjs.com/package/eslint-plugin-react-hooks" target="_blank" rel="noopener">linter 插件</a>来强制执行这些规则：</p><h3 id="只在最顶层使用-Hook"><a href="#只在最顶层使用-Hook" class="headerlink" title="只在最顶层使用 Hook"></a><strong>只在最顶层使用 Hook</strong></h3><p><strong>不要在循环，条件或嵌套函数中调用 Hook，</strong> 确保总是在你的 React 函数的最顶层以及任何 return 之前调用他们。遵守这条规则，你就能确保 Hook 在每一次渲染中都按照同样的顺序被调用。这让 React 能够在多次的 <code>useState</code> 和 <code>useEffect</code> 调用之间保持 hook 状态的正确。(如果你对此感到好奇，我们在会有更深入的解释。)</p><h3 id="只在-React-函数中调用-Hook"><a href="#只在-React-函数中调用-Hook" class="headerlink" title="只在 React 函数中调用 Hook"></a>只在 React 函数中调用 Hook</h3><p><strong>不要在普通的 JavaScript 函数中调用 Hook。</strong>你可以：</p><ul><li>✅ 在 React 的函数组件中调用 Hook</li><li>✅ 在自定义 Hook 中调用其他 Hook (我们将会在, setName] = useState(‘Mary’);</li></ul><p>// 2. Use an effect for persisting the form<br>useEffect(function persistForm() {<br>localStorage.setItem(‘formData’, name);<br>});</p><p>// 3. Use the surname state variable<br>const [surname, setSurname] = useState(‘Poppins’);</p><p>// 4. Use an effect for updating the title<br>useEffect(function updateTitle() {<br>document.title = name + ‘ ‘ + surname;<br>});</p><p>// …<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">那么 React 怎么知道哪个 state 对应哪个 &#96;useState&#96;？答案是 React 靠的是 Hook 调用的顺序。因为我们的示例中，Hook 的调用顺序在每次渲染中都是相同的，所以它能够正常工作：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;jsx</span><br><span class="line">&#x2F;&#x2F; ------------</span><br><span class="line">&#x2F;&#x2F; 首次渲染</span><br><span class="line">&#x2F;&#x2F; ------------</span><br><span class="line">useState(&#39;Mary&#39;)           &#x2F;&#x2F; 1. 使用 &#39;Mary&#39; 初始化变量名为 name 的 state</span><br><span class="line">useEffect(persistForm)     &#x2F;&#x2F; 2. 添加 effect 以保存 form 操作</span><br><span class="line">useState(&#39;Poppins&#39;)        &#x2F;&#x2F; 3. 使用 &#39;Poppins&#39; 初始化变量名为 surname 的 state</span><br><span class="line">useEffect(updateTitle)     &#x2F;&#x2F; 4. 添加 effect 以更新标题</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; -------------</span><br><span class="line">&#x2F;&#x2F; 二次渲染</span><br><span class="line">&#x2F;&#x2F; -------------</span><br><span class="line">useState(&#39;Mary&#39;)           &#x2F;&#x2F; 1. 读取变量名为 name 的 state（参数被忽略）</span><br><span class="line">useEffect(persistForm)     &#x2F;&#x2F; 2. 替换保存 form 的 effect</span><br><span class="line">useState(&#39;Poppins&#39;)        &#x2F;&#x2F; 3. 读取变量名为 surname 的 state（参数被忽略）</span><br><span class="line">useEffect(updateTitle)     &#x2F;&#x2F; 4. 替换更新标题的 effect</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; ...</span><br></pre></td></tr></table></figure><p>只要 Hook 的调用顺序在多次渲染之间保持一致，React 就能正确地将内部 state 和对应的 Hook 进行关联。但如果我们将一个 Hook (例如 <code>persistForm</code> effect) 调用放到一个条件语句中会发生什么呢？</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 🔴 在条件语句中使用 Hook 违反第一条规则</span></span><br><span class="line"><span class="keyword">if</span> (name !== <span class="string">""</span>) &#123;</span><br><span class="line">  useEffect(<span class="function"><span class="keyword">function</span> <span class="title">persistForm</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    localStorage.setItem(<span class="string">"formData"</span>, name);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在第一次渲染中 <code>name !== &#39;&#39;</code> 这个条件值为 <code>true</code>，所以我们会执行这个 Hook。但是下一次渲染时我们可能清空了表单，表达式值变为 <code>false</code>。此时的渲染会跳过该 Hook，Hook 的调用顺序发生了改变：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">useState(<span class="string">"Mary"</span>); <span class="comment">// 1. 读取变量名为 name 的 state（参数被忽略）</span></span><br><span class="line"><span class="comment">// useEffect(persistForm)  // 🔴 此 Hook 被忽略！</span></span><br><span class="line">useState(<span class="string">"Poppins"</span>); <span class="comment">// 🔴 2 （之前为 3）。读取变量名为 surname 的 state 失败</span></span><br><span class="line">useEffect(updateTitle); <span class="comment">// 🔴 3 （之前为 4）。替换更新标题的 effect 失败</span></span><br></pre></td></tr></table></figure><p>React 不知道第二个 <code>useState</code> 的 Hook 应该返回什么。React 会以为在该组件中第二个 Hook 的调用像上次的渲染一样，对应的是 <code>persistForm</code> 的 effect，但并非如此。从这里开始，后面的 Hook 调用都被提前执行，导致 bug 的产生。</p><p><strong>这就是为什么 Hook 需要在我们组件的最顶层调用。</strong>如果我们想要有条件地执行一个 effect，可以将判断放到 Hook 的<em>内部</em>：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="keyword">function</span> <span class="title">persistForm</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 👍 将条件判断放置在 effect 中</span></span><br><span class="line">  <span class="keyword">if</span> (name !== <span class="string">""</span>) &#123;</span><br><span class="line">    localStorage.setItem(<span class="string">"formData"</span>, name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>注意：如果使用了<a href="https://www.npmjs.com/package/eslint-plugin-react-hooks" target="_blank" rel="noopener">提供的 lint 插件</a>，就无需担心此问题。</strong> 不过你现在知道了为什么 Hook 会这样工作，也知道了这个规则是为了避免什么问题。</p><h2 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h2><p>最后，接下来会学习<a href="https://zh-hans.reactjs.org/docs/hooks-custom.html" target="_blank" rel="noopener">如何编写自定义 Hook</a>！自定义 Hook 可以将 React 中提供的 Hook 组合到定制的 Hook 中，以复用不同组件之间常见的状态逻辑。下一页](<a href="https://zh-hans.reactjs.org/docs/hooks-custom.html" target="_blank" rel="noopener">https://zh-hans.reactjs.org/docs/hooks-custom.html</a>) 中学习这个。)</p><p>遵循此规则，确保组件的状态逻辑在代码中清晰可见。</p><h2 id="ESLint-插件"><a href="#ESLint-插件" class="headerlink" title="ESLint 插件"></a>ESLint 插件</h2><p>我们发布了一个名为 <a href="https://www.npmjs.com/package/eslint-plugin-react-hooks" target="_blank" rel="noopener"><code>eslint-plugin-react-hooks</code></a> 的 ESLint 插件来强制执行这两条规则。如果你想尝试一下，可以将此插件添加到你的项目中：</p><p>我们打算后续版本默认添加此插件到 <a href="https://zh-hans.reactjs.org/docs/create-a-new-react-app.html#create-react-app" target="_blank" rel="noopener">Create React App</a> 及其他类似的工具包中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install eslint-plugin-react-hooks --save-dev</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 你的 ESLint 配置</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="string">"react-hooks"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"rules"</span>: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="string">"react-hooks/rules-of-hooks"</span>: <span class="string">"error"</span>, <span class="comment">// 检查 Hook 的规则</span></span><br><span class="line">    <span class="string">"react-hooks/exhaustive-deps"</span>: <span class="string">"warn"</span> <span class="comment">// 检查 effect 的依赖</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>现在你可以跳转到下一章节学习如何编写<a href="https://zh-hans.reactjs.org/docs/hooks-custom.html" target="_blank" rel="noopener">你自己的 Hook</a>。</strong>在本章节中，我们将继续解释这些规则背后的原因。</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>正如我们<a href="https://zh-hans.reactjs.org/docs/hooks-state.html#tip-using-multiple-state-variables" target="_blank" rel="noopener">之前学到</a>的，我们可以在单个组件中使用多个 State Hook 或 Effect Hook</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Form</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1. Use the name state variable</span></span><br><span class="line">  <span class="keyword">const</span> [name[</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>websocket 一些小脚本</title>
      <link href="/2021/05/23/websocket/"/>
      <url>/2021/05/23/websocket/</url>
      
        <content type="html"><![CDATA[<p>今天干活到 11 点半…….不知道写啥了………这个周接触 websocket 多些,就把用的几个小脚本分享一下,当完成任务了哈哈哈…….</p><h2 id="websocket-测试页面"><a href="#websocket-测试页面" class="headerlink" title="websocket 测试页面"></a>websocket 测试页面</h2><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>WebSocket Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// var wsUri = "ws://localhost:8088"</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> output;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    output = <span class="built_in">document</span>.getElementById(<span class="string">"output"</span>);</span></span><br><span class="line">    testWebSocket();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">testWebSocket</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    websocket = <span class="keyword">new</span> WebSocket(wsUri);</span></span><br><span class="line"><span class="actionscript">    websocket.onopen = <span class="function"><span class="keyword">function</span> <span class="params">(evt)</span> </span>&#123;</span></span><br><span class="line">      onOpen(evt);</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="actionscript">    websocket.onclose = <span class="function"><span class="keyword">function</span> <span class="params">(evt)</span> </span>&#123;</span></span><br><span class="line">      onClose(evt);</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="actionscript">    websocket.onmessage = <span class="function"><span class="keyword">function</span> <span class="params">(evt)</span> </span>&#123;</span></span><br><span class="line">      onMessage(evt);</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="actionscript">    websocket.onerror = <span class="function"><span class="keyword">function</span> <span class="params">(evt)</span> </span>&#123;</span></span><br><span class="line">      onError(evt);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">onOpen</span><span class="params">(evt)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    writeToScreen(<span class="string">"CONNECTED"</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// doSend("WebSocket rocks");</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">onClose</span><span class="params">(evt)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    writeToScreen(<span class="string">"DISCONNECTED"</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">onMessage</span><span class="params">(evt)</span> </span>&#123;</span></span><br><span class="line">    writeToScreen(</span><br><span class="line"><span class="handlebars"><span class="xml">      '<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: blue;"</span>&gt;</span>RESPONSE: ' + evt.data + "<span class="tag">&lt;/<span class="name">span</span>&gt;</span>"</span></span></span><br><span class="line">    );</span><br><span class="line">    websocket.close();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">onError</span><span class="params">(evt)</span> </span>&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    writeToScreen('<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: red;"</span>&gt;</span>ERROR:<span class="tag">&lt;/<span class="name">span</span>&gt;</span> ' + evt.data);</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">doSend</span><span class="params">(message)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    writeToScreen(<span class="string">"SENT: "</span> + message);</span></span><br><span class="line">    websocket.send(message);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">writeToScreen</span><span class="params">(message)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> pre = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span></span><br><span class="line"><span class="actionscript">    pre.style.wordWrap = <span class="string">"break-word"</span>;</span></span><br><span class="line">    pre.innerHTML = message;</span><br><span class="line">    output.appendChild(pre);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.addEventListener(<span class="string">"load"</span>, init, <span class="literal">false</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>WebSocket Test<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"output"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="python-版本的连接-websocket-并保存数据"><a href="#python-版本的连接-websocket-并保存数据" class="headerlink" title="python 版本的连接 websocket 并保存数据"></a>python 版本的连接 websocket 并保存数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> aiowebsocket.converses <span class="keyword">import</span> AioWebSocket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">startup</span><span class="params">(uri)</span>:</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> AioWebSocket(uri) <span class="keyword">as</span> aws:</span><br><span class="line">        converse = aws.manipulator</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"./log.txt"</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">await</span> converse.send(<span class="string">'90'</span>)</span><br><span class="line">                mes = <span class="keyword">await</span> converse.receive()</span><br><span class="line">                <span class="comment"># print(mes)</span></span><br><span class="line">                f.write(mes)</span><br><span class="line">                f.write(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(<span class="string">"start"</span>)</span><br><span class="line">    remote = <span class="string">"ws://xxx.ws"</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        asyncio.get_event_loop().run_until_complete(startup(remote))</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt <span class="keyword">as</span> exc:</span><br><span class="line">        logging.info(<span class="string">"quit."</span>)</span><br></pre></td></tr></table></figure><h3 id="与上面-python-脚本联动-模拟-websocket"><a href="#与上面-python-脚本联动-模拟-websocket" class="headerlink" title="与上面 python 脚本联动 ,模拟 websocket"></a>与上面 python 脚本联动 ,模拟 websocket</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//https://www.npmjs.com/package/ws</span></span><br><span class="line"><span class="keyword">const</span> WebSocket = <span class="built_in">require</span>(<span class="string">"ws"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// read contents of the file</span></span><br><span class="line">  <span class="comment">// How to read a file line by line in Node.js https://attacomsian.com/blog/reading-a-file-line-by-line-in-nodejs</span></span><br><span class="line">  <span class="keyword">const</span> data = fs.readFileSync(<span class="string">"log.txt"</span>, <span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// split the contents by new line</span></span><br><span class="line">  <span class="keyword">const</span> lines = data.split(<span class="regexp">/\r?\n/</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// print all lines</span></span><br><span class="line">  <span class="comment">// lines.forEach(line =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   const a = JSON.parse(line);</span></span><br><span class="line">  <span class="comment">//   console.log(line, typeof line, a.crossingName);</span></span><br><span class="line">  <span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> lineNum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> try3Times = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> tryN = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// console.log("debug:: 😈", "scratch.js::", "line No: 6: ", lineNum,)</span></span><br><span class="line">      lineNum = (lineNum + <span class="number">1</span>) % <span class="number">100</span>;</span><br><span class="line">      <span class="keyword">const</span> d = lines[lineNum];</span><br><span class="line">      <span class="keyword">if</span> (!d &amp;&amp; tryN &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="comment">// console.log("debug:: 😈", "scratch.js::", "line No: 11: ",tryN ,d)</span></span><br><span class="line"></span><br><span class="line">        tryN += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> a();</span><br><span class="line">      &#125;</span><br><span class="line">      tryN = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span> d;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> fun = try3Times();</span><br><span class="line">  <span class="keyword">const</span> Wss = <span class="keyword">new</span> WebSocket.Server(&#123; <span class="attr">port</span>: <span class="number">8088</span> &#125;);</span><br><span class="line"></span><br><span class="line">  Wss.on(<span class="string">"connection"</span>, (ws) =&gt; &#123;</span><br><span class="line">    ws.on(<span class="string">"message"</span>, <span class="function"><span class="keyword">function</span> <span class="title">incoming</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">      ws.send(fun());</span><br><span class="line"></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"received: %s"</span>, message);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"connection"</span>);</span><br><span class="line">    ws.send(fun());</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>低代码(no code | low code)会内卷前端岗位吗?</title>
      <link href="/2021/05/16/no_code/"/>
      <url>/2021/05/16/no_code/</url>
      
        <content type="html"><![CDATA[<p>之前听低代码平台感觉就是个噱头,不过最近长期看的俩大佬的博客公众号 又开始鼓吹”不会前端是否能完成开发”,然后给出挺肯定的回答…感觉有点慌,不会前端工作被一群刚毕业的内卷了吧?感觉去找了相关资料看了一早上.尤其是 webflow.com 还专门注册了帐号是把 demo 走了一遍….</p><p>省时间,先说我现在的理解:这个 no_code 更大程度使用场景受限制,可能适合那种表格,工作流那种工作.有可能还会对不怎么喜欢写样式的前端有帮助作用.</p><h2 id="证据一-v2-网友"><a href="#证据一-v2-网友" class="headerlink" title="证据一 v2 网友"></a>证据一 v2 网友</h2><p>看了一圈 v2 有用过这个的程序员们的言论,他们有自己用过,或在开发 nocode lowCode 平台的.总结基本就是场景受限.这种东西在 2000 年左右就有类似的东西,只是技术进步给换汤不换药的升级了一下.</p><h2 id="证据二-自己体验-webflow-com"><a href="#证据二-自己体验-webflow-com" class="headerlink" title="证据二 自己体验 webflow.com"></a>证据二 自己体验 webflow.com</h2><p>用了一下网友说的比较热门的<a href="www.webflow.com">webflow</a> ,感觉这个主要是在 ui 静态页面上可以通过脱脱拽拽实现比较炫的效果.这个感觉反而是个好事,如果你觉得自己去写样式不如化时间去学习这些工具用法的前端. 但是依照我体验的 webflow 的感受,感觉学习还挺无聊的,稍微好看点的就要买这个模板,价格不菲,而且导出功能也要收费,感觉导出的还是 html,css 这种,不是 react 等框架………感觉放心了不少……哈哈……</p><h2 id="证据三-自己看的公众号文章"><a href="#证据三-自己看的公众号文章" class="headerlink" title="证据三 自己看的公众号文章"></a>证据三 自己看的公众号文章</h2><p>看的比如 <a href="%https://mp.weixin.qq.com/s/Y6bsuKWkm29ibxmu7jF_hw%">如何一行代码都不写，就做出网站和应用？</a>这个虽然作者觉得 low code 挺有前途,但是他选的精评论里也说了(有一个还是我评论的,哈哈):</p><pre><code>&gt; 老师，我是做市场的，表示深受其益。我司官网(framely.io)就是用 webflow 做的。在此之前试过阿里的 Landing，以及网上大家都比较推荐的 WIX。虽然都是 no code，比较不同的是，webflow 更像是在用 UI 做开发。稍微总结一下就是：1、需要先确定网站的框架，页面布局，内容及展示方式；2、抽象出可以复用的的模块；3、定义并规范命名（即自己能辨识的，有效展示各模块及关系的）；4、复用+ customize。&gt; webflow 无论是框架及样式都能复用，图形和动效可以直接定义在里面直接适配，还有内容系统（相当于内容数据库）可以获取动态内容（即定义好前端样式，以后加内容就直接加在内容系统中，不用动前端，发布也可以只发布内容系统的）。过去是我来做官网内容及整体框架页面规划，然后设计同学设计，前端同学实现。这里就经常出现问题，比如设计的样式前端同学无法实现、想要的动效前端同学不能以较高效的方式实现导致不得不撤掉、别的官网借鉴的效果做不出来。我和设计同学的沟通比较顺利，但沟通是需要“时间+理解+优化+复盘”的。现在等于是我一个人就可以完成所有的，还能适配各个端，还比较少有 bug。给您推荐一下，您要是没有时间试用，看了评论也能了解。个人感觉 no code 不仅仅是拖拽，应该是指用大众熟知的语言（比如 UI/图形语言）做开发，不变的是思维或思考方式。</code></pre><p>就比如用 uniapp 这用 AST 写小程序,flutter 写手机应用的一样,是你在懂原生的基础上可能有 1+1 &gt;2 的左右,要不会有很多坑.</p>]]></content>
      
      
      <categories>
          
          <category> front </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rss 让自己不被社交媒体左右</title>
      <link href="/2021/05/09/rss/"/>
      <url>/2021/05/09/rss/</url>
      
        <content type="html"><![CDATA[<p>最近看的文章 主要是讲 现在各家厂商推广自己的 app ,淘宝的 web 端基本都没法用了,来逼着你用 app .他们的目的就是收集你的信息,然后通过<strong>算法</strong>给你推荐,逼着你买买买…… 或者看网页给你推送一大堆信息……现在的人们更像是活在<strong>地球村</strong>.因为全世界每天都可以关注同相同热点…….大牌明星的八卦,某某政治家的活动,我们的得花多少时间才能挣”1 爽”的钱,诸如此类,最近我最爱看的 B 站也变了,开始给我推一堆房子的…….</p><p>算法推送糟透了；让我们用 <strong>RSS feed</strong> 代替它。</p><p>是的，我是说我们应该带回一个已经过时且未得到充分利用的协议，以至于 Google 在 2013 年关闭了它自己的服务。我是说我们迫切需要切换到一个不太优雅，不太方便的系统，因为社交媒体正在毒害我们的生活。（是的，这在很大程度上是过分简化，但这并不是说人们在这里真的意见分歧……）</p><p>算法没有任何帮助，因为我之前曾在 Netflix 上闲逛过。令人震惊的是，人们已经看到 Facebook，Youtube 和 Twitter 等网站上的算法以奇怪且有害的方式推波助澜。他们希望您不断点击并<strong>不断获得广告</strong>，从而不断将最偏激的言论推送给你，我们需要勇敢的远离这些消息。由于社交媒体算法完全接管了我们的国家话语，整个<strong>美国的选举过程都被颠覆了</strong>。还记得吗? 是的，这太可怕了。</p><p>这些东西在 2010 年代得到了很好的记录，在这里需要重复：与十年前相比，世界变得<strong>更加分裂</strong>，<strong>更加愤怒</strong>。如果没有整个美国人口的激增，2021 年 1 月 6 日的事件将永远不会发生，<strong>而激进化很大程度上是由社交网络不负责任地向我们提供了我们渴望为愤怒的回声室提供的所有内容</strong>。</p><p>如此之多的愤怒，如此之多的分歧，如此之多的白痴虚假新闻。</p><p>我说，让这些东西见鬼去吧；我不跟你们玩了。</p><h2 id="使用-RSS-feed"><a href="#使用-RSS-feed" class="headerlink" title="使用 RSS feed"></a>使用 RSS feed</h2><p>首先，设置取消您的社交媒体自动推送。我使用扩展名<a href="https://chrome.google.com/webstore/detail/undistracted-hide-faceboo/pjjgklgkfeoeiebjogplpnibpfnffkng" target="_blank" rel="noopener">Undistracted</a>，您也应该使用。隐藏 Facebook 新闻提要。隐藏 Twitter 提要。隐藏 YouTube 评论。</p><p>现在，您可以访问社交媒体，而不会被算法左右。接下来，是时候用那个曾经差点消失的技术了：_RSS Feeds_。</p><p>这是一个优雅的解决方案，可让您轻松应对。RSS 推送很笨拙，但是几乎每个站点都使用它们。您将该 RSS 提要 URL 插入阅读器网站 / 应用程序和 bam。现在，您将从该推送中获取的所有文章都放入了您的笔记中。但是只有您决定包括的内容，并且只能按时间顺序。</p><p>那里有很多<a href="https://www.wpsuperstars.net/free-rss-feed-readers/" target="_blank" rel="noopener">RSS feed 阅读器</a>。我自己使用<a href="https://feedly.com/i/welcome" target="_blank" rel="noopener">Feedly</a> .</p><p>您可以查看头条新闻，了解想要阅读的内容和想要忽略的内容；您可以保存文章以供以后使用，并将其分类为不同的类别；您终于可以将漫画带回到您的生活中。<strong>没有算法</strong>可以决定您最想看的是什么。没有数据收集可挖掘您的活动以建立广告资料。这只是您添加的站点中所有文章的列表。</p><p>一个论点是，_您可以使用 RSS 提要太容易地创建回声室_。尤其对于新闻而言，仅依赖特定数量的站点只会使您对事件有一定的了解。可以通过在 Feed 中获得更多的网站来解决这一问题。但更重要的是…… 您认为社交媒体算法不会创建回声室吗？老实说，我认为情况可能更糟！</p><p>在社交媒体上，三姑六婆关于导致 5G 致癌的无厘头的转发，与在亚特兰大进行的一项实验性城市园艺计划的深入探访一样，都会一起推送给你，您滚动了一次却再也看不到。这两件事之一获得点击，而这两件事之一为社交媒体创造了很多收入。不是都市农业。但是，使用 RSS 阅读器，您可以将该文章添加到 “稍后阅读” 列表中，有空的时候再回到它，而且笨拙，您甚至不必一眼就看到三姑六婆的消息提醒。</p><p>让我们抛弃算法。让我们重新控制自己的互联网生活。RSS 提要在 2010 年代可能已经过时，但它们是 2020 年代的光明前景。</p><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a><a href="%https://thedude3445.quinlancircle.com/2021/04/04/rss-feeds/%">原文</a></h2>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 结合 React.useState 正确方式</title>
      <link href="/2021/05/02/ts-useState/"/>
      <url>/2021/05/02/ts-useState/</url>
      
        <content type="html"><![CDATA[<h2 id="useDarkMode-hook"><a href="#useDarkMode-hook" class="headerlink" title="useDarkMode hook :"></a><code>useDarkMode</code> hook :</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> DarkModeState = <span class="string">"dark"</span> | <span class="string">"light"</span>;</span><br><span class="line"><span class="keyword">type</span> SetDarkModeState = React.Dispatch&lt;React.SetStateAction&lt;DarkModeState&gt;&gt;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useDarkMode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> preferDarkQuery = <span class="string">"(prefers-color-scheme: dark)"</span>;</span><br><span class="line">  <span class="keyword">const</span> [mode, setMode] = React.useState&lt;DarkModeState&gt;<span class="function">(<span class="params">(<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> lsVal = <span class="built_in">window</span>.localStorage.getItem(<span class="params">"colorMode"</span>);</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">if</span> (<span class="params">lsVal</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">return</span> lsVal === "dark" ? "dark" : "light";</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">return</span> <span class="built_in">window</span>.matchMedia(<span class="params">preferDarkQuery</span>).matches ? "dark" : "light";</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">  &#125;</span>);</span></span><br><span class="line"><span class="function">  <span class="params">React</span>.<span class="params">useEffect</span>(<span class="params">(<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> mediaQuery = <span class="built_in">window</span>.matchMedia(<span class="params">preferDarkQuery</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> handleChange = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      setMode(<span class="params">mediaQuery.matches ? "dark" : "light"</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;;</span></span></span><br><span class="line"><span class="function"><span class="params">    mediaQuery.addEventListener(<span class="params">"change", handleChange</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">return</span> (<span class="params"></span>) =&gt; mediaQuery.removeEventListener(<span class="params">"change", handleChange</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">  &#125;, []</span>);</span></span><br><span class="line"><span class="function">  <span class="params">React</span>.<span class="params">useEffect</span>(<span class="params">(<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="built_in">window</span>.localStorage.setItem(<span class="params">"colorMode", mode</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">  &#125;, [mode]</span>);</span></span><br><span class="line"><span class="function">  // <span class="params">we</span>'<span class="params">re</span> <span class="params">doing</span> <span class="params">it</span> <span class="params">this</span> <span class="params">way</span> <span class="params">instead</span> <span class="params">of</span> <span class="params">as</span> <span class="params">an</span> <span class="params">effect</span> <span class="params">so</span> <span class="params">we</span> <span class="params">only</span></span></span><br><span class="line"><span class="function">  // <span class="params">set</span> <span class="params">the</span> <span class="params">localStorage</span> <span class="params">value</span> <span class="params">if</span> <span class="params">they</span> <span class="params">explicitly</span> <span class="params">change</span> <span class="params">the</span> <span class="params">default</span></span></span><br><span class="line"><span class="function">  <span class="params">return</span> [<span class="params">mode</span>, <span class="params">setMode</span>] <span class="params">as</span> <span class="params">const</span>;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="A-closer-look"><a href="#A-closer-look" class="headerlink" title="A closer look"></a>A closer look</h2><p>I want to call out a few things about the hook itself that made things work well from a TypeScript perspective. First, let’s clear out all the extra stuff and just look at the important bits. We’ll even clear out the TypeScript and add it iteratively:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useDarkMode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [mode, setMode] = React.useState(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"light"</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> [mode, setMode];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [mode, setMode] = useDarkMode();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;button onClick=&#123;<span class="function"><span class="params">()</span> =&gt;</span> setMode(mode === <span class="string">"light"</span> ? <span class="string">"dark"</span> : <span class="string">"light"</span>)&#125;&gt;</span><br><span class="line">      Toggle <span class="keyword">from</span> &#123;mode&#125;</span><br><span class="line">    &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>From the get-go, we’ve got an error when calling setMode:</p><p>This expression is not callable.<br>Not all constituents of type ‘string | React.Dispatch&lt;SetStateAction<string>&gt;’ are callable.<br>Type ‘string’ has no call signatures.(2349)<br>You can read each addition of indentation as “because”, so let’s read that again:</p><blockquote><p>这个表达式不是可被调用的. <em>Because</em> not all constituents of type ‘string | React.Dispatch&lt;SetStateAction<string>&gt;’ are callable. 因为推断出有俩值,其中是 string 不可调用(2349)</p></blockquote><p>我们肉眼可见 setMode 是个函数,为啥 ts 推断它是两种类型?</p><p>我们换种写法:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = useDarkMode();</span><br><span class="line"><span class="keyword">const</span> mode = array[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> setMode = array[<span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>在这种情形下 array 有以下推断:</p><p><code>Array&lt;string | React.Dispatch&lt;React.SetStateAction&lt;string&gt;&gt;&gt;</code></p><p>TypeScript 自己推断不出来数组的先后顺序,它只知道数组返回了个 string 和 Dispatch 类型</p><p>But React’s useState hook manages to ensure when we extract values out of it. Let’s take a quick look at their type definition for useState:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useState</span>&lt;<span class="title">S</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  initialState: S | (() =&gt; S)</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): [<span class="title">S</span>, <span class="title">Dispatch</span>&lt;<span class="title">SetStateAction</span>&lt;<span class="title">S</span>&gt;&gt;]</span>;</span><br></pre></td></tr></table></figure><p>Ah, so they have a return type that is an array with explicit types. So rather than an array of elements that can be one of two types, it’s explicitly an array with two elements where the first is the type of state and the second is a Dispatch SetStateAction for that type of state.</p><p>我们需要告诉 TypeScript 我们确保数组不会改变.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useDarkMode</span>(<span class="params"></span>): [<span class="title">string</span>, <span class="title">React</span>.<span class="title">Dispatch</span>&lt;<span class="title">React</span>.<span class="title">SetStateAction</span>&lt;<span class="title">string</span>&gt;&gt;] </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> [mode, setMode];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Or we could make a specific type for a variable:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useDarkMode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">const</span> returnValue: [<span class="built_in">string</span>, React.Dispatch&lt;React.SetStateAction&lt;<span class="built_in">string</span>&gt;&gt;] = [</span><br><span class="line">    mode,</span><br><span class="line">    setMode,</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">return</span> returnValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更好的方式 是 Typescript 内建了这个能力,因为 typescript 已经知道了 array 的类型.所以我们只需要告诉 ts “返回数据是不变的” 我们指定返回值为 const</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useDarkMode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> [mode, setMode] <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就不需要 ts 自己判断返回类型</p><p>And we can take it a step further because with our Dark Mode functionality, the string can be either dark or light so we can do better than TypeScript’s inference and pass the possible values explicitly:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useDarkMode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [mode, setMode] = React.useState&lt;<span class="string">"dark"</span> | <span class="string">"light"</span>&gt;<span class="function">(<span class="params">(<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="comment">// ...</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">return</span> "light";</span></span></span><br><span class="line"><span class="function"><span class="params">  &#125;</span>);</span></span><br><span class="line"><span class="function">  // ...</span></span><br><span class="line"><span class="function">  <span class="params">return</span> [<span class="params">mode</span>, <span class="params">setMode</span>] <span class="params">as</span> <span class="params">const</span>;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>This will help us when we call setMode to ensure we not only call it with a string, but the right type of string. I also created type aliases for this and the dispatch function to make the prop types easier as I pass these values around my app.</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="%https://kentcdodds.com/blog/wrapping-react-use-state-with-type-script%">ref1</a></p>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
          <category> typescript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>d3Js入门</title>
      <link href="/2021/04/25/d3/"/>
      <url>/2021/04/25/d3/</url>
      
        <content type="html"><![CDATA[<p>chart 之类如果用别人的库 其实 最终展示的 是 svg .然后 d3Js 是一个主要基于 svg 的一个 dom 操作的库. 最近学习了一下. 因为有些需要可能:</p><ul><li>用别人库可能杀鸡用牛刀</li><li>定制需求</li><li>如果老板想要一些炫的动效,或者一些有交互的组件, 比如一个行驶的小车.这些其实用 d3 很方便.</li><li>自己想折腾一下吧……..多了解一些</li></ul><h2 id="d3-vs-threeJs"><a href="#d3-vs-threeJs" class="headerlink" title="d3 vs threeJs"></a>d3 vs threeJs</h2><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li>d3 主要是基于 svg 的 ,如果是操作几个 dom,形状这个合适</li><li>threejs 主要是基于 webgl ,canval 的库,3d 效果的复杂的图像需求</li></ul><h2 id="svg"><a href="#svg" class="headerlink" title="svg"></a>svg</h2><p>svg 学习可以看看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial" target="_blank" rel="noopener">mdn 的官网  </a> .</p><h3 id="主要的元素"><a href="#主要的元素" class="headerlink" title="主要的元素"></a>主要的元素</h3><ul><li>path</li><li>line</li><li>rect</li><li>text<br><img src="pics/d3-svg1.png" alt="元素"></li></ul><h2 id="d3-学习"><a href="#d3-学习" class="headerlink" title="d3 学习"></a>d3 学习</h2><p>我主要是看了一堆 frontendMaster 的课程.</p><p>个人感觉笔记难理解的是 d3 的链式调用吧.一开始 .主要就是有一些是找到 dom ,然后可以之间套用方法.</p><ul><li>.call 方法 参考<a href="https://stackoverflow.com/questions/12805309/javascript-library-d3-call-function" target="_blank" rel="noopener">stackoverflow d3 call function</a><br>.call()是 D3 API 函数，不要与<em>Function.prototype.call（）</em> 混淆<blockquote><p>selection.call(function<a href="">, arguments…</a>)<br>完全调用一次指定的函数，并将此选择与任何可选参数一起传递。返回此选择。这等效于手动调用功能，但有助于方法链接。例如，要在可重用函数中设置几种样式：<br>现在说：<br><code>d3.selectAll(&quot;div&quot;).call(name, &quot;John&quot;, &quot;Snow&quot;);</code><br>这大致相当于：<br><code>name(d3.selectAll(&quot;div&quot;), &quot;John&quot;, &quot;Snow&quot;);</code><br>唯一的区别是 selection.call 总是返回选择内容，而不是被调用函数 name 的返回值。</p></blockquote></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.cassie.codes/posts/swipey-image-grids/" target="_blank" rel="noopener">https://www.cassie.codes/posts/swipey-image-grids/</a> svg 的动效</li><li><a href="https://wattenberger.com/blog/react-and-d3" target="_blank" rel="noopener">https://wattenberger.com/blog/react-and-d3</a> 感觉挺炫的,不过感觉有点代码不全</li></ul>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>程序猿的领导力</title>
      <link href="/2021/04/18/leader/"/>
      <url>/2021/04/18/leader/</url>
      
        <content type="html"><![CDATA[<blockquote><p>感觉网上很少有关程序员技术路线的职业规划,然后最近看了一篇,大概翻译了一下 原文<a href="https://career-ladders.dev/engineering/" target="_blank" rel="noopener">https://career-ladders.dev/engineering/</a></p></blockquote><h1 id="职业规划"><a href="#职业规划" class="headerlink" title="职业规划"></a>职业规划</h1><p>我为我所在的的团队使用的职业规划的一个样例，对任何人开源。</p><h2 id="一级工程师"><a href="#一级工程师" class="headerlink" title="一级工程师#"></a>一级工程师#</h2><ul><li>完成明确定义的任务，并在有阻塞的情况下进行沟通</li><li>努力学习相关技术和系统，积极维护和扩展系统</li><li>虚心地与内部和外部沟通</li><li>通过完成新功能、重构现有代码或更新系统来贴现自己的价值，从而使其他开发人员能够取得成功</li><li>帮助调试技术问题。提交问题，以便我们能够记录和改进我们的服务</li><li>工作经验：<em>无工作经验</em>。</li></ul><h2 id="二级工程师"><a href="#二级工程师" class="headerlink" title="二级工程师#"></a>二级工程师#</h2><ul><li>致力于推动更大特性的工程创新，同时注意不要在过程中产生任务延期</li><li>先发制人的扫描会导致积压。行动包括但不限于：熟悉系统中的疼痛点，应用相关标签和分类，通过拉请求或其他方式关闭它们</li><li>体谅团队中的其他成员，在工作中尽量支持他人</li><li>能够熟练地评价同行的工作。这包括要有礼貌，周到，周到，灵活，而不是迂腐</li><li>倾听他人的优先事项和关切，承认不同的观点。预测他人的反应</li><li>经验：通常需要至少 <em>2 年的专业经验</em>。</li></ul><h2 id="高级工程师"><a href="#高级工程师" class="headerlink" title="高级工程师"></a>高级工程师</h2><p>在这一点上，一个人正在体现他作为个人贡献者的效率。</p><ul><li>定义并执行针对特定功能或内部系统维护 / 升级的执行计划</li><li>积极参与工程工作，帮助简化我们产品的经验</li><li>通过结对编程、回顾和提供指导来帮助支持同事的工作</li><li>根据需要调整优先顺序</li><li>努力减少任务延期，同时与队友就任何更大的重构进行沟通</li><li>努力理解团队正在开发的特性的目的，并帮助向团队成员传达这一目的。在期望不明确的时候提出澄清问题</li><li>当任务很大时，将工作范围缩小到更小的、可操作的部分</li><li>展示对他人想法的开放性。适应他们的沟通风格，以最有效的沟通。有效和准确地分享想法和合作努力的成果</li><li>以预期工作范围所需的规模和维护类型的方式编写代码。在创建和审查拉取请求时考虑易读性</li><li>经验：通常需要至少 <em>5 年的专业经验</em>。</li></ul><h2 id="staff工程师"><a href="#staff工程师" class="headerlink" title="staff工程师#"></a>staff工程师#</h2><p>在这一点上，一个人的大部分时间都花在提升自己的技能以帮助他人上。</p><ul><li>积极参与会议，并在必要时创建跨团队协作以实现业务目标</li><li>创建和维护内部文档，以了解他们正在工作的系统的目的和结构。仔细记录不清楚的过程</li><li>教导同龄人如何建立系统和驱动特性和系统改进的执行计划</li><li>协调整个团队的工作，而不是在单打独斗。确保人们在不同的项目中感到价值感，并且他们的声音被听到</li><li>通过工程上的努力使团队快速前进</li><li>积极主动地沟通问题并做必要的取舍。拥有问题的主导权.</li><li>管理较大的重构和 / 或系统升级,可以帮助其他人进行相同的工作或参与。能够估计工作范围，当这些估计不准确时，与诸如产品管理之类的利益相关者协调，以解决风险，并获得主导权</li><li>经验：通常需要至少 <em>8 年的专业经验</em>。</li></ul><h2 id="首席工程师"><a href="#首席工程师" class="headerlink" title="首席工程师#"></a>首席工程师#</h2><p>在这一点上，一个是帮助别人做到最好，放弃自我成就大我?</p><ul><li>开发经过验证的系统。在整个团队中推广这些系统和方法，以便其他人可以从中学习和改进</li><li>深厚的行业知识和对技术领域的认识。将这一分析适当地纳入战略</li><li>不仅仅只是领导，要有提供指导和前瞻性地愿景</li><li>指导和积极推动技术技能的直接或扩展团队考虑到他们的职业阶段和个人轨迹</li><li>通过围绕共同的需求或客户利益与他人合作来消除障碍.创建跨组织边界的策略，以实现业务目标或扩大影响力</li><li>可以预见问题和其影响，他们的想法将对其他人产生影响，并追求互利的战略</li><li>除了参加会议，深思熟虑地创建和组织有效的会议</li><li>为一系列工作设定清晰而富有挑战性的目标，并以热情和激情追求它们。理解业务目标，并将其整合到这个工作体系中。严格审查多个计划，并根据需要进行调整</li><li>通过扩展 / 指导团队来推动可衡量的增长，积极影响工程路线图，管理关键指标，创建研究和 / 或项目</li><li>与其他团队合作，提高我们内部工具的有效性</li><li>预测他们周围人的需求。表现出关心他的队友,让其感觉可以在工作时间与他们取得联系。有主动性地写过程文档</li><li>经验：通常需要至少 10 年的专业经验。</li></ul><h2 id="杰出工程师"><a href="#杰出工程师" class="headerlink" title="杰出工程师#"></a>杰出工程师#</h2><ul><li>通过工程任务、开放源码工作或者为产品特性提供支持，确定整个行业范围内缺失的功能，实现那些可以大规模释放客户增长的潜力的功能 .</li><li>了解他们的活动对公司 OKRs 的影响，并且主动地 根据战略精确地选择需要做什么.</li><li>在内部和外部积极给予帮助，确保他们的工作被看到。扩展他们的社会资本来帮助其他人</li><li>在合作时，尤其是在棘手的情况下，要仔细考虑沟通的方式</li><li>致力于系统架构，思考问题，预测未来的使用情况。构建可扩展到适当数量的系统</li><li>当出现问题时，有效沟通，理解任何提议的变更的风险和影响。当别人在其他优先事项之外做出权衡时，要善于倾听</li><li>经验：通常需要至少 <em>12 年的专业经验</em>。</li></ul><h2 id="技术主管-还没达到-个人感觉"><a href="#技术主管-还没达到-个人感觉" class="headerlink" title="技术主管(还没达到,个人感觉)#"></a>技术主管(还没达到,个人感觉)#</h2><p>技术主管负责领导一个特定的项目，并对其技术成果的质量负责。</p><p>任何人都可以在他们职业生涯的任何阶段成为技术主管。</p><ul><li>包括大量的项目管理 —— 保证项目准时运行，保证人们工作畅通无阻，当人们陷入困境时向管理层提出建议</li><li>有时可能涉及到指导员工和结对编程</li><li>仍然涉及项目的编码 / 参与和 IC 工作。这也可能意味着要填补项目的空白</li><li>帮助组织和促进与利益相关者的富有成效的正向沟通的会议</li><li>创建与总体项目目标以及执行方式的一致性。以富有成效的方式引发冲突。此外，一旦设定了产品愿景，就要全力实现它.</li><li>技术领导温和地执行标准 —— 包括文化和态度。如果团队不协调，技术领导会花时间和工程经理一起引导他们提高生产力</li></ul>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>esmodule 在浏览器和node端使用</title>
      <link href="/2021/04/11/esmodule/"/>
      <url>/2021/04/11/esmodule/</url>
      
        <content type="html"><![CDATA[<blockquote><p>esmodule 在我 2016 年刚开始学 react 时候就开始用了,虽然用的理所当然,但是其实在 js 发展的历史中,早期好多项目其实是不支持的,包括浏览器, 这个淘汰过程需要很长的时间.最近感觉在 ie 逐步历史舞台的时期,去了解一下 node 浏览器里如何直接用 esmodule 还是很需要的.<br>翻了一些资料,总结一下如何使用.</p></blockquote><h2 id="NODE-里用-ESModules"><a href="#NODE-里用-ESModules" class="headerlink" title="NODE 里用 ESModules"></a>NODE 里用 ESModules</h2><p>主流的 node js 现在都支持 ESmodules</p><p>到 2021 年 4 月 20 号, Node v10 版本将停止维护 (更多参考 <a href="https://nodejs.org/en/about/releases/" target="_blank" rel="noopener">Node Releases</a> ).这很令人振奋因为这意味着每个在维护的 node 版本都官方支持 EcmaScript Modules! 可能有些人还是挺喜欢以前的 CommonJS 但是 EcmaScript Modules 是大势所趋.</p><p>First, we need the JavaScript we want to run:</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; get-files.js</span><br><span class="line"></span><br><span class="line">import path from &#39;path&#39;</span><br><span class="line"></span><br><span class="line">import fs from &#39;fs&#x2F;promises&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const isDir \&#x3D; async d \&#x3D;&gt; (await fs.lstat(d)).isDirectory()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">async function getFiles(dir) &#123;</span><br><span class="line"></span><br><span class="line">const list \&#x3D; await fs.readdir(dir)</span><br><span class="line"></span><br><span class="line">const filePromises \&#x3D; list.map(async filename \&#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">const filepath \&#x3D; path.join(dir, filename)</span><br><span class="line"></span><br><span class="line">if (await isDir(filepath)) &#123;</span><br><span class="line"></span><br><span class="line">return &#123;type: &#39;dir&#39;, filepath&#125;</span><br><span class="line"></span><br><span class="line">&#125; else &#123;</span><br><span class="line"></span><br><span class="line">const content \&#x3D; String(await fs.readFile(filepath))</span><br><span class="line"></span><br><span class="line">return &#123;type: &#39;file&#39;, filepath, content&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">return Promise.all(filePromises)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export &#123;getFiles&#125;</span><br><span class="line"></span><br><span class="line">Next, let&#39;s make a JavaScript file that imports this and runs it:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; index.js</span><br><span class="line"></span><br><span class="line">import &#123;getFiles&#125; from &#39;.&#x2F;get-files.js&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.log(await getFiles(&#39;.&#39;))</span><br></pre></td></tr></table></figure><p>运行一下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">node .</span><br><span class="line"></span><br><span class="line">(node:5369) Warning: To load an ES module, set &quot;type&quot;: &quot;module&quot; in the package.json or use the .mjs extension.</span><br><span class="line"></span><br><span class="line">(Use \&#96;node --trace-warnings ...\&#96; to show where the warning was created)</span><br><span class="line"></span><br><span class="line">&#x2F;Users&#x2F;kentcdodds&#x2F;Desktop&#x2F;super-simple-start-to-esm-in-node&#x2F;index.js:1</span><br><span class="line"></span><br><span class="line">import &#123;getFiles&#125; from &#39;.&#x2F;get-files.js&#39;</span><br><span class="line"></span><br><span class="line">^^^^^^</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SyntaxError: Cannot use import statement outside a module</span><br><span class="line"></span><br><span class="line"> at wrapSafe (internal&#x2F;modules&#x2F;cjs&#x2F;loader.js:979:16)</span><br><span class="line"></span><br><span class="line"> at Module.\_compile (internal&#x2F;modules&#x2F;cjs&#x2F;loader.js:1027:27)</span><br><span class="line"></span><br><span class="line"> at Object.Module.\_extensions..js (internal&#x2F;modules&#x2F;cjs&#x2F;loader.js:1092:10)</span><br><span class="line"></span><br><span class="line"> at Module.load (internal&#x2F;modules&#x2F;cjs&#x2F;loader.js:928:32)</span><br><span class="line"></span><br><span class="line"> at Function.Module.\_load (internal&#x2F;modules&#x2F;cjs&#x2F;loader.js:769:14)</span><br><span class="line"></span><br><span class="line"> at Function.executeUserEntryPoint \[as runMain\] (internal&#x2F;modules&#x2F;run\_main.js:72:12)</span><br><span class="line"></span><br><span class="line"> at internal&#x2F;main&#x2F;run\_main\_module.js:17:47</span><br></pre></td></tr></table></figure><p>nodejs 运行 esmodule 不是默认项. 你有两个选择:</p><ul><li>把 <code>.js</code> 改成 to <code>.mjs</code></li><li>修改<code>package.json</code>,添加 <code>&quot;type&quot;: &quot;module&quot;</code>.</li></ul><p>以下是修改 package.json 后 再次运行 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">node .</span><br><span class="line"></span><br><span class="line">\[</span><br><span class="line"></span><br><span class="line"> &#123;</span><br><span class="line"></span><br><span class="line"> type: &#39;file&#39;,</span><br><span class="line"></span><br><span class="line"> filepath: &#39;get-files.js&#39;,</span><br><span class="line"></span><br><span class="line"> content: &quot;import path from &#39;path&#39;\\n&quot; +</span><br><span class="line"></span><br><span class="line"> &#x2F;&#x2F; clipped for brevity</span><br><span class="line"></span><br><span class="line"> &#39;export &#123;getFiles&#125;\\n&#39;</span><br><span class="line"></span><br><span class="line"> &#125;,</span><br><span class="line"></span><br><span class="line"> &#123;</span><br><span class="line"></span><br><span class="line"> type: &#39;file&#39;,</span><br><span class="line"></span><br><span class="line"> filepath: &#39;index.js&#39;,</span><br><span class="line"></span><br><span class="line"> content: &quot;import &#123;getFiles&#125; from &#39;.&#x2F;get-files.js&#39;\\n&quot; +</span><br><span class="line"></span><br><span class="line"> &#39;\\n&#39; +</span><br><span class="line"></span><br><span class="line"> &quot;console.log(await getFiles(&#39;.&#39;))\\n&quot;</span><br><span class="line"></span><br><span class="line"> &#125;,</span><br><span class="line"></span><br><span class="line"> &#123;</span><br><span class="line"></span><br><span class="line"> type: &#39;file&#39;,</span><br><span class="line"></span><br><span class="line"> filepath: &#39;package.json&#39;,</span><br><span class="line"></span><br><span class="line"> content: &#39;&#123;\\n  &quot;type&quot;: &quot;module&quot;\\n&#125;\\n&#39;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">\]</span><br></pre></td></tr></table></figure><p>参考:</p><ul><li><a href="https://nodejs.medium.com/announcing-core-node-js-support-for-ecmascript-modules-c5d6dc29b663" target="_blank" rel="noopener">the official initial announcement of ESM support</a>.</li><li><a href="https://kentcdodds.com/blog/super-simple-start-to-es-modules-in-node-js/" target="_blank" rel="noopener">esm by Kent C</a></li></ul><h2 id="在浏览器里用-ESModules"><a href="#在浏览器里用-ESModules" class="headerlink" title="在浏览器里用 ESModules"></a>在浏览器里用 ESModules</h2><p>_所有的主流浏览器现在都支持 ESModuels!!!!,demo 如下:</p><ul><li>先写一个想要运行的 js module:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; append-div.js</span><br><span class="line"></span><br><span class="line">function appendDiv(message) &#123;</span><br><span class="line"></span><br><span class="line"> const div \&#x3D; document.createElement(&#39;div&#39;)</span><br><span class="line"></span><br><span class="line"> div.textContent \&#x3D; message</span><br><span class="line"></span><br><span class="line"> document.body.appendChild(div)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export &#123;appendDiv&#125;</span><br><span class="line"></span><br><span class="line">Next, let&#39;s make an HTML file to load that file:</span><br><span class="line"></span><br><span class="line">&lt;!-- index.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type\&#x3D;&quot;module&quot;\&gt;</span><br><span class="line"></span><br><span class="line"> import &#123;appendDiv&#125; from &#39;.&#x2F;append-div.js&#39;</span><br><span class="line"></span><br><span class="line"> appendDiv(&#39;Hello from inline script&#39;)</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script\&gt;</span><br></pre></td></tr></table></figure><p>注意 <code>type=&quot;module&quot;</code> 属性. 这是所有我们需要修改的地方 ,用”module” 代替 “script”, 你可以参考<a href="https://usefulangle.com/post/256/script-type-module-vs-script-javascript" target="_blank" rel="noopener">several differences</a> 看看浏览器运行模块化 js 的原理.</p><p>我们需要 启动一个静态服务器来测试 ,推荐用<code>npx server .</code> 这个 npm 包 来做这个事情, 默认启动的是 <a href="http://localhost:5000/" target="_blank" rel="noopener">localhost:5000</a> 这个地址. 🎉</p><p>从另一个 js 文件来引用 module js 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; script-src.js</span><br><span class="line"></span><br><span class="line">import &#123;appendDiv&#125; from &#39;.&#x2F;append-div.js&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">appendDiv(&#39;Hello from external script&#39;)</span><br></pre></td></tr></table></figure><p>修改 html 文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- index.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type\&#x3D;&quot;module&quot;\&gt;</span><br><span class="line"></span><br><span class="line"> import &#123;appendDiv&#125; from &#39;.&#x2F;append-div.js&#39;</span><br><span class="line"></span><br><span class="line"> appendDiv(&#39;Hello from inline script&#39;)</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script\&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type\&#x3D;&quot;module&quot; src\&#x3D;&quot;.&#x2F;script-src.js&quot;\&gt;&lt;&#x2F;script\&gt;</span><br></pre></td></tr></table></figure><p>下一个知识点,<strong>动态引用</strong>module js 文件::</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; async-script.js</span><br><span class="line"></span><br><span class="line">import &#123;appendDiv&#125; from &#39;.&#x2F;append-div.js&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function go() &#123;</span><br><span class="line"></span><br><span class="line"> appendDiv(&#39;Hello from async script&#39;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export &#123;go&#125;</span><br><span class="line"></span><br><span class="line">Then we can load that using a dynamic import statement:</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; script-src.js</span><br><span class="line"></span><br><span class="line">import &#123;appendDiv&#125; from &#39;.&#x2F;append-div.js&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">appendDiv(&#39;Hello from external script&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import(&#39;.&#x2F;async-script.js&#39;).then(</span><br><span class="line"></span><br><span class="line"> moduleExports \&#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line"> moduleExports.go()</span><br><span class="line"></span><br><span class="line"> &#125;,</span><br><span class="line"></span><br><span class="line"> error \&#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line"> console.error(&#39;there was an error loading the script&#39;)</span><br><span class="line"></span><br><span class="line"> throw error</span><br><span class="line"></span><br><span class="line"> &#125;,</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>你甚至可以这样来引用这个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#96;import \* as d3 from &#39;https:&#x2F;&#x2F;unpkg.com&#x2F;d3?module&#39;&#96;</span><br></pre></td></tr></table></figure><p>The point is, the thing you put in the quotes in your import statements has to point to a JavaScript resource on some server somewhere. <a href="https://unpkg.com/" target="_blank" rel="noopener">Learn more about unpkg.com</a>.</p><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul><li><strong><a href="https://egghead.io/lessons/egghead-use-javascript-modules-in-the-browser?pl=kent-s-blog-posts-as-screencasts-eefa540c&af=5236ad" target="_blank" rel="noopener">Watch “Use JavaScript Modules in the browser” on egghead.io</a></strong></li><li><a href="https://gist.github.com/kentcdodds/48c069462a9ab4223eb93b5e19acee31" target="_blank" rel="noopener">the code for this</a></li><li><a href="https://v8.dev/features/modules" target="_blank" rel="noopener">v8.dev/features/modules</a></li><li><a href="https://www.sitepoint.com/using-es-modules/" target="_blank" rel="noopener">Using ES Modules in the Browser Today</a> by <a href="https://twitter.com/markbrown4" target="_blank" rel="noopener">Mark Brown</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
          <category> esmodule </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不用花钱在教学网站进厂的方案</title>
      <link href="/2021/04/05/freebootcamps/"/>
      <url>/2021/04/05/freebootcamps/</url>
      
        <content type="html"><![CDATA[<blockquote><p>介绍了一些 互联网学习资料</p></blockquote><p>如今，公司要求开发人员毕业的速度比他们毕业的速度还要快，而想要转行的人们已经让一种新的编程教育形式占据了主导地位: 编程训练营。</p><p>直截了当地说，编程训练营为有抱负的开发人员提供了一个合适的空间，他们希望获得全面的教育，而不必花费大量的金钱和时间。编码训练营已经变得很流行，因为它们帮助开发人员学习受欢迎的技术，并成为熟练的程序员，可以在不到一年的时间里找到工作。</p><p>然而，编码训练营并不是没有缺点的。随着价格接近数万元(美国标准)，以及学员找公司不尽如意的坏名声，所谓的“完美解决方案”的训练营现在正受到质疑。</p><p>作为一个在大学里学习软件开发的人，我总是从怀疑的角度来看待编程训练营。在回顾了顶级编程训练营的几个学习课程之后，我开始质疑一个训练营除了让学生付出巨额代价，并让他们声称自己完成了一个特定的大名鼎鼎的训练营之外，还能为他们带来什么。</p><p>当你仔细分析的时候，所有在训练营里学到的技能都是你可以通过在线资源免费自学的技能。</p><p>我意识到训练营有某些优势，包括面授(取决于你选择的教学方式)、人际交往机会、毕业后工作安排的支持可能性，以及学费延期支付，直到你有一份不错的薪水。但是—在一个堪比集训营的时代—存点钱，把课程中的所有知识都免费教给自己，这难道不是明智之举吗？为什么你必须在 16 周的时间里花费数万元来学习特定的技能？为什么不强迫自己在同样的 16 周内免费学习这些技能呢？</p><p>在完成了一个短暂的成本-收益分析之后，回答下面这个问题就变得更加困难了: 编写训练营值得吗？虽然你可以在短时间内学到即时需要的技能、社交机会和职业咨询，但这些并不一定比学费、生活费用和社会成本更重要。</p><p>编写训练营的文章，发表关于是否值得参加他们的课程的文章，往往掩盖了这样一个事实: 在今天这个时代，自学与每周坐在教室里 40 个小时，为基本相同的知识分发数万元一样有效。</p><p>我明白，<em>他们能提供一个底线的担保</em>。</p><a id="more"></a><p>然而，这样做的问题在于，它们提供了令人信服的论据，说明为什么有抱负的开发者不能以其他任何方式进入就业市场。这让人们感到无助，因为他们要权衡把数万元和几个月的失业时间投入到一些没有可靠保证的事情中的后果。</p><p>虽然我同意自我教学并不是适合每个人的方法，但我认为，对于那些自律、有动力、有成为开发人员的坚定目标的人来说，自我教学路线和参加编程训练营一样有效。</p><p>自学的好处是，你不必为了同样的知识而辞去工作并支付数万元。然而，对于每一个优点，都有一个缺点。在这种情况下，你不会因为完成了一个著名的训练营而得到恶名。此外，如果你不是一个积极主动的人，你将会失去社交活动和职业咨询的好处，而这些都是你在训练营里得到的。然而，有一些方法可以避免这些陷阱，这些方法可以帮助你像一个训练营毕业生一样具有竞争力。</p><p>当你把它分解开来，就有可能开发出一个有效的学习课程，类似于编程训练营，遵循类似的时间表，提供给你许多相同的机会。</p><p>为什么不在做出最终决定之前探索一下你的选择呢？</p><h2 id="如何破解编程训练营模式，免费学习你需要的一切"><a href="#如何破解编程训练营模式，免费学习你需要的一切" class="headerlink" title="如何破解编程训练营模式，免费学习你需要的一切?"></a>如何破解编程训练营模式，免费学习你需要的一切?</h2><ol><li>设定你的参数<br>在我们开发一个编码训练营式的课程之前，一些参数必须先到位。这些因人而异，因人而异，所以在开始之前了解这些问题的答案很重要。</li></ol><ul><li>“我愿意在这个课程上花多长时间?” 你需要回答这个问题，根据你愿意花多少周来学习这些概念，以及你每周可以留出多少小时来学习这些概念</li><li>“在这次经历之后，我想做什么?” 全套网页开发人员才能学到的东西，但是通过构建自己的课程，你可以学到任何你想学的技能。所以，问问你自己，你觉得哪个科技行业的工作你会感兴趣，然后调整你的课程来教你自己这些概念</li><li>“我愿意花多少钱?” 这个问题只有在你确实有一点额外的钱并且有兴趣完成一些 MOOCs 的时候才需要回答。许多大学都提供价格合理的 mooc 课程，如果你想学习后台开发或数据科学概念，这些课程可以成为很好的资源 </li></ul><ol start="2"><li>评估你现有的技能<br>是时候通过创建一个技能目录来评估你目前拥有的技能了。这将帮助你避免在你已经掌握的技能上花费不必要的时间，并确保你正在设置你的课程来获得你需要的技能。此外，这个技能清单将帮助你了解你从哪里开始，并提供一个伟大的方式来回顾，看看你有多少进步，到你的课程结束。</li></ol><p>首先创建以下三个列表:</p><ul><li>技术能力(编码经验，技术知识等)</li><li>个人技能(面试技巧、简历撰写、人际关系等)</li><li>商业技能(行业经验和知识，商业沟通技能，管理技能等) </li></ul><ol start="3"><li>决定你需要从这个训练营中学到哪些技能<br>在确定完成课程并发现自己已经掌握了哪些技能之后，你就可以开始拼凑你需要学习的技能。</li></ol><p>首先，对你想要进入的特定领域的编程语言和概念进行一些研究。最好的方法就是看一下招聘广告，找到你想要得到的职位。雇主们列出了他们希望开发人员拥有的所有必需的技术，所以这是一个很好的方法来确定你需要学习的具体技能。另一种方法是阅读趋势指南，这些指南将概述哪些语言和概念最受开发人员欢迎。</p><p>一旦你发现了一个全堆栈 web 开发人员需要知道的所有东西，你就可以开始收集你需要学习这些技能的在线材料。</p><ol start="4"><li>理解编码训练营模式<br>编写训练营的学习课程通常都是以项目为基础的，这迫使学生立即使用他们的新技能。此外，训练营确保毕业生离开时带着作品集、在线展示和其他商业技能，以帮助他们找工作。</li></ol><p>因此，你需要确保你经常建立可以添加到你的简历的项目，确保你在你的课程期间为自己建立一个在线存在，确保你没有忽视你的软技能的学习。</p><p>计划这些事情将帮助你创建一个学习计划，而不用花费数万块钱在编码训练营。</p><ol start="5"><li>构建你的课程<br>让我们构建一个涵盖全堆栈 web 开发的示例课程，同时触及一些软技能，如面试和简历撰写。</li></ol><p>课程将分为三个部分，每个部分学到的技术将与当前的全堆栈 web 开发人员职位相关。列出的大多数在线资源都是免费的，尽管有些可能需要支付费用，或者只能通过小额订阅费或组织凭证获得。</p><p>一个小小的警告: <em>这个课程只是举例来说，只是给你一个关于你的课程看起来如何和你可能想要包括的技术的想法。某些学习领域可能会花费你更长或更短的时间</em>.</p><h3 id="前端开发-第-1-5-周"><a href="#前端开发-第-1-5-周" class="headerlink" title="前端开发: 第 1-5 周"></a><strong>前端开发: 第 1-5 周</strong></h3><h4 id="课程"><a href="#课程" class="headerlink" title="课程:"></a>课程:</h4><ul><li><p>响应式网页设计/盖蒂图片社 freeCodeCamp</p></li><li><p>前端开发库 |freeCodeCamp</p><h4 id="项目"><a href="#项目" class="headerlink" title="项目:"></a>项目:</h4></li><li><p>搭建项目 ー 使用 HTML、 CSS 和 JavaScript (Vanilla JavaScript 或者 Angular、 React 或 Vue 等框架)建立一个网站</p></li></ul><h3 id="后端开发-第-6-14-周"><a href="#后端开发-第-6-14-周" class="headerlink" title="后端开发: 第 6-14 周"></a>后端开发: 第 6-14 周</h3><h4 id="课程-1"><a href="#课程-1" class="headerlink" title="课程:"></a>课程:</h4><ul><li>完全初学者的 Java 教程 | LinkedIn Learning</li><li>用 PHP 构建 Web 应用 | 密歇根大学 <a href="https://www.coursera.org/learn/web-applications-php#faq" target="_blank" rel="noopener">Coursera</a></li><li>SQL 教程ー面向初学者的全数据库课程 |<a href="https://www.youtube.com/watch?v=HXV3zeQKqGY" target="_blank" rel="noopener">freeCodeCamp</a></li><li>全堆栈 JavaScript 教程 |<a href="https://www.youtube.com/watch?v=lauywdXKEXI&t=178s" target="_blank" rel="noopener">freeCodeCamp</a><h4 id="项目-1"><a href="#项目-1" class="headerlink" title="项目:"></a>项目:</h4>搭建项目ーー继续开发为你的第一个 项目建立的网站，但是要提供后端功能，比如让 CRUD 功能链接到数据库</li></ul><h3 id="软技能-第-15-16-周"><a href="#软技能-第-15-16-周" class="headerlink" title="软技能: 第 15-16 周"></a>软技能: 第 15-16 周</h3><h4 id="课程-2"><a href="#课程-2" class="headerlink" title="课程:"></a>课程:</h4><ul><li><p>简历写作 |LinkedIn Learning</p></li><li><p>掌握常见面试问题 |LinkedIn Learning</p></li><li><p>职业战略家找工作指南 |LinkedIn Learning</p></li><li><p>如何制定你的职业生涯规划 LinkedIn Learning</p><h4 id="任务-活动"><a href="#任务-活动" class="headerlink" title="任务/活动:"></a>任务/活动:</h4></li><li><p>创建/更新你的简历和 LinkedIn 个人资料</p></li><li><p>参加一个社交活动</p></li><li><p>与技术招聘人员见面，他们可以帮助你安排工作</p></li><li><p>申请工作</p><h4 id="项目-2"><a href="#项目-2" class="headerlink" title="项目:"></a>项目:</h4><p>项目成果ー把你的专业作品集放在一起，包括你在课程中完成的项目和你最新的简历 </p></li></ul><h3 id="6-运用你学到的技能"><a href="#6-运用你学到的技能" class="headerlink" title="6. 运用你学到的技能"></a>6. 运用你学到的技能</h3><p>编写训练营的优势之一是，它允许你与业内专业人士建立联系，并获得职业咨询。虽然我提到做一些特定的活动，比如参加社交活动，在示例课程的最后一部分会见技术招聘人员，但我强烈建议你在整个学习过程中做这些事情。</p><p>一旦你已经完成或者即将完成你的课程，是时候开始申请工作，并且把自己放在那里，作为一个自学成才的全栈网络开发人员！</p><h2 id="最后的想法"><a href="#最后的想法" class="headerlink" title="最后的想法"></a>最后的想法</h2><p>我不是说编程训练营没有价值。我认为，如果他们能够兑现对学生的承诺，那么他们就是很好的工具。此外，对于那些需要那种学习环境来保持专注和实现目标的学生来说，训练营已经被证明可以提供他们在科技行业找到工作所需要的技能，或者在他们目前的工作岗位上获得大幅提升。</p><p>然而，我并不认为编码训练营是那些想成为开发人员的人的唯一选择。</p><p>编程训练营在时间和金钱上都很昂贵，对于那些需要继续全职工作来获得收入或者有不能被搁置半年的社会承诺的人来说，这些训练营是很差劲的选择。</p><p>因此，我希望你从本文中了解到，成为一名开发人员并不是一个要么全部要么一无所有的过程。你不必投资数万和数月的时间去接受一个可能会也可能不会让你被雇佣 的教育。</p><p>相反，通过建立你自己的课程，你可以获得你通过训练营学到的知识，并且让你继续以适合你需要的方式生活，你仍然可以成为一个有竞争力的开发者。</p><p><a href="%https://betterprogramming.pub/why-you-should-stop-paying-for-coding-bootcamps-in-2021-42ba215e43fc%" title="原文">原文 </a></p>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何做计划&amp;工具推荐</title>
      <link href="/2021/03/28/todoPlan/"/>
      <url>/2021/03/28/todoPlan/</url>
      
        <content type="html"><![CDATA[<p>原文:<a href="https://www.taniarascia.com/everyday-systems/" target="_blank" rel="noopener" title="原文">Everyday Systems That Help Me | Tania Rascia</a><br>自己给翻译了一下,现在有在用她推荐的 Strides ,我用的是免费版本.其他的还是用我之前用的软件.</p><p>读过 <a href="https://zenhabits.net/unoptimizing/" target="_blank" rel="noopener">好生活的误解</a> , 很受触动,我现在认为 <a href="https://www.raptitude.com/2017/07/wise-people-have-rules-for-themselves/" target="_blank" rel="noopener">智者为自己制定规则</a> 对我来说是正确的方法.</p><p>前者试图说明，“不要试图建立一个完美的系统，没有什么是完美的，所以只要放松，习惯混乱，并试图把你所有的注意力集中在一件事情上。”。后者说，“建立自我强加的个人规则，因为当你的标准明确时，你的生活质量就会提高。”。</p><hr><p>这只是我自己给自己设置的”规则”,我个人感觉”眼不见为净”比出现问题了再”亡羊补牢”好.</p><ul><li>停止不停的刷新社交 app</li><li>大幅减少社交媒体</li><li>大幅减少通知</li><li>大幅减少邮件接收</li><li>把工作和生活分开</li></ul><h3 id="社交软件-and-不停刷屏-infinite-scrolling"><a href="#社交软件-and-不停刷屏-infinite-scrolling" class="headerlink" title="社交软件 and 不停刷屏(infinite scrolling)"></a>社交软件 and 不停刷屏(infinite scrolling)</h3><p>我已经训练自己不用浏览 Twitter，不用浏览 reddit，不用浏览 Instagram，我已经很多年没有使用 Facebook 了。根本不用担心自己上瘾担心自己上瘾.</p><p>事情没有绝对的,这些软件也有好的一面,我只是为了避免自己上瘾,没有在手机里装这些 app,但是我需要时候也会看看.</p><h3 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h3><p>我手机上只有两个通知: 电子邮件和短信。(还有日历事件，但是因为 2020 年我几乎没有日历事件，所以我差点忘了。)正如我上面提到的，我的手机上没有任何社交媒体应用。从浅层交互作用中获得的多巴胺越少越好。</p><p>推特是我与外部世界的唯一联系，因为它是我与其他开发者联系的地方，也是我推广我的工作的唯一地方，但我仍然只是每隔几天或每周查看一次。我也让 Slack 远离我的手机。</p><h3 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h3><p>我练习收件箱为零。我尽量及时回复那些需要我回复的邮件。我不回复我收到的所有甚至大部分邮件。我明确表示我不想在东西(来宾帖子、赞助商、广告请求)会被自动标记为垃圾邮件。那些没有明确要求我退订并标记为垃圾邮件的网站为我注册了他们的时事通讯。这导致我很少收到邮件，而我收到的邮件都是能学到东西的人的。</p><h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><p>现在，工作就是我的家，就像我们许多人的家一样。朝九晚五是我的工作时间，5 点以后我不做任何与工作相关的事情，除非有明确的特殊需要。我的手机上没有安装任何工作应用程序或连接(团队、 Slack、 Outlook、工作邮件)。</p><p>Systems</p><hr><p>我一直在高效地使用各种单一用途的应用程序。</p><ul><li>保存我所有的个人笔记、记忆、文章和列表 使用<a href="https://bear.app/" target="_blank" rel="noopener">Bear, 好像是改</a></li><li>跟踪我每天想做的任务/习惯/系统的网站 <a href="https://www.stridesapp.com/" target="_blank" rel="noopener">Strides</a></li><li>One to track the various to-dos I don’t want to forget <a href="https://todoist.com/app/#start" target="_blank" rel="noopener">Todoist</a></li></ul><blockquote><p>Secret note: I built <a href="">my own application</a>(<a href="https://takenote.dev/" target="_blank" rel="noopener">https://takenote.dev/</a>) for handling notes instead of using some other system, because none of the ones I found did exactly what I wanted. In the year I was building this app, I left my thoughts in limbo. I have since realized building and maintaining your own app for something like this is not the best approach. I did learn a ton while doing it, so it was overall a very positive experience.</p></blockquote><p>我不认为它们是不是应用程序真的很重要——你可以使用一本日记或随机的纸张。我不喜欢手写，所以应用程序让我写起来更容易。只要我有一个地方，我知道我可以去检索任何我想要记住或工作，和小日常事情不会落入缝隙。</p><p>我总是觉得我不能做乏味的，daily 任务(预算，计算卡路里，日记)。我过去从来没有做好过，而且我总是那么自由自在的生活！但事实证明，这些习惯并不是那么难以忍受，而且好处远远大于好处。</p><p>当然，你永远不可能一直做所有的事情。你会错过一天的锻炼。你会很累，然后上床睡觉。这很好——只需要毫不气馁地开始每一天崭新的一天。</p><p>Note, I’m only discussing the physical things I do here, not any mental thought processes I have.</p><h3 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h3><p>我每天都做的一些事情.</p><ul><li>整理床铺</li><li>清洗所有用的碗</li><li>整理衣服</li></ul><p>我从来不会把东西弄得一团糟，但是我可能会把事情搁置一、三天——几个盘子堆在一起，衣服堆在地板上，床永远不会整理好。现在我起床后立刻整理床铺，在做饭的时候洗盘子，立刻把衣服放到它们该放的地方。家里总是感觉干净整洁，尽管几乎没有时间和精力必须走进去，因为从来没有超过一天的菜肴或衣服处理的时间。</p><h3 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h3><p>是的，是的。锻炼身体是好的。我觉得我的认知是正确的。因为芝加哥是寒冷的自动对焦，户外运动几乎是不可能的，而且我不想成为健身房的会员。所以我只是选择一个数字(pick up a number ?)，每天做这些事情:</p><ul><li>仰卧起坐 Situps</li><li>俯卧撑 Pushups</li><li>下蹲 Squats</li><li>(如果天气允许的话)去散步/骑自行车 Take a walk/bike ride (weather permitting)</li></ul><p>你真的不能找借口不做前三项，因为它们不需要任何设备或空间。我每天花 45 分钟到 1 小时做这些运动，还有伸展运动。可以很容易地完成，同时一边看与电视或音频一边做。至于散步，我经常在一两英里外选一家咖啡馆，然后走到那里再回来喝杯咖啡。如果是骑自行车的天气，我会每周骑几次 10 英里(1 小时)。</p><h3 id="睡觉"><a href="#睡觉" class="headerlink" title="睡觉"></a>睡觉</h3><p>我经常在凌晨 1 点或 2 点起床，只是听听音乐，玩玩视频游戏，看看 Netflix，或者上上网。我也是一个习惯性打盹的人，通常在早上设置 3 个闹钟。现在我有了一条规则:</p><ul><li>In bed by midnight</li><li>Don’t snooze - wake up to the first alarm</li></ul><p>这很难,但我知道每次我这样生活，事情都会变得更好。有时候，你不得不做那些在当下糟糕的事情，为了今后的一天/一周/一个月/一年/一年/一生。</p><h3 id="Track-net-worth"><a href="#Track-net-worth" class="headerlink" title="Track net worth"></a>Track net worth</h3><p>I’ve been tracking my net worth for several years now. I see a lot of people budget month-to-month, but I like seeing the big picture. I just add up all my assets (checking/savings accounts, retirement accounts, stocks, crypto) and debts (credit cards, car loans, phone payments, student loans). Yes, that means if you have no retirement accounts or money in the bank and you owe $100,000 on student loans, your net worth is negative. I don’t like having any debt, so this helped me early on in my life to pay off all my student loans, and buy a cheap car with cash, and so on.</p><p>I just made my own custom Google Sheets page and I input all the numbers at the end of every month. So this is a “once a month” habit as opposed to some of the other “once a day” ones.</p><h3 id="Learning-and-practice"><a href="#Learning-and-practice" class="headerlink" title="Learning and practice"></a>Learning and practice</h3><p>I haven’t necessarily felt the most amount of focus in my life. Art and music don’t come as naturally to me as they used to. Although I want to practice music, for example, and learn new songs and how to sight read music, I don’t always feel the motivation to do so. Nonetheless, I’ve set up a daily thing to do - in this case, 10 minutes of sheet music flash card practice. It has the dual benefit of being a more productive thing to do while waiting in line somewhere than scrolling through the news or reddit, and I’ll be that much ahead when I do decide to sit down and learn a song.</p><p>So basically it was more productive for me to say “Practice sheet music 10 minutes a day” than “Learn this song” which is bigger and requires more upfront effort. And requires me to do something that isn’t coding related, which is where I’ll naturally gravitate for hobby purposes.</p><h3 id="Do-the-annoying-thing-immediately"><a href="#Do-the-annoying-thing-immediately" class="headerlink" title="Do the annoying thing immediately"></a>Do the annoying thing immediately</h3><p>There is nothing I hate more than dealing with bureaucracy. Paying bills by mail when I can’t do it any other way, calling up any sort of automated system, stuff like that. I usually put off very simple tasks like paying a bill or renewing car insurance for weeks or months, and it’s always sitting in the back of my mind as something I know I need to do but I really, really don’t want to.</p><p>I’m personally making an effort to put those on my daily to-do list and just getting them done. It’s so much better than sitting there and knowing there’s an annoying thing to do for weeks on end.</p><h3 id="Daily-journaling"><a href="#Daily-journaling" class="headerlink" title="Daily journaling"></a>Daily journaling</h3><p>Recently, Matthew McConaughey was <a href="">on the JRE podcast</a>(<a href="https://www.youtube.com/watch?v=BBCl9A9NlRw" target="_blank" rel="noopener">https://www.youtube.com/watch?v=BBCl9A9NlRw</a>) and talked about how he has kept a journal every day for basically his entire life. This is something I’ve never been able to do - I’ve just kind of been going through it day by day and living life in the moment. But there was some great advice there - when things are good, keep track of what’s going well. When things are bad, see all the factors of what was going on in your life during those times as well.</p><p>At least for myself, I occasionally have bouts where life just isn’t going the way I want, and I feel anxious and depressed seemingly out of nowhere. Then at other times, everything is going great, and I don’t know why. How much of it is within my control? How much is from external factors? Without having really kept track of anything that’s going on in my life, it’s really hard to say.</p><p>I’m aiming to adopt this strategy myself now. I can say things are going pretty well for me right now. I feel good at the moment, even with all the political craziness and lockdown and isolation and having a relatively recent breakup. I don’t feel anxiety or depression, and I feel a lot of positivity, hope, and potential. I know I won’t be able to write a detailed diary entry every single day of my life, but I’m making a point to remember to do it relatively often, and when important or interesting things happen.</p><p>Conclusion</p><hr><p>再说一次，这只是我在谈论我在做什么，而不是给你提供建议。所有的情况都是独一无二的，再加上我没有丈夫或孩子让我忙碌。不用上下班也可以腾出时间来处理这些任务。</p><p>顺便说一下，在这些系统中没有任何关于写作。我没有为写作设定任何任务、习惯、目标或系统。我只是想写就写。人们有时会问我，我是怎么写了这么多文章的，想象着我是如此高效，并且一直在做这件事。说实话，我每个月都会有一两天坐下来写作。这样做超过 5 年,你会感觉到你做了很多</p><p>最后，如果我只能恳求你每天做一件事，那就是牙线。照做就是了。只需要 15 秒。</p>]]></content>
      
      
      <categories>
          
          <category> plan </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>滚动样式</title>
      <link href="/2021/03/22/scrollcss/"/>
      <url>/2021/03/22/scrollcss/</url>
      
        <content type="html"><![CDATA[<p>时不时会有些需求 ,如宣传页然后要求页面滚动跟随之类的要求.最近有些想法:</p><ul><li>最好不用 react 之类,最近看资料然后感觉 svelte 不错.</li><li>样式之类 ,个人挺头疼的</li><li>手机适配感觉其实挺难的,但是感觉大部分需求其实还没到用框架的底部,如宣传页面,几个页面,如果设计出的强,照着他给的宽高严格写就行了.然后加一些 meta 头信息</li></ul><p>言归正传,页面滚动相关的 css 如下:</p><h3 id="方案一-scrolltrigger-库"><a href="#方案一-scrolltrigger-库" class="headerlink" title="方案一 scrolltrigger 库"></a>方案一 <a href="https://greensock.com/scrolltrigger/" target="_blank" rel="noopener">scrolltrigger 库</a></h3><ul><li>codepen <a href="https://codepen.io/collection/AEbkkJ?cursor=ZD0xJm89MCZwPTEmdj01MzQzOTYy" target="_blank" rel="noopener">https://codepen.io/collection/AEbkkJ?cursor=ZD0xJm89MCZwPTEmdj01MzQzOTYy</a><br>![scrollcss][pics/scrollcss.gif]</li></ul><h3 id="方案二-Animate-Text-on-Scroll"><a href="#方案二-Animate-Text-on-Scroll" class="headerlink" title="方案二 Animate Text on Scroll"></a>方案二 <a href="https://css-tricks.com/animate-text-on-scroll/" target="_blank" rel="noopener">Animate Text on Scroll</a></h3><p>![scrollcss2][./pics/scrollcss2.gif]<br>Animate text along a path on scroll using SVG and a scoop of vanilla JavaScript. Tutorial by Stephen Shaw (@shshaw) of the @keyframers.<br>  * 💻 Final Code &amp; Demo: <a href="https://cdpn.io/pen/NWKyNqK" target="_blank" rel="noopener">https://cdpn.io/pen/NWKyNqK</a></p><ul><li><p>📺 Video: <a href="https://youtu.be/Tae96ze3xwY" target="_blank" rel="noopener">https://youtu.be/Tae96ze3xwY</a></p></li><li><p>💡 Inspiration: New York Times article, shared by Jen Simmons <a href="https://www.nytimes.com/interactive/2" target="_blank" rel="noopener">https://www.nytimes.com/interactive/2</a>…<br>Additional Resources:</p></li><li><p>Affinity Designer Vector Design App <a href="https://affinity.serif.com/en-us/designer/" target="_blank" rel="noopener">https://affinity.serif.com/en-us/designer/</a></p></li><li><p>SVGOMG by Jake Archibald <a href="https://jakearchibald.github.io/svgomg" target="_blank" rel="noopener">https://jakearchibald.github.io/svgomg</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.clear();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> textPath = <span class="built_in">document</span>.querySelector(<span class="string">"#text-path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> textContainer = <span class="built_in">document</span>.querySelector(<span class="string">"#text-container"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">document</span>.querySelector(textPath.getAttribute(<span class="string">"href"</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pathLength = path.getTotalLength();</span><br><span class="line"><span class="built_in">console</span>.log(pathLength);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateTextPathOffset</span>(<span class="params">offset</span>) </span>&#123;</span><br><span class="line">  textPath.setAttribute(<span class="string">"startOffset"</span>, offset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">updateTextPathOffset(pathLength);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onScroll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  requestAnimationFrame(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> rect = textContainer.getBoundingClientRect();</span><br><span class="line">    <span class="keyword">var</span> scrollPercent = rect.y / <span class="built_in">window</span>.innerHeight;</span><br><span class="line">    <span class="built_in">console</span>.log(scrollPercent);</span><br><span class="line">    updateTextPathOffset(scrollPercent * <span class="number">2</span> * pathLength);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"scroll"</span>, onScroll);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js里的this</title>
      <link href="/2021/03/14/js_this/"/>
      <url>/2021/03/14/js_this/</url>
      
        <content type="html"><![CDATA[<p>这周逛 v2 由看到有人发 js 的 this 的题目,然后说能做出来的都得算多少年薪……..个人感觉这种知识大部分都是为了应付面试,而且道格拉斯克罗克福特 说过 js 是最好的语言,但是你要用它 good part.<br>不过周末正好看到 相关的一篇<a href="https://web.dev/javascript-this/" target="_blank" rel="noopener" title="JavaScript: What is the meaning of this?">文章</a>,发出来,比如有时候为什么调用要加 that =this 避免找不到 还是有点作用的毕竟.</p><h2 id="If-the-function-is-defined-as-an-arrow-function"><a href="#If-the-function-is-defined-as-an-arrow-function" class="headerlink" title="If the function is defined as an arrow function"></a>If the function is defined as an arrow function</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const arrwoFunction &#x3D; ()&#x3D;&gt;&#123;</span><br><span class="line">  console.log(this)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>this 和父级 this 是一样.</p><ul><li>call or apply 不能改变 箭头函数 的 this</li></ul><h2 id="Otherwise-if-the-function-class-is-called-with-new"><a href="#Otherwise-if-the-function-class-is-called-with-new" class="headerlink" title="Otherwise, if the function/class is called with new"></a>Otherwise, if the function/class is called with new</h2><p>this 被设置成 Object.create(….prototype)的返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line"><span class="keyword">this</span>.constructor === <span class="built_in">Object</span>.create(MyClass.prototype).constructor</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">// Logs true</span></span><br><span class="line"><span class="keyword">new</span> MyClass()</span><br></pre></td></tr></table></figure><h2 id="Otherwise-if-the-function-has-a-‘bound’-this-value"><a href="#Otherwise-if-the-function-has-a-‘bound’-this-value" class="headerlink" title="Otherwise, if the function has a ‘bound’ this value"></a>Otherwise, if the function has a ‘bound’ this value</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">someFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> boundObject = &#123; <span class="attr">hellp</span>: <span class="string">"world"</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> boundFunction = someFunction.bind(boundObject);</span><br></pre></td></tr></table></figure><p>当 boundFuncton 被调用,this 指向 boundObject</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// false</span></span><br><span class="line">someFunction() === boundObject;</span><br><span class="line"><span class="comment">//true</span></span><br><span class="line">boundFunction() === boundObject;</span><br></pre></td></tr></table></figure><h2 id="Otherwise-if-this-is-set-at-call-time"><a href="#Otherwise-if-this-is-set-at-call-time" class="headerlink" title="Otherwise, if this is set at call-time"></a>Otherwise, if this is set at call-time</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">someFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> someObject = &#123; <span class="attr">hellp</span>: <span class="string">"world"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(someFunction.call(someObject) === someObject);</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(someFunction.apply(someObject) === someObject);</span><br></pre></td></tr></table></figure><h2 id="Otherwise-if-the-function-is-called-via-a-parent-object"><a href="#Otherwise-if-the-function-is-called-via-a-parent-object" class="headerlink" title="Otherwise, if the function is called via a parent object"></a>Otherwise, if the function is called via a parent object</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  someMethod() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">obj.someMethod() === obj;</span><br></pre></td></tr></table></figure><p>in this case the function is called as a member of obj, so this will be obj,the link is broken if the function is called without its object</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; someMethod &#125; = obj;</span><br><span class="line"><span class="comment">//false</span></span><br><span class="line">someMethod() === obj;</span><br></pre></td></tr></table></figure><h2 id="Otherwise-if-the-function-or-parent-scope-is-in-strict-mode"><a href="#Otherwise-if-the-function-or-parent-scope-is-in-strict-mode" class="headerlink" title="Otherwise, if the function or parent scope is in strict mode"></a>Otherwise, if the function or parent scope is in strict mode</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">someFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  "use strict"</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line">someFunction() === <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><p>如果父级是严格模式,不写’use strict’ 结果也是一样的</p><h2 id="Otherwise"><a href="#Otherwise" class="headerlink" title="Otherwise"></a>Otherwise</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">someFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">someFunction() === globalThis;</span><br></pre></td></tr></table></figure><p>this 指向全局 this</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue3 typescript config</title>
      <link href="/2021/03/08/vue3_ts/"/>
      <url>/2021/03/08/vue3_ts/</url>
      
        <content type="html"><![CDATA[<h1 id="vue3-typescript"><a href="#vue3-typescript" class="headerlink" title="vue3 typescript"></a>vue3 typescript</h1><p>Vue Mastery 现时免费相关课程 <a href="(https://www.vuemastery.com/courses/vue3-typescript/creating-components-with-typescript)">Vue 3 + TypeScript course</a> 到20213月9号,然后自己看了一遍,总结了一下发出来.</p><h2 id="init-with-vuecli"><a href="#init-with-vuecli" class="headerlink" title="init with vuecli"></a>init with vuecli</h2><p>用工具初始化,会有提示是否用ts.</p><h2 id="create-components-with-ts"><a href="#create-components-with-ts" class="headerlink" title="create components with ts"></a>create components with ts</h2><p>对应代码看 <a href="(https://github.com/Code-Pop/Real-World-Vue-3-TypeScript)">Real World Vue 3 TypeScript GitHub Repo</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lant=<span class="string">"ts"</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123;defineComponent &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> EVentCard <span class="keyword">from</span> <span class="string">'../components/EventCard.vue'</span></span><br><span class="line"><span class="keyword">import</span> EventService <span class="keyword">from</span> <span class="string">'../services/EventService'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponnets(&#123;</span><br><span class="line">    name:<span class="string">'EventList'</span>,</span><br><span class="line">    components:&#123;EventCard&#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">events</span>:<span class="literal">null</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created()&#123;</span><br><span class="line">      EventService.getEvents().</span><br><span class="line">        then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">         ...&#125;</span><br><span class="line">    &#125;</span><br><span class="line">....</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="VueDX"><a href="#VueDX" class="headerlink" title="VueDX"></a>VueDX</h2><p>ide 支持是用的[VueDX][ref3]这个工具</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> TodoItem&#123;</span><br><span class="line">   label:<span class="built_in">string</span></span><br><span class="line">   complete:<span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> futureTodoItem =&#123;&#125; <span class="keyword">as</span> TOdoItem</span><br></pre></td></tr></table></figure><h2 id="Props-with-Types"><a href="#Props-with-Types" class="headerlink" title="Props with Types"></a>Props with Types</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineComponent ,PropType &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line">exprt <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line"></span><br><span class="line">    props :&#123;</span><br><span class="line">        event: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">Object</span> <span class="keyword">as</span> PropType&lt;EventItem&gt;,</span><br><span class="line">            <span class="built_in">require</span>:<span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">....</span><br></pre></td></tr></table></figure><h2 id="Computed-amp-Methods-with-Custom-Types"><a href="#Computed-amp-Methods-with-Custom-Types" class="headerlink" title="Computed &amp; Methods with Custom Types"></a>Computed &amp; Methods with Custom Types</h2><p>重点在想返回什么</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.....</span><br><span class="line">computed:&#123;</span><br><span class="line">  firstEvent():EventItem&#123;</span><br><span class="line">      ....</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="others-扩充资料"><a href="#others-扩充资料" class="headerlink" title="others 扩充资料"></a>others 扩充资料</h2><ul><li>The official Vue docs that now has a dedicated TypeScript section that will continue to grow as the ecosystem matures.<ul><li><a href="https://v3.vuejs.org/guide/typescript-support.html#typescript-support" target="_blank" rel="noopener">https://v3.vuejs.org/guide/typescript-support.html#typescript-support</a></li></ul></li><li>And of course, the official TypeScript docs site for an in-depth look at TypeScript<ul><li><a href="https://www.typescriptlang.org/docs/" target="_blank" rel="noopener">https://www.typescriptlang.org/docs/</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> vue3 </category>
          
          <category> typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解 React Native Bridge 的概念</title>
      <link href="/2021/02/28/ReactNativeBridge/"/>
      <url>/2021/02/28/ReactNativeBridge/</url>
      
        <content type="html"><![CDATA[<h1 id="理解-React-Native-Bridge-的概念"><a href="#理解-React-Native-Bridge-的概念" class="headerlink" title="理解 React Native Bridge 的概念"></a>理解 React Native Bridge 的概念</h1><blockquote><p>ref <a href="https://hackernoon.com/understanding-react-native-bridge-concept-e9526066ddb8" target="_blank" rel="noopener">origin</a><br>这里有一篇由 Tadeu Zagallo 发表的很老但是很棒很深奥的文章来解释这座桥是如何在 iOS 上实现的。<br>React Native 通常被认为是一个游戏规则改变者，它允许在移动环境中运行 JavaScript 代码。它的主要优势在于它不像其他竞争对手那样依赖于网络视图(Phonegap，Ionic，Cordova…) ，而是依赖于不同平台提供的真实材料。它具有对所有本机视图和组件的内置访问权，以及对大约70个特定设备 api 的默认访问权(您可以对其进行扩展)。</p></blockquote><p>在编写 React Native 应用程序时，我们构建了本地 ui。这就是关键所在，我们创建 UIView 实例，就像我们创建特定于平台的语言一样:</p><p>我对这个框架的第一个假设是这样的:</p><blockquote><p>他们可能会创建一个 <strong>AST</strong> 并将其转换为可在多个设备上运行</p></blockquote><p>这是有道理的，这实际上就是 Google/Flutter 在开发应用程序时所做的。但这不是RN的方式。</p><p>这种方法的主要问题是，基于 JavaScript 代码的编译目标平台意味着要创建新的编译器。我不知道有哪个现有的工具接受 JavaScript 作为输入代码，能够为每个目标平台生成代码<br><img src="https://hackernoon.com/hn-images/1*bf7U0_eRo_342L3I51gyPQ.png" alt="注意: 有些人尝试过，但只是用opinionated 的方法进行mobile开发"></p><p>但目前存在的是针对自己特定平台的编译器。例如，我们有接受 Java/Kotlin 代码和目标 Android 平台或 Obj-C/Swift 目标 iOS 平台的编译器。它存在许多不同语言和目标的编译器。它们之所以能够很好地完成工作，是因为它们被设计成能够为它们创造出最优化的开发语言。</p><p>使用现有的编译器:<br><img src="https://hackernoon.com/hn-images/1*sucxk9LMqW9booBv4f02cg.png" alt="It’s built with a really opened architecture that allows the code to be run, not only on mobile devices, but also on other platforms:"></p><p>它采用真正开放的架构，不仅可以在移动设备上运行，也可以在其他平台上运行:</p><ul><li>桌面应用程序</li><li>虚拟现实</li><li>还有更多<br>它也可以用于其他框架:</li><li>Weex(deprecated )</li><li>用RN 渲染器 运行angluar 应用</li></ul><p>那么，团队是如何通过使用现有的工具和编译器来构建这样一个与平台和框架无关的框架的呢？</p><h3 id="多个领域相互作用，没有其他"><a href="#多个领域相互作用，没有其他" class="headerlink" title="多个领域相互作用，没有其他"></a><strong>多个领域相互作用，没有其他</strong></h3><p>让我们退一步，看看 React Native 的大图。</p><p>React Native 处理两个领域，JavaScript 和 Native。他们都能够共享信息。他们使用“JS Bridge”进行通信，这无疑是 React Native 架构的核心，这部分提供了如此多的灵活性。</p><p>JS Bridge这个概念为这两个宇宙之间的双向和异步通信提供了一种方式。这里重要的是，它们完全是用不同的技术编写的，但是它们能够通信。<br><img src="https://hackernoon.com/hn-images/1*JT_Smf1u3fJTBY8ev9WAzg.png" alt="JS threads communicates with the native ones through the bridge JS 线程通过桥接与本地线程进行通信"></p><h3 id="记住你的后端"><a href="#记住你的后端" class="headerlink" title="记住你的后端"></a><strong>记住你的后端</strong></h3><p>让我们回想一下，当我们使用多服务通信编写分布式后端应用程序时。<br>我们如何管理在语言/平台级别上完全不同的两个服务之间的通信？<br>我们使用可互操作的语言，如 JSON 或 XML，并且我们依赖异步协议，如 AMQP (或任何其他协议)。<br><img src="https://hackernoon.com/hn-images/1*9PsB7QpiXxg7bnmzS1UgCg.png" alt="Bidirectional communications between heterogeneous services"></p><p>如果我们希望这两个服务进行通信，我们依赖于消息队列。第一个服务将一些命令推送到队列中，另一个服务必须在可能的情况下执行这些命令。<br>React Native 的行为也是如此。JavaScript 域发送异步 JSON 消息，描述 Native 部分应该完成的操作。</p><p>例如，JavaScript 端将发送有关必须由 Native 端创建的视图的信息。当 nativeside 准备好后，它将有效地创建视图:<br><img src="https://hackernoon.com/hn-images/1*UHBv6Ctmm6n6xV0iED8zqA.png" alt="JavaScript sends commands asynchronously to the Native side for view management, with JSON JavaScript"><br>JavaScript 使用 JSON 异步将命令发送到 Native 端进行视图管理<br>在 React Native 中，桥接器支持消息代理角色，处理两个不同开发语言之间的异步命令。</p><p>它提供了多种可能性:</p><ul><li>因为它是异步的，所以它是非阻塞的，因此允许在屏幕上顺利地进行视图管理(6O fps 是 React Native 的黄金目标)</li><li>因为它是解耦的，并且基于可互操作的语言，所以它对其他框架和渲染系统开放 只要他们尊重 React Native bridge 命令界面<br>JS Bridge的语言越是无处不在，越是通用，可能性就越大… … 的确如此！</li></ul><h3 id="桥接的实现"><a href="#桥接的实现" class="headerlink" title="桥接的实现"></a><strong>桥接的实现</strong></h3><p>网桥是用 c/c + + 构建的，因此，可以在多个平台、操作系统等上运行。</p><p>它嵌入了苹果的 <em>JavaScriptCore</em> 框架，这个框架公开了 api 来访问实际的 javacripcore VM 功能。许多人在 Obj-C 和 Swift 世界中使用这些 api。但是有一个 C api，Obj-C 实际上只是一个包装器。</p><p>考虑到这一点，JavaScript 代码可以在 c/c++ 程序中运行。它可以注入变量、函数和声明全局变量来增强 JavaScript 现有代码。React Native 依靠这种魔法来使 JavaScript 与本机世界通信，从而触发 c/c++ 世界中的动作。</p><p>在 JavaScript 代码中注入内容也意味着函数可以由 c/c++ 代码执行。</p><p>这个图很快总结了 JavaScript 世界是如何处理 c/c++ one 的:<br><img src="https://hackernoon.com/hn-images/1*a6tsmWbB6JtgnOWy7Hyx0A.png" alt="The JS code is managed by the JSCore framework \\"></p><h3 id="原生的一面"><a href="#原生的一面" class="headerlink" title="原生的一面"></a>原生的一面</h3><p>原生方面的通信是“最简单的”部分。</p><p>让我们从 iOS 平台开始。由于 Obj-C 是 c 语言的扩展，它可以与 c 语言进行本机通信。这样，JS Bridge 与 Swift/Obj-C 世界之间的通信就变得简单而自然。<br><img src="https://hackernoon.com/hn-images/1*OhI5FguDjCJiMHGkyRUcwg.png" alt=" JS 与 iOS 世界交互的高层示意图"></p><p>在 Android 平台上，我们需要依靠 Java本地接口来与桥接器进行对话。<br><img src="https://hackernoon.com/hn-images/1*q16vcoe7CRolZLOCoG5_Pg.png" alt="JS 与 Android 世界交互的高级图表"></p><p>如果您对 React Native 内部构件有进一步的问题，请告诉我。关于这个话题，我会尽量提供我所知道的一切。</p>]]></content>
      
      
      <categories>
          
          <category> h5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> \- </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端-相关技能点我了解的</title>
      <link href="/2021/02/06/frontend-what-i-leaned/"/>
      <url>/2021/02/06/frontend-what-i-leaned/</url>
      
        <content type="html"><![CDATA[<h1 id="js该学点啥"><a href="#js该学点啥" class="headerlink" title="js该学点啥"></a>js该学点啥</h1><p>“没有人因为java而失业” 对于该如何选择开发语言,我个人还是很喜欢javascript.但是也感觉挺痛苦的,对于一个跟着别人学的人来说.学过了vue,react各种框架,感觉其实基本就是一个功能学了不同的实现方式,现在想想感觉还是挺没啥成就感的.<br>总结一下我现在的感觉的js相关的技能点</p><h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><p>这个是在我学习redux时候接触的.然后最近看过了json的作者的在frontendmaster的课程,然后他总结99%的js开发者不知道js其实还可以这么写….感觉老爷子都胡子花白,虽然他的课程是16年的,而且长达10小时,但是感觉还是值得一看的.作为入门.</p><ul><li>最近想用jupyter把学习的做成js笔记,有运行结果,一目了然.这个就涉及如何做笔记的话题,我现在react是用mdx,反正就是那种可以运行看看效果的那种.</li></ul><h3 id="deno"><a href="#deno" class="headerlink" title="deno"></a>deno</h3><p>最近在了解的,其实我列出来,主要是想说一下node的作者在推出这个的时候说自己后悔node的几个点,那个视频在youtube上有,而且还是有专门的中文翻译,感觉可能是推广需要,但是感觉node 的作者还很年轻感觉:</p><ul><li>前端发展好快,他是用rust开发的,rust是火狐的公司M开发的…..最近看资料好多人想学一下这个语言…..</li><li>他说的一些如何编译node ,如何平台适应,如何通过v8优化性能,感觉自己都没怎么接触过….所以多看看感觉还是很能开阔自己眼界….提醒自己多学多看,周末出去找个咖啡馆学习多么重要……..<h3 id="node"><a href="#node" class="headerlink" title="node"></a>node</h3>这个主要是我有几个框架想学习……涉及graphql的……感觉自己做过几个demo,但是还是没有串联起来……….</li></ul><h3 id="parcel"><a href="#parcel" class="headerlink" title="parcel"></a>parcel</h3><p>这个就是感觉学过react,vue 老感觉虽然花了很多时间,但是感觉没啥成就感,就是感觉老是新瓶装旧酒…..技能老是提高不了…….关于如何作出一个东西的方式…….</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>思考一下前端</title>
      <link href="/2021/01/30/frontend-think/"/>
      <url>/2021/01/30/frontend-think/</url>
      
        <content type="html"><![CDATA[<pre><code>最近工作上老有种感觉后端压着前端的感觉,老感觉刚毕业的后端也觉得自己挺厉害,感觉没法商量.但是感觉自己其实花费了好多时间去学习...可能也算是人生误区吧,最近就开始多看一些算法相关的了又.然后说最好的学习是写下来,然后给别人讲明白.然后又开始写写博客了.虽然只是只言片语吧....给自己立的目标的一部分.(用todo软件 写的 每周得写点啥目标.)今年自己的目标老是想找到一个自己架构一个系统的方式,然后去年是找到了**jhipster**这个springweb,### 今年因为看了很长时间frontendMaster课程,然后划时间看graphql 这个架构.实际动手是:- 在一个原有项目(小度鱼社区)上改过- 看frontendmasters课 关于 gatby 的框架的(快速搭建官网,博客之类的网站)- 各种中断的续看资料.### django框架的这个是自己前年做过一个demo性质的...然后年底时候听播客,说graphql 不火了.....不过我还是想坚持自己实现一把吧.看到的其他言论是 用go去搭建基础框架......这个感觉自己比较缺的是信念去学习.PS:自己的域名又到期了,然后愤与续费太贵,又买了一个域名(www.jingzhengyi.top)......这个网站又要成为历史了........</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机教育中缺失的一课</title>
      <link href="/2021/01/22/mit-missing-semater/"/>
      <url>/2021/01/22/mit-missing-semater/</url>
      
        <content type="html"><![CDATA[<h3 id="MIT-课程"><a href="#MIT-课程" class="headerlink" title="MIT 课程"></a>MIT 课程</h3><p>最近看的一个 MIT 学生给学生开的课 <a href="%https://missing-semester-cn.github.io/%">missing semester</a> ,有中文翻译,感觉开发了好几年,还是能学到很多东西,其中 vim 我花了半天时间去按照他的配置,感觉终于能够可以替代 vscode 真正用用了.. 有对应的课程录屏.<br>主要讲了: - Shell 工具和脚本 - 编辑器 (Vim) - 数据整理 - 命令行环境 - 版本控制(Git) - 调试及性能分析 - 元编程 - 安全和密码学 - 大杂烩 - 提问&amp;回答</p><h4 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h4><p>这块我花费了最多时间 ,课程里提供的几份配置里,我选的 joe 的 dotfile 里的配置,他的 dotfile 有好多东西,然后是通 stow 做软连接连接到他的配置里的.反正一开始有点蒙.想全盘拷贝他的时候,出了好些问题…..然后仔细看了看才搞好.不过最终效果还是挺满意的.</p><h5 id="nvim"><a href="#nvim" class="headerlink" title="nvim"></a>nvim</h5><p>joe 其实是用的 nvim ,感觉这个挺牛逼,效果还不错,然后作者主要是配置了 python 相关的,如 lint, 然后用的 Plug 作为插件管理,其实 vim8 可以完全抛弃插(~/.vim/pack/vendor/start/) ,但是 nvim 其实是重新实现了一遍 vim .有几个地方不兼容. 然后.vimrc 里面有自定义的快捷键.</p><p>几个好用的插件:</p><ul><li>coc.vim 自动补全,代码高亮,还有些导航之类的功能</li><li>ale.vim 导航</li><li>fzf.vim 模糊查询</li></ul><h4 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h4><p>有几个点 感觉以前不知道 ,– -</p><ul><li>.aliases 有些 aliase 还挺好玩的感觉,比如 mac 里的 ls 之类的其实是 BSD 版本,然后 aliase 里有个如何替换,这样换平台就不会不一样了.</li></ul><h4 id="mac-工具"><a href="#mac-工具" class="headerlink" title="mac 工具"></a>mac 工具</h4><ul><li>hammperspoon 可以做写自动化的事情,通过写 lua 小脚本</li><li>yabai 平铺式的窗口管理,感觉好几个屏幕,或者大屏的挺好用的</li></ul><h4 id="scripts"><a href="#scripts" class="headerlink" title="scripts"></a>scripts</h4><ul><li>ocr 这个 ocr hammperspoon 里配置一下就可以截屏然后拷贝文字,不过大部分时候对着视频里文字出错挺高,不过还是有点用</li></ul><h4 id="git"><a href="#git" class="headerlink" title="git"></a>git</h4><p>这个先从 git 数据模型讲,感觉还是学到好些.</p>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
          <category> shell </category>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vsCodeVim插件</title>
      <link href="/2021/01/22/vim/"/>
      <url>/2021/01/22/vim/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/VSCodeVim/Vim#mac" target="_blank" rel="noopener">https://github.com/VSCodeVim/Vim#mac</a></p><p>快速移动写代码，除了输入字符之外最常用的操作就是移动光标。vim除了hjkl ctrl+u ctr+f外还有更快捷的移动方式，这里介绍2个插件都是vscode自带的。</p><ol><li>vim-easymotion</li></ol><p>设置”vim.easymotion”: true 开启这个模式。<br><code>&lt;leader&gt;&lt;leader&gt; t/T &lt;char&gt;</code> 能够向前/向后快速到达可见范围内的某字符(<char>)的位置。<br><code>&lt;leader&gt;&lt;leader&gt; w/b</code> 向前/向后到达可见范围内任何单词的开头。<br><code>&lt;leader&gt;&lt;leader&gt; e/ge</code> 向前/向后到达可见范围内任何单词的结尾。<br><code>&lt;leader&gt;&lt;leader&gt; k/j</code> 向前/向后到达可见范围内任何行的行首。</p><ol start="2"><li>vim-sneak</li></ol><p>sneak模式下键入s后，再输入2个字符就可以跳转到目标位置。<br>s<char><char> 往前跳转到目标位置。<br>S<char><char> 往后跳转到目标位置。</p><p>链接：<a href="https://www.jianshu.com/p/cbfa86c8d8a5" target="_blank" rel="noopener">https://www.jianshu.com/p/cbfa86c8d8a5</a></p><p>3.vim-surround   </p><p>Based on <a href="https://github.com/tpope/vim-surround" target="_blank" rel="noopener">surround.vim</a>, the plugin is used to work with surrounding characters like parenthesis, brackets, quotes, and XML tags.</p><table><thead><tr><th>Setting</th><th>Description</th><th>Type</th><th>Default Value</th></tr></thead><tbody><tr><td>vim.surround</td><td>Enable/disable vim-surround</td><td>Boolean</td><td>true</td></tr></tbody></table><p><code>t</code> or <code>&lt;</code> as <code>&lt;desired char&gt;</code> or <code>&lt;existing char&gt;</code> will do tags and enter tag entry mode. Using <code>&lt;CR&gt;</code> instead of <code>&gt;</code> to finish changing a tag will preserve any existing attributes.</p><table><thead><tr><th>Surround Command</th><th>Description</th></tr></thead><tbody><tr><td><code>d s &lt;existing char&gt;</code></td><td>Delete existing surround</td></tr><tr><td><code>c s &lt;existing char&gt; &lt;desired char&gt;</code></td><td>Change surround existing to desired</td></tr><tr><td><code>y s &lt;motion&gt; &lt;desired char&gt;</code></td><td>Surround something with something using motion (as in “you surround”)</td></tr><tr><td><code>S &lt;desired char&gt;</code></td><td>Surround when in visual modes (surrounds full selection)</td></tr></tbody></table><p>Some examples:</p><ul><li><code>&quot;test&quot;</code> with cursor inside quotes type cs”‘ to end up with <code>&#39;test&#39;</code></li><li><code>&quot;test&quot;</code> with cursor inside quotes type ds” to end up with <code>test</code></li><li><code>test</code> with cursor on word test type ysaw) to end up with <code>(test)</code></li></ul><h4 id="苹果系统问题-To-enable-key-repeating"><a href="#苹果系统问题-To-enable-key-repeating" class="headerlink" title="苹果系统问题 To enable key-repeating"></a>苹果系统问题 To enable key-repeating</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># For VS Code</span></span><br><span class="line">$ defaults write com.microsoft.VSCode ApplePressAndHoldEnabled -bool <span class="literal">false</span></span><br><span class="line"><span class="comment"># For VS Code Insider</span></span><br><span class="line">$ defaults write com.microsoft.VSCodeInsiders ApplePressAndHoldEnabled -bool <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 还原设置</span></span><br><span class="line">$ defaults delete -g ApplePressAndHoldEnabled</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
          <category> tools </category>
          
          <category> vsCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10Linux子系统</title>
      <link href="/2021/01/22/win10Linux%E5%AD%90%E7%B3%BB%E7%BB%9F/"/>
      <url>/2021/01/22/win10Linux%E5%AD%90%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>今天在配置<a href="https://github.com/zeit/hyper" target="_blank" rel="noopener">hyper</a>的时候说可以反向从linux的子系统使用win安装的命令,然后发现得需要升级内核系统，升级预览版preview后后发现win10加了好些功能，逐渐向mac系统靠拢。。。。作为个折腾党来说，虽然不怎么能用到。。。但是还是挺乐此不疲的。</p><h3 id="WSL"><a href="#WSL" class="headerlink" title="WSL"></a>WSL</h3><ul><li><a href="https://docs.microsoft.com/en-us/windows/wsl/interop" target="_blank" rel="noopener">wsl linux子系统和wind互通。。官网好些例子</a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">C:\temp&gt; wsl</span><br><span class="line">/mnt/c/temp/$ <span class="built_in">cd</span> ~</span><br><span class="line">~$ notepad.exe foo.txt</span><br><span class="line">~$ ls | grep foo.txt</span><br><span class="line">~$ <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">C:\temp&gt;dir | findstr foo.txt</span><br><span class="line">09/27/2016  02:15 PM                14 foo.txt</span><br></pre></td></tr></table></figure></li><li>linux 调用 win安装程序。<br>这个我没成功。。我是想试一下参考<a href="https://zhuanlan.zhihu.com/p/34667658" target="_blank" rel="noopener">混合 Windows 和 Linux 的环境</a>试了一下node ，不好使。。感觉是“parmgram File” 这种带空格的路径有问题？</li></ul><h3 id="其他功能，感觉挺好用的几个"><a href="#其他功能，感觉挺好用的几个" class="headerlink" title="其他功能，感觉挺好用的几个"></a>其他功能，感觉挺好用的几个</h3><ul><li>emjo表情（升级到17<br><code>win+.</code></li><li>剪贴板历史<br><code>win+v</code></li><li>截图<br><code>win+shift+s</code></li><li><a href="http://www.cnblogs.com/rainman/p/3457227.html" target="_blank" rel="noopener">Dos命令查看端口占用及关闭进程</a></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考\"></a>参考\</h3><ul><li><a href="https://github.com/microsoft/Terminal" target="_blank" rel="noopener">windows Terminal</a></li><li><a href="https://zhuanlan.zhihu.com/p/34667658" target="_blank" rel="noopener">混合 Windows 和 Linux 的环境</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> win10 </category>
          
          <category> ubuntu </category>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> win10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云ECS免密码登陆</title>
      <link href="/2021/01/22/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E9%99%86/"/>
      <url>/2021/01/22/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E9%99%86/</url>
      
        <content type="html"><![CDATA[<h2 id="使用SSH密钥对连接Linux实例"><a href="#使用SSH密钥对连接Linux实例" class="headerlink" title="使用SSH密钥对连接Linux实例"></a>使用SSH密钥对连接Linux实例</h2><p>阿里云ESC远程登陆只支持pem特定的ssh免密登陆,之前一直不知道,阿里客服打电话过来回访时候问了一下,才知道官方文档有写.</p><p><a href="https://help.aliyun.com/document_detail/51798.html?spm=a2c4g.11186623.2.12.303874f7nqJwUC#linux" target="_blank" rel="noopener">使用SSH密钥对连接Linux实例</a></p><p>配置完后,对自动下载的pem做配置.修改 ~/.ssh/config文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host ecs    &#x2F;&#x2F; 输入ECS实例的名称</span><br><span class="line">HostName 192.*.*.*   &#x2F;&#x2F; 输入ECS实例的公网IP地址</span><br><span class="line">Port 22   &#x2F;&#x2F; 输入端口号，默认为22</span><br><span class="line">User root   &#x2F;&#x2F; 输入登录账号</span><br><span class="line">IdentityFile ~&#x2F;.ssh&#x2F;ecs.pem &#x2F;&#x2F; 输入.pem私钥文件在本机的地址</span><br></pre></td></tr></table></figure><p>重启:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sshd restart</span><br><span class="line">ssh ecs</span><br></pre></td></tr></table></figure><p>我自己mac电脑配置了,但是还是要输入密码,后来查是权限问题 <a href="https://learnku.com/articles/19580" target="_blank" rel="noopener">https://learnku.com/articles/19580</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#设置 authorized_keys 的读写权限，只对其所有者开放</span><br><span class="line">chmod -R 700 ~&#x2F;.ssh</span><br><span class="line">chmod 644 ~&#x2F;.ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
          <category> ECS </category>
          
          <category> SSH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单点登陆方案</title>
      <link href="/2021/01/22/sso/"/>
      <url>/2021/01/22/sso/</url>
      
        <content type="html"><![CDATA[<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ul><li>CAS<ul><li>多个应用共用一个登陆设置.</li><li>我现在做的前后端分离的,不用关注权限问题,最后部署时候统一设置单点登陆就可以</li></ul></li><li>手机端不适合基于session的场景,看了jwt方案.<ul><li>现在好像auth2.0的方案也挺流行,之前工作中主要是用这个实现客户权限控制,最近感觉主要是感觉想微博登陆账号这种不用直接提过密码就可以授权的方案中.</li></ul></li></ul><hr><p><strong>注意以下实现主要是基于python django drf.</strong></p><h3 id="CAS方案"><a href="#CAS方案" class="headerlink" title="CAS方案"></a>CAS方案</h3><h5 id="单点登陆服务端-server-django-mama-cas"><a href="#单点登陆服务端-server-django-mama-cas" class="headerlink" title="单点登陆服务端:server django-mama-cas"></a>单点登陆服务端:<a href="https://github.com/jbittel/django-mama-cas" target="_blank" rel="noopener">server django-mama-cas</a></h5><h5 id="客户端-django-cas-ng"><a href="#客户端-django-cas-ng" class="headerlink" title="客户端:django-cas-ng"></a>客户端:<a href="https://github.com/mingchen/django-cas-ng" target="_blank" rel="noopener">django-cas-ng</a></h5><ul><li>看cas_ng代码 默认admin开头的,匹配<code>CAS_ADMIN_PREFIX</code>这个配置更改,但是感觉这个不够灵活吧<ul><li><a href="https://stackoverflow.com/questions/51652452/using-django-cas-ng-to-authenticate-on-admin-site" target="_blank" rel="noopener">django-cas-ng authenticate on admin site</a></li></ul></li></ul><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><ul><li>如果不加<code>CAS_ADMIN_PREFIX</code>,登陆/admin/会跳转,加上就/auth/test/ 这个测试</li></ul><h3 id="非session方案"><a href="#非session方案" class="headerlink" title="非session方案"></a>非session方案</h3><h5 id="sso-rest风格"><a href="#sso-rest风格" class="headerlink" title="sso rest风格"></a>sso rest风格</h5><ul><li><a href="https://django-rest-auth.readthedocs.io/en/latest/configuration.html" target="_blank" rel="noopener">django-rest-auth</a> demo 也是在rest-framework-tutorial ,然后放在了gitte上面.</li><li>测试<br>官方代码自己集成了swagger测试</li></ul><h4 id="REST-framework-JWT-Auth"><a href="#REST-framework-JWT-Auth" class="headerlink" title="REST framework JWT Auth"></a><a href="https://getblimp.github.io/django-rest-framework-jwt/" target="_blank" rel="noopener">REST framework JWT Auth</a></h4><ul><li>测试<br>参考官网</li><li><a href="https://www.jianshu.com/p/f00b3873f6f1" target="_blank" rel="noopener">JWT 配置</a><br>比如 <code>JWT_RESPONSE_PAYLOAD_HANDLER</code> 可以重写然后配置<pre><code class="python"><span class="comment"># urls.py</span><span class="keyword">from</span> rest_framework_jwt.views <span class="keyword">import</span> obtain_jwt_tokenurlpatterns = [url(<span class="string">r'^authorizations/&gt;, obtain_jwt_token),</span><span class="string">]</span><span class="string"># utils.py</span><span class="string">def jwt_response_payload_handler(token, user=None, request=None):</span><span class="string">"""</span><span class="string">自定义jwt认证成功返回数据</span><span class="string">"""</span><span class="string">return {</span><span class="string">'</span>token<span class="string">': token,</span><span class="string">'</span>user_id<span class="string">': user.id,</span><span class="string">'</span>username<span class="string">': user.username</span><span class="string">}</span><span class="string"># 修改配置 # JWT</span><span class="string">JWT_AUTH = {</span><span class="string">'</span>JWT_EXPIRATION_DELTA<span class="string">': datetime.timedelta(days=1),    '</span>JWT_RESPONSE_PAYLOAD_HANDLER<span class="string">':'</span>users.utils.jwt_response_payload_handle<span class="string">r',</span><span class="string">}</span></code></pre></li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://stackoverflow.com/questions/47591102/making-sso-with-django-rest-framework" target="_blank" rel="noopener">Making SSO with django rest framework</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> sso </category>
          
          <category> cas </category>
          
          <category> django </category>
          
          <category> drf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sso </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tailwindcss</title>
      <link href="/2021/01/22/tailwindcss/"/>
      <url>/2021/01/22/tailwindcss/</url>
      
        <content type="html"><![CDATA[<h2 id="tailWindCss"><a href="#tailWindCss" class="headerlink" title="tailWindCss"></a>tailWindCss</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>  写React 项目 有个痛点,有时候想拷贝个已有的js文件,因为有样式,但是现在基本主流都是cssModule ,所以还得拷贝个xx.less文件之类.做Vue开发也是,如果写.vue文件,本来文件就挺长,代码要用鼠标滚轮一直滚看,还要写style部分,又是一坨代码.看着文件一长个人就有点不舒服.</p><h3 id="救星"><a href="#救星" class="headerlink" title="救星"></a>救星</h3><p>  最近看到<a href="https://tailwindcss.com/docs/" target="_blank" rel="noopener">tailwincss</a>,感觉基本解决了这个痛点.可以参考这篇<a href="http://zhaima.tech/post/tailwindcss%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B" target="_blank" rel="noopener">文章</a></p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>umi适配华为自带浏览器和QQ浏览器</title>
      <link href="/2021/01/22/umi%E9%80%82%E9%85%8D%E5%8D%8E%E4%B8%BA%E8%87%AA%E5%B8%A6%E6%B5%8F%E8%A7%88%E5%99%A8%E5%92%8CQQ%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
      <url>/2021/01/22/umi%E9%80%82%E9%85%8D%E5%8D%8E%E4%B8%BA%E8%87%AA%E5%B8%A6%E6%B5%8F%E8%A7%88%E5%99%A8%E5%92%8CQQ%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>最近准备面试一个H5的工作,然后准备了用umi+Django写一个H5前端页面练练手.写了一个<a href="http://www.jingzy.top:8002" target="_blank" rel="noopener">几个页面</a>,在UC,chrome浏览器和微信里面都正常,然后发现在华为自带浏览器,后来发现qq浏览器,都是感觉没调用webpack 打包生成的js……查了一下资料,说是华为自带的浏览器内核很老(我的是华为M5 android8),umi的GitHub也有人提,但是回复都没怎么看到希望. 折腾了半天后,用一下配置可行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">targets: &#123;</span><br><span class="line">chrome: <span class="number">58</span>,</span><br><span class="line">ie: <span class="number">9</span>,</span><br><span class="line">&#125;,</span><br><span class="line">exportStatic:&#123;&#125;,</span><br></pre></td></tr></table></figure><p>参考:<br><a href="https://github.com/umijs/umi/issues/304" target="_blank" rel="noopener">使用 umi 在华为手机上不渲染页面,加载出空白页 #304</a></p>]]></content>
      
      
      <categories>
          
          <category> umi </category>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> h5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用 socket.io 实现消息实时推送</title>
      <link href="/2021/01/22/socket-io/"/>
      <url>/2021/01/22/socket-io/</url>
      
        <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>当发生了用户被点赞、评论、关注等操作时，需要由服务器向用户实时地推送一条消息。</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ul><li><p>后台Node.js</p><h3 id="后端推送消息的处理流程"><a href="#后端推送消息的处理流程" class="headerlink" title="后端推送消息的处理流程"></a>后端推送消息的处理流程</h3></li><li><p>在 Node 服务器建立一个用户信息和 socket id 的映射表，因为同一用户可能打开了多个页面，所以他的 socket id 可能存在多个值。当用户建立连接时，往其中添加值；用户断开连接后，删除相应值。</p></li><li><p>当 Java 后台存在需要推送的消息时，会向 Node 服务器的 /api 路径 post 一条消息，其中包括用于标识用户的 tokenId 和其它数据。</p></li><li><p>Node 服务器接收到 post 请求后，对请求内容进行处理。根据 tokenId 找出与该用户对应的 socket id，socket.io 会根据 id 来向用户推送消息。</p></li></ul><h3 id="对用户信息的处理"><a href="#对用户信息的处理" class="headerlink" title="对用户信息的处理"></a>对用户信息的处理</h3><p>方便起见，这里只用一个数组保存用户信息，实际工作中可以根据需要放入数据库中保存。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">global.users = []; <span class="comment">// 记录下登录用户的tokenId, socketId</span></span><br></pre></td></tr></table></figure><p>当用户登录时，client 会向 server 发送 user_login 事件，服务器接收到后会做如下操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">socket.on(<span class="string">'user_login'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">info</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; tokenId, userId, socketId &#125; = info;</span><br><span class="line">    addSocketId(users, &#123; tokenId, socketId, userId &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>addSocketId() 会向 users 数组中添加用户信息，不同用户通过 tokenId 进行区分，每个用户有一个 socketIds 数组，保存可能存在的多个 socketId。该函数的具体代码可见 src/utils.js 文件。</p><p>同理，还有一个 deleteSocketId() 函数用于删除用户信息，代码可见同一文件。</p><p>在获取了用户的 tokenId 之后，就需要找到对应的 socketId，然后向特定用户推送消息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只向 id = socketId 的这一连接发送消息</span></span><br><span class="line">io.sockets.to(socketId).emit(<span class="string">'receive_message'</span>, &#123;</span><br><span class="line">    entityType,</span><br><span class="line">    data</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>服务器的思路大致如此，接下来介绍客户端中是如何进行相应的处理的。</p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>Socket.io 的初始化<br>首先在 html 文件中引入 Socket.io 的 client 端文件，例如通过 CDN 引入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其它的引入方式:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> io = <span class="built_in">require</span>(<span class="string">'socket.io-client'</span>);</span><br><span class="line"><span class="comment">// or with import syntax</span></span><br><span class="line"><span class="keyword">import</span> io <span class="keyword">from</span> <span class="string">'socket.io-client'</span>;</span><br></pre></td></tr></table></figure><p>引入 Socket.io 后就获得了 io 函数，通过它来与消息推送服务器建立连接。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设你将 Node 服务器部署后的地址为：https://www.example.com/ws</span></span><br><span class="line"><span class="comment">// 则： WS_HOST = 'https://www.example.com'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> msgSocket = io(<span class="string">`<span class="subst">$&#123;WS_HOST&#125;</span>`</span>, &#123;</span><br><span class="line">    secure: <span class="literal">true</span>,</span><br><span class="line">    path: <span class="string">'/ws/socket.io'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果监听本地：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> msgSocket = io(<span class="string">'http://localhost:4001'</span>);</span><br></pre></td></tr></table></figure><p>这里如果写成 io(‘<a href="https://www.example.com/ws&#39;" target="_blank" rel="noopener">https://www.example.com/ws&#39;</a>) 会出现错误，需要将 /ws 写入path中。</p><p>为了能在其它文件使用这一变量，可将 msgSocket 作为一个全局变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.msgSocket = msgSocket;</span><br></pre></td></tr></table></figure><h3 id="用户建立连接"><a href="#用户建立连接" class="headerlink" title="用户建立连接"></a>用户建立连接</h3><p>// 用户登录时，向服务器发送用户的信息。服务器会在收到信息后建立 socket 与用户的映射。<br>msgSocket.emit(‘user_login’, {<br>    userId,<br>    socketId: msgSocket.id,<br>    tokenId<br>});</p><pre><code>##demo[demo博文原文](https://segmentfault.com/a/1190000010974426)[demo](https://github.com/noiron/socket-message-push)##资料[socket-io官网](https://socket.io/get-started/chat/)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
          <category> socket-io </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NativeBase 主题配置</title>
      <link href="/2021/01/22/NativeBase_theme/"/>
      <url>/2021/01/22/NativeBase_theme/</url>
      
        <content type="html"><![CDATA[<p><a href="https://docs.nativebase.io/Components.html#toast-with-duration-headref" target="_blank" rel="noopener">NativeBase</a> 个人感觉资料等在开源的react-native组件库中算是比较出色的,官网还提供了不少集成其他状态管理,路由的demo.查资料没有看到过关于他V2版本的主题相关的中文说明,他官网感觉说的也不直白.大概按我的理解说一下他的<a href="https://docs.nativebase.io/Customize.html#Customize" target="_blank" rel="noopener">自定义主题配置</a></p><h4 id="NativeBase-Customizer"><a href="#NativeBase-Customizer" class="headerlink" title="NativeBase Customizer"></a>NativeBase Customizer</h4><p>官网有提供<a href="https://nativebase.io/customizer/#" target="_blank" rel="noopener">可视化主题颜色配置页面</a>,设置完颜色后,下载variables.js .可以下载单个组件的,也可以设置全部的.</p><h4 id="Theme-and-Variables"><a href="#Theme-and-Variables" class="headerlink" title="Theme and Variables"></a>Theme and Variables</h4><p>运行 <code>node node_modules/native-base/ejectTheme.js</code> 将nb的主题配置暴露到<strong>native-base-theme</strong>,包含俩个目录</p><blockquote><p><strong>components</strong>: Theme styling files for all the NativeBase components. This is where you would change the style properties of the components if you need to.</p></blockquote><blockquote><p>Example, if you need to change the height of Button component, you’ll need to change height in native-base-theme/components/Button.js.</p></blockquote><blockquote><p><strong>variables</strong>: Contains three preset theme variable files, namely Platform, material, commonColor. You can change the variables (for color, fontFamily, iconFamily etc) for a uniform look and feel throughout your app.</p></blockquote><h4 id="Set-Up"><a href="#Set-Up" class="headerlink" title="Set Up"></a>Set Up</h4><p>官网提供的下面的这个例子,Platform,Material,CommonColor,从variables目录里面选择一个官方提供了默认三套主题,可以修改一下对应js的变量,参考<a href="https://docs.nativebase.io/docs/ThemeVariables.html" target="_blank" rel="noopener">Theme variables Cheat sheet</a>设置.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Container, Content, Text, StyleProvider &#125; <span class="keyword">from</span> <span class="string">'native-base'</span>;</span><br><span class="line"><span class="keyword">import</span> getTheme <span class="keyword">from</span> <span class="string">'./native-base-theme/components'</span>;</span><br><span class="line"><span class="keyword">import</span> material <span class="keyword">from</span> <span class="string">'./native-base-theme/variables/material'</span>;</span><br><span class="line">​<span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ThemeExample</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;StyleProvider style=&#123;getTheme(material)&#125;&gt;</span><br><span class="line">        &lt;Container&gt;</span><br><span class="line">          &lt;Content&gt;</span><br><span class="line">            &lt;Text&gt;</span><br><span class="line">              I have changed the text color.</span><br><span class="line">            &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>Content&gt;</span><br><span class="line">        &lt;<span class="regexp">/Container&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>StyleProvider&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Theme-Color"><a href="#Theme-Color" class="headerlink" title="Theme Color"></a>Theme Color</h4><h4 id="Theme-Font"><a href="#Theme-Font" class="headerlink" title="Theme Font"></a>Theme Font</h4><p>可选择字体</p><h4 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h4><ul><li>With Variables<br>比如修改Button样式,可以从可视化修改页面下载variable.js,然后结合下面配置<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Container, Content, Button, Text, StyleProvider &#125; <span class="keyword">from</span> <span class="string">'native-base'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Container, Content, Button, Text, getTheme, StyleProvider &#125; <span class="keyword">from</span> <span class="string">'native-base'</span>;</span><br><span class="line"><span class="comment">//  从可视化网站下载</span></span><br><span class="line"><span class="keyword">import</span> customVariables <span class="keyword">from</span> <span class="string">'./Themes/variable'</span>;</span><br><span class="line">​<span class="comment">// buttonTheme is the customized theme of Button Component​,</span></span><br><span class="line"><span class="comment">// 我理解就是native-base-theme/components下面找对应的js</span></span><br><span class="line"><span class="keyword">import</span> buttonTheme <span class="keyword">from</span> <span class="string">'./Themes/buttonTheme'</span>;</span><br><span class="line">​<span class="comment">// getTheme is default theme of NativeBase Components</span></span><br><span class="line"><span class="comment">// customVariables is customized variables used in the components theme</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ThemeButtonExample</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Container&gt;</span><br><span class="line">        &lt;Content&gt;</span><br><span class="line">          &lt;StyleProvider style=&#123;buttonTheme(customVariables)&#125;&gt;</span><br><span class="line">            &lt;Button primary&gt;</span><br><span class="line">              &lt;Text&gt; Primary &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>Button&gt;</span><br><span class="line">            &lt;Button success&gt;</span><br><span class="line">              &lt;Text&gt; Success &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>Button&gt;</span><br><span class="line">            &lt;Button info&gt;</span><br><span class="line">              &lt;Text&gt; Info &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>Button&gt;</span><br><span class="line">            &lt;Button warning&gt;</span><br><span class="line">              &lt;Text&gt; Warning &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>Button&gt;</span><br><span class="line">            &lt;Button danger&gt;</span><br><span class="line">              &lt;Text&gt; Danger &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>Button&gt;</span><br><span class="line">            &lt;Button small&gt;</span><br><span class="line">              &lt;Text&gt; Small &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>Button&gt;</span><br><span class="line">            &lt;Button&gt;</span><br><span class="line">              &lt;Text&gt; Default &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>Button&gt;</span><br><span class="line">            &lt;Button large&gt;</span><br><span class="line">              &lt;Text&gt; Large &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>Button&gt;</span><br><span class="line">          &lt;<span class="regexp">/StyleProvider&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Content&gt;</span><br><span class="line">      &lt;<span class="regexp">/Container&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="Theme-Your-Custom-Component"><a href="#Theme-Your-Custom-Component" class="headerlink" title="Theme Your Custom Component"></a>Theme Your Custom Component</h4><p>可是结合官方的 StyleSheet 提供的styles ,可以覆盖,如果冲突? 这个有覆盖这个还没具体测试,yourTheme感觉也是可以随便写,<br>CustomComponent就是你写的这个组件的给的命名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; View, Text, StyleSheet &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connectStyle &#125; <span class="keyword">from</span> <span class="string">'native-base'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// connect styles to props.style defined by the theme</span></span><br><span class="line">    <span class="keyword">const</span> styles = <span class="keyword">this</span>.props.style;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">        &lt;Text style=&#123;styles.textContent&#125;&gt;</span><br><span class="line">          Your Component <span class="keyword">with</span> <span class="keyword">static</span> style</span><br><span class="line">        &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> styles = &#123;</span><br><span class="line">  container: &#123;</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">    backgroundColor: <span class="string">'green'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  textContent: &#123;</span><br><span class="line">    fontSize: <span class="number">20</span>,</span><br><span class="line">    color: <span class="string">'red'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// connect the component to the theme</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connectStyle(<span class="string">'yourTheme.CustomComponent'</span>, styles)(CustomComponent);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> react-native </category>
          
          <category> theme </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react-native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tampermonkey</title>
      <link href="/2021/01/22/Tampermonkey/"/>
      <url>/2021/01/22/Tampermonkey/</url>
      
        <content type="html"><![CDATA[<p>最近又接触了油猴,可以定制化网站.比如去掉广告啦,排版文字加空格啦.</p><h4 id="Tampermonkey"><a href="#Tampermonkey" class="headerlink" title="Tampermonkey"></a>Tampermonkey</h4><p>类似的插件有好几个,然后其中最出名的我看的是Tampermonkey.他有几个优势.</p><ul><li>备份,在[实用工具]选项卡里面有几个选项,我是用的google cloud .试了一下还挺方便.不过他这个是增量的.可能需要删除一下重复,恢复的时候.</li><li>firefox ,chrome 都支持.不过听说chrome以后会禁用修改网页之类的.还是有风险的.不好的油猴插件有可能监控你的行为之类的.<strong>因为油猴脚本的灵活性和无限可能，不安全的油猴脚本是很危险的。比如它可以在你登录的账号页面上搜集信息，发送到后台，甚至直接下单，修改地址等等</strong></li><li>脚本站点（论坛）：<ul><li><a href="https://openuserjs.org/" target="_blank" rel="noopener">https://openuserjs.org/</a></li><li><a href="https://greasyfork.org/zh-CN" target="_blank" rel="noopener">https://greasyfork.org/zh-CN</a></li><li><a href="http://userscripts-mirror.org/" target="_blank" rel="noopener">http://userscripts-mirror.org/</a><h4 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h4></li></ul></li><li>现在想着是多看看人家怎么做的.然后就看了几个插件的源码.</li><li>没有找到好的教程…</li></ul><h5 id="Userscript-显示当前网站所有可用的UserJS脚本-Jaeger"><a href="#Userscript-显示当前网站所有可用的UserJS脚本-Jaeger" class="headerlink" title="Userscript+ : 显示当前网站所有可用的UserJS脚本 Jaeger"></a>Userscript+ : 显示当前网站所有可用的UserJS脚本 Jaeger</h5><p>我看的这个的<a href="https://github.com/jae-jae/Userscript-Plus/tree/develop" target="_blank" rel="noopener">githhub有源码</a>,</p><ul><li>依赖 <ul><li>iframejs  向iframe里面注入内如</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载依赖js库</span></span><br><span class="line">ljs.exec([<span class="string">'jQuery'</span>, <span class="string">'iframe'</span>, <span class="string">'psl'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fu = <span class="keyword">new</span> FetchUserjs();</span><br><span class="line">    fu.render();</span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure><ul><li>本地调试vue组件.<blockquote><p>主要是想弄明白他怎么单独用vue组件的..有点理解的似是而非…….跟之前理解的单独用vue组件感觉有点不一样.这个有点高端.相等于在一个页面中注入一个vue组件使用逻辑.先在frame里面注入html框架.然后再运行打包的vue组件js.要是我自己用webpack是实现的话感觉只有抄的水平.. </p></blockquote></li></ul><p>下载代码后.启动 <code>npm run watch:ui</code> 在dist目录生成vue的打包.然后可以 用 npm 包 serve 启动静态文件服务 <code>serve -l 5000</code>.然后替换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @resource     uiJs   https://raw.githubusercontent.com/jae-jae/Show-Site-All-UserJS/master/dist/ui.gf.js?_=1561104961645</span></span><br><span class="line"><span class="comment">// @resource     ui     https://raw.githubusercontent.com/jae-jae/Show-Site-All-UserJS/master/dist/ui.html?_=1561104961645</span></span><br></pre></td></tr></table></figure><p>为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @resource     uiJs   http://localhost:5000/ui.js?_=1561104961645</span></span><br><span class="line"><span class="comment">// @resource     ui      http://localhost:5000/ui.html?_=1561104961645</span></span><br></pre></td></tr></table></figure><p>可以加个断点之类的.这部分是调试这个插件用vue写的可选插件的table组件. 可以用vsCode 调试npm <code>npm run build --inspect-brk</code></p><ul><li>其他接口查询<br>其他的获取网站到底有多少可用插件之类的是在项目里面的 userscript目录里面.然后这个我看是放在插件的主入口里面.感觉有点麻烦,没细看.有时间再慢慢看看.</li></ul><h5 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h5><p>利用 github 的 Webhooks 同步发布到 greasyfork<br>初始化 import 脚本 <a href="https://greasyfork.org/en/import" target="_blank" rel="noopener">https://greasyfork.org/en/import</a><br>2. 开启 webhook 并应用 <a href="https://greasyfork.org/en/users/webhook-info" target="_blank" rel="noopener">https://greasyfork.org/en/users/webhook-info</a></p><p>按提示在 github 仓库的settings -&gt; webhooks创建 hook, 每次仓库更新就会同步更新到 greasyfork </p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://betacat.online/posts/2019-02-25/tampermonkey-user-script-with-vuejs/" target="_blank" rel="noopener">使用 VueJS 开发油猴（TamperMonkey）脚本</a></p>]]></content>
      
      
      <categories>
          
          <category> mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> plugin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>codewar-Scramblies</title>
      <link href="/2021/01/22/codewar-Scramblies/"/>
      <url>/2021/01/22/codewar-Scramblies/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.codewars.com/kata/55c04b4cc56a697bb0000048/solutions/python" target="_blank" rel="noopener">Scramblies</a></p><ul><li>要求<blockquote><p>前者是否包含后者的每个字符,</p></blockquote></li><li>我的<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 支持 集合运算,相减看是否包含 刷code war 题目 优化 看的</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span>  Counter</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scramble</span><span class="params">(s1, s2)</span>:</span></span><br><span class="line">  <span class="comment"># Counter basically creates a dictionary of counts and letters</span></span><br><span class="line">  <span class="comment"># Using set subtraction, we know that if anything is left over,</span></span><br><span class="line">  <span class="comment"># something exists in s2 that doesn't exist in s1</span></span><br><span class="line">  <span class="keyword">return</span> len(Counter(s2)- Counter(s1)) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">print(scramble(<span class="string">'rkqodlw'</span>, <span class="string">'world'</span>),)</span><br></pre></td></tr></table></figure></li><li>别人的<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scramble</span><span class="params">(s1,s2)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> set(s2):</span><br><span class="line">        <span class="keyword">if</span> s1.count(c) &lt; s2.count(c):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="comment"># 2 多用库</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> sub</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scramble</span><span class="params">(s1,s2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> sub(*map(Counter, (s2,s1)))</span><br><span class="line"><span class="comment"># 2 特别的语法</span></span><br><span class="line">scramble=<span class="keyword">lambda</span> a,b,c=__import__(<span class="string">'collections'</span>).Counter:<span class="keyword">not</span> c(b)-c(a)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> codewar </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何结合Django,React搭建前后台框架</title>
      <link href="/2021/01/22/djangoreact/"/>
      <url>/2021/01/22/djangoreact/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.valentinog.com/blog/tutorial-api-django-rest-react/" target="_blank" rel="noopener">setting up a Django project with React.</a></p><p>Django,React搭建前后台框架主要有以下思路(which are common to almost every web framework):</p><ol><li><p>React in its own “frontend” Django app: load a single HTML template and let React manage the frontend (difficulty: medium)</p><ul><li>作者推荐,</li></ul></li><li><p>Django REST as a standalone API + React as a standalone SPA (difficulty: hard, it involves JWT for authentication)<br>demo都没怎么有设置权限,,作者有给提供连接,<a href="https://docs.djangoproject.com/en/2.0/topics/auth/default/#module-django.contrib.auth.views" target="_blank" rel="noopener">Django的登陆</a>, <a href="http://drf.jiuyou.info/#/drf/authentication" target="_blank" rel="noopener">drf的权限和认证</a>,</p><ul><li><p><a href="https://scotch.io/tutorials/build-a-to-do-application-using-django-and-react#toc-setting-up-the-backend" target="_blank" rel="noopener">样例1</a></p><ul><li>这个通过<code>CORS_ORIGIN_WHITELIST</code> 这个设置可以控制权限?要不就跨域.</li><li>感觉这个挺好的,然后集合了下面的用户请求,</li></ul></li><li><p><a href="https://zhuanlan.zhihu.com/p/33546988" target="_blank" rel="noopener">样例2</a></p><blockquote><p>这个是利用framework 发送用户名密码返回token然后存储,然后之后的请求都带上这个token</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -d <span class="string">"username=admin&amp;password=xxxx"</span> http://localhost:8000/auth</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Mix and match: mini React apps inside Django templates (difficulty: simple)</p><ul><li>不推荐对新手</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redux-sega</title>
      <link href="/2021/01/22/redux-sega/"/>
      <url>/2021/01/22/redux-sega/</url>
      
        <content type="html"><![CDATA[<p>工作中用的是云谦大神封装的dva框架,其中集成了redux-sega .其特点是effect 中写带星号的方法处理异步事件.其中涉及的js的generator等知识点.之前看过原理.好久只是用,有点忘记了..最近感觉这个年纪还是多去想想其中的原理,要不心里还是挺慌张的.</p><h4 id="总体思路"><a href="#总体思路" class="headerlink" title="总体思路"></a>总体思路</h4><p>dva 里面处理异步的是放在effect 里面,然后里面都是 <code>function * {yield ....}</code><strong>这种generator</strong>,然后sega 能够驱动他去执行所有的yield.一口气执行完.感觉整个过程<a href="https://mp.weixin.qq.com/s?__biz=MzA4NjcyMDYzMg==&mid=2451805550&idx=1&sn=84c84d73789b960f845515d701a6e0d2&chksm=88135c79bf64d56fb27009192ec3d724645a1d375b9006b7c09bad0a2aa1a3446f823e90d928&scene=0&xtrack=1" target="_blank" rel="noopener" title="redux-saga，化异步为同步">redux-saga，化异步为同步</a>讲得很详细</p><h4 id="sega-名称由来"><a href="#sega-名称由来" class="headerlink" title="sega 名称由来"></a>sega 名称由来</h4><p>把多个事情分成小份,并串联起来</p><h4 id="副作用-名词解释"><a href="#副作用-名词解释" class="headerlink" title="副作用 名词解释"></a>副作用 名词解释</h4><p>会对外部产生影响,或结果不定的.与之相对的是纯函数.</p><h4 id="ES6-generator"><a href="#ES6-generator" class="headerlink" title="ES6 generator"></a>ES6 generator</h4><ol><li>产生原因改进最早的: 最早的地域回调写法</li><li>一开始Promise ,然后ES6 是<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* function()  &#123;</span><br><span class="line">  value &#x3D; yield step1()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>最新的是 async await</li></ol><ul><li>参考<br><a href="https://www.jianshu.com/p/e0778b004596" target="_blank" rel="noopener">理解 ES6 Generator 函数</a></li></ul><h4 id="sega-详解"><a href="#sega-详解" class="headerlink" title="sega 详解"></a>sega 详解</h4><h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><ul><li><a href="https://www.jianshu.com/p/05b73d826425" target="_blank" rel="noopener" title="Redux-Saga入门">Redux-Saga入门</a></li><li><a href="https://segmentfault.com/a/1190000016570727" target="_blank" rel="noopener" title="redux-saga实现与原理">redux-saga实现与原理</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> dva </category>
          
          <category> generator </category>
          
      </categories>
      
      
        <tags>
            
            <tag> generator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eclipse 使用 egit 版本控制 spring项目</title>
      <link href="/2020/09/22/egitEclipseSpring/"/>
      <url>/2020/09/22/egitEclipseSpring/</url>
      
        <content type="html"><![CDATA[<ol><li>搭建git 服务器<ul><li>不想共享出去代码（这个念头其实最好不要觉得自己代码真有多大价值。。。我是有台阿里ECS服务器，想着实践下,宽带1M,上传贼拉快，下载就100多K）。其实很简单。参考<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000" target="_blank" rel="noopener">搭建Git服务器</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> 382  01&#x2F;12&#x2F;16 16:48:52 adduser git</span><br><span class="line">384  01&#x2F;12&#x2F;16 16:50:52 cd &#x2F;home&#x2F;git&#x2F;</span><br><span class="line">388  01&#x2F;12&#x2F;16 16:51:05 mkdir wolife</span><br><span class="line">389  01&#x2F;12&#x2F;16 16:51:06 cd wolife&#x2F;</span><br><span class="line">394  01&#x2F;12&#x2F;16 16:51:38 git init --bare wolife.git</span><br><span class="line">396  01&#x2F;12&#x2F;16 16:52:01 chown -R git:git wolife.git&#x2F;</span><br><span class="line">397  01&#x2F;12&#x2F;16 16:52:07 vim &#x2F;etc&#x2F;passwd  &#x2F;&#x2F;这个是为了安全 设置除去远程登陆 。</span><br><span class="line">400  01&#x2F;12&#x2F;16 16:53:40 su  - git  &#x2F;&#x2F;设置一下 ssh-keygen 在&#x2F;home&#x2F;git&#x2F;.ssh&#x2F; 下  vim authorized_keys</span><br><span class="line">406  01&#x2F;12&#x2F;16 17:10:22 cd &#x2F;home&#x2F;git&#x2F;wolife</span><br></pre></td></tr></table></figure></li></ul></li><li>本机eclipse egit 同步 <ul><li>Team -&gt; share  然后做设置。</li><li>egit 一定要升级到最新版本，要不出一些莫名其妙的错误。</li><li><a href="http://www.jianshu.com/p/5a94ff737650" target="_blank" rel="noopener">主要是参考这个跟这个的配置做的，但是觉得有点老。。用来整理思路还是很好的</a></li><li>设置忽略文件配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> &#x2F;&#x2F;编写.gitignore文件</span><br><span class="line">             *.class</span><br><span class="line">              *.a</span><br><span class="line">              *.log</span><br><span class="line">              .svn&#x2F;</span><br><span class="line">              work&#x2F;</span><br><span class="line">              config.json</span><br><span class="line">              system.js</span><br><span class="line">              classes&#x2F;</span><br><span class="line">              class&#x2F;</span><br><span class="line">              bin&#x2F;</span><br><span class="line"> &#x2F;&#x2F;.gitignore为全局的方法</span><br><span class="line">在Git的命令行里输入： $ git config --global core.excludesfile ~&#x2F;.gitignore_global   输入完成后，可打开.gitconfig文件，会发现里面自动添加了 [plain]   </span><br><span class="line">      [core]  </span><br><span class="line">      excludesfile &#x3D; c:&#x2F;Users&#x2F;你的账户文件夹&#x2F;.gitignore_global</span><br></pre></td></tr></table></figure></li><li></li></ul></li><li>使用Git Flow实现git最优开发实践<br>感觉就是帮助用户简化git开发流。具体在连接有讲实践思路<a href="http://roclinux.cn/?p=2129" target="_blank" rel="noopener">GIT分支管理是一门艺术</a></li></ol><p><img src="http://upload-images.jianshu.io/upload_images/1178954-edcf9ff8dc35e5df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p><h2 id="TortoiseGit-海龟Git-是TortoiseSVN的Git版本"><a href="#TortoiseGit-海龟Git-是TortoiseSVN的Git版本" class="headerlink" title="TortoiseGit (海龟Git)是TortoiseSVN的Git版本"></a>TortoiseGit (海龟Git)是TortoiseSVN的Git版本</h2><p><a href="http://www.oschina.net/p/tortoisegit/" target="_blank" rel="noopener">http://www.oschina.net/p/tortoisegit/</a></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
          <category> 版本控制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> eclipse </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新海诚电影 你的名字</title>
      <link href="/2020/09/22/yourName/"/>
      <url>/2020/09/22/yourName/</url>
      
        <content type="html"><![CDATA[<p>  昨天12月2号电影中国首映。前一天买了票，然后在朋友圈宣传了一下。去看了之后，觉得还是没有失望。挺满足的。画质好，仔细想想音乐起到的作用也很大。<br>  我是几个月前从网路上下载的资源看的第一遍，但是就觉得很合我胃口，然后按照习惯，查了半天相关资料，看消息说因为片源外泄，不准备在中国上映了，还挺失落。发朋友圈宣传并哀悼了一下，说很希望能在电影院再看一遍。然后竟然梦想成真。<br>  故事还算讲得通，称为神作主要是觉得震惊，怎么画质这么好，影片里面的苹果手机是见过的最好看的样子。比真手机好看多了。音乐代入感很强。然后默默哀悼了一下，我最喜欢的宫崎骏爷爷做不错来这种画质。。。。但是后来看知乎推送，知道其实这种看着很真实的画面有部分是照相拍摄转换的。宫崎骏爷爷那可都是手绘的。看那篇知乎我还知道做一个严谨的动画，要几百个人做几年。。。。。这够开发一个操作系统了都。。做动画竟然这么难。</p>]]></content>
      
      
      <categories>
          
          <category> 电影 </category>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 你的名字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim键位配置</title>
      <link href="/2019/12/14/1/"/>
      <url>/2019/12/14/1/</url>
      
        <content type="html"><![CDATA[<p> 最近又折腾了一下vim,主要是之前把所有的ide都设置成了vim模式,但是感觉还是没感觉出为啥这么多人喜欢用vim.然后最近就研究了一下vim的键位映射.感觉如果是原生的vim编程确实不输于ide,配置插件.<br> 这里主要讲一下折腾了半天才弄明天的键位配置.<br> vim 可以设置任意的快捷键. 参考:help key-notation 查看相关文档,举例如下:</p><ul><li><Esc>代表Escape键:</li><li><CR>代表Enter键；</li><li><D>代表Command键。</li><li>Alt键可以使用<M-key>或<A-key>来表示。</li><li><C>代表Ctrl.<br>其他的相关的网上文档很多,自己看看就明白.但是有一个大坑是alt键.如果是安装了插件,安装文档说明比如&lt;M -i&gt; 但是你按了alt+i组合键完全不起作用,然后你就开始各种怀疑人生.主要原因,如果你是用的macos系统.alt键是被设置成了插入功能.在term2属性里面把alt映射为ECS+ 之后还需要在.vimrc里面做如下配置:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;macos 默认alt 是插入,配置term2 把alt应设置esc+,需要把英文字符都映射一下,就是让按&lt;M -字符 为alt+字符如上,循环写法如下</span><br><span class="line">&quot; ref https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;7501092&#x2F;can-i-map-alt-key-in-vim</span><br><span class="line">for i in range(97,122)</span><br><span class="line">  let c &#x3D; nr2char(i)</span><br><span class="line">  exec &quot;map \e&quot;.c.&quot; &lt;M-&quot;.c.&quot;&gt;&quot;</span><br><span class="line">  exec &quot;map! \e&quot;.c.&quot; &lt;M-&quot;.c.&quot;&gt;&quot;</span><br><span class="line">endfor</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> vim mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fabric</title>
      <link href="/2019/06/07/fabric/"/>
      <url>/2019/06/07/fabric/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install fabric3</span><br></pre></td></tr></table></figure><p>写在了 pythonlearn 里</p><blockquote><p>fabic 这个包主要是用在服务器交互里面,比如发布项目到 git 后,本机运行一个脚本,会连接服务器执行一堆下载,编译的事情</p></blockquote><h3 id="写了一个方便写模板的-fabric"><a href="#写了一个方便写模板的-fabric" class="headerlink" title="写了一个方便写模板的 fabric"></a>写了一个方便写模板的 fabric</h3><ul><li>场景<br>敲一个 fab new:test 生成一个 test.md 的文件 ,并把 hexo 模板写入进去,模板把文件名”test”<br>写入到模板里面.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># will generate a test.md  file</span><br><span class="line">fab new:test</span><br></pre></td></tr></table></figure><ul><li>config file<br>fabfile.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">自动化添加文件头</span></span><br><span class="line"><span class="string">参考  https://www.solarck.com/using-netlify-auto-deployed-pelican.html</span></span><br><span class="line"><span class="string">- 新建</span></span><br><span class="line"><span class="string">fab new:test,tag</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> fabric.contrib.console <span class="keyword">import</span> confirm</span><br><span class="line"><span class="keyword">from</span> fabric.utils <span class="keyword">import</span> abort</span><br><span class="line"><span class="keyword">from</span> fabric.colors <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">env.hosts = [<span class="string">''</span>]</span><br><span class="line">env.port = <span class="number">22</span></span><br><span class="line">env.user = <span class="string">''</span></span><br><span class="line">env.password = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Local path configuration (can be absolute or relative to fabfile)</span></span><br><span class="line">env.deploy_path = <span class="string">'./'</span></span><br><span class="line">env.content_path = <span class="string">'./'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">META = <span class="string">"""---</span></span><br><span class="line"><span class="string">title: &#123;:20&#125;</span></span><br><span class="line"><span class="string">Date: &#123;:%Y-%m-%d %H:%M&#125;</span></span><br><span class="line"><span class="string">categories: # 这里写的分类会自动汇集到 categories 页面上，分类可以多级</span></span><br><span class="line"><span class="string">- mac</span></span><br><span class="line"><span class="string">tags:</span></span><br><span class="line"><span class="string">- &#123;:10&#125;</span></span><br><span class="line"><span class="string">Authors: Jingzy</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(title=<span class="string">'new'</span>,tag=<span class="string">''</span>)</span>:</span></span><br><span class="line">    os.chdir(env.content_path)</span><br><span class="line">    file_name=title+<span class="string">'.md'</span></span><br><span class="line">    <span class="keyword">with</span> open(file_name, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(META.format(title,datetime.now(),tag))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preview</span><span class="params">()</span>:</span></span><br><span class="line">    local(<span class="string">'pelican -d -s pelicanconf.py'</span>)</span><br><span class="line">    os.chdir(env.deploy_path)</span><br><span class="line">    local(<span class="string">'python -m http.server 8000 -b 127.0.0.1'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">github</span><span class="params">(comMsg =<span class="string">''</span> )</span>:</span></span><br><span class="line">    local(<span class="string">'git add --all'</span>)</span><br><span class="line">    local(<span class="string">'git commit -m "&#123;&#125;  update at &#123;:%Y-%m-%d %H:%M&#125;"'</span>.format(comMsg,datetime.now()))</span><br><span class="line">    local(<span class="string">'git push origin master'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  fab  hexo_deploy</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hexo_deploy</span><span class="params">()</span>:</span></span><br><span class="line">run(<span class="string">'jg posthexo'</span>)</span><br><span class="line"><span class="comment"># run("git pull origin master")</span></span><br><span class="line">result =run(<span class="string">"pwd"</span>)</span><br><span class="line"><span class="keyword">with</span> cd(<span class="string">'/home/_posts'</span>):</span><br><span class="line">run(<span class="string">'pwd'</span>)  <span class="comment"># /tmp</span></span><br><span class="line">run(<span class="string">'git pull origin master '</span>)  <span class="comment"># /tmp</span></span><br><span class="line"><span class="keyword">with</span> cd(<span class="string">'/home/hexo'</span>):</span><br><span class="line">run(<span class="string">'pwd'</span>)</span><br><span class="line">run(<span class="string">'hexo g'</span>)</span><br><span class="line">run(<span class="string">'pwd'</span>)  <span class="comment"># /root</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm发布自己的ramda工具包</title>
      <link href="/2019/05/07/npm_publish/"/>
      <url>/2019/05/07/npm_publish/</url>
      
        <content type="html"><![CDATA[<h3 id="npm-发布"><a href="#npm-发布" class="headerlink" title="npm 发布"></a>npm 发布</h3><p>ps <a href="https://blog.bitsrc.io/sharing-and-reusing-vue-mixins-in-the-cloud-with-bit-dev-830104a48d0b" target="_blank" rel="noopener">最近看了个结合Bit.dev复用组件的文章</a><br>学习函数式编程,用的是<a href="https://adispring.coding.me/2017/10/21/What-Function-Should-I-Use/" target="_blank" rel="noopener">ramda函数库</a>,然后之前做项目都是把自己写的ramda的utils复制一份.近期总结时候发现,每个项目用到的函数都不一样,这么来回拷贝还挺麻烦的..就想到把自己的给发布出去,写项目的时候引用一下,就能保证是最新的了.稍微查了一下资料,还挺简单,步骤如下</p><ul><li><p>初始化<br>因为可能要用到ES6,<code>npm init</code>后,需要填入babel包.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br><span class="line">yarn add babel-cli babel-core babel-preset-es2015  ramda</span><br></pre></td></tr></table></figure></li><li><p>项目架构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">tree -a -I <span class="string">"dist|node_modules|.git"</span> -L  2 12</span><br><span class="line">ramda_util</span><br><span class="line">├── .babelrc</span><br><span class="line">├── .gitignore</span><br><span class="line">├── .npmignore</span><br><span class="line">├── LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">├── lib                <span class="comment"># 打包目录</span></span><br><span class="line">├── package.json</span><br><span class="line">├── src                  <span class="comment">#我的代码</span></span><br><span class="line">│   ├── ArrayUtils.js</span><br><span class="line">│   ├── ObjUtils.js</span><br><span class="line">│   ├── domOper.js</span><br><span class="line">│   └── index.js</span><br></pre></td></tr></table></figure></li><li><p>package.json<br>需要注意 尽量把依赖写在devdependies 里面,要不容易造成依赖两份,如react,导致错误.比如用户是react15,你用了react16里面的特性,那用户就启动不了了.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"compile"</span>: <span class="string">"babel -d lib/ src/"</span>,</span><br><span class="line">  "prepublish": "npm run compile",       ## 发布之前执行一下?</span><br><span class="line">  <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>npm 添加用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm adduser</span><br></pre></td></tr></table></figure></li><li><p>发布</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure></li><li><p>验证<br>打包组件，只需要运行 npm run build 就可以了。<br>接下来可以通过 npm link 把打包之后的组件引入到 global node_modules 中，然后在验证 demo 中再通过 npm link react-tiny-autosuggest 引入这个组件，并验证是否符合预期。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; At development directory</span><br><span class="line">npm run build</span><br><span class="line">npm link</span><br><span class="line"></span><br><span class="line">cd [test project folder]</span><br><span class="line">npm link react-tiny-autosuggest</span><br></pre></td></tr></table></figure><p>接下下 demo 里面就可以直接 import AutoSuggest from ‘react-tiny-autosuggest’ 了。</p></li><li><p>技巧<br>修改代码和readme.md后,执行 <code>npm  version patch</code> 就不用手工改版本号了.</p></li></ul><h3 id="我的工具"><a href="#我的工具" class="headerlink" title="我的工具"></a>我的工具</h3><p><a href="https://github.com/jingkeke/ramda_utils" target="_blank" rel="noopener">github地址</a></p><ul><li>使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123;ArrayUtils &#125; from &#39;ramda_util&#x2F;lib&#39;</span><br><span class="line">const result &#x3D; ArrayUtils.mergeWith([1,2,3],[2,3,4])</span><br><span class="line">console.log(&#96; $&#123;JSON.stringify(result,null,4)&#125;&#96;)</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3></li><li><a href="https://github.com/jingkeke/jzy-vue-utils" target="_blank" rel="noopener">我写的vue组件库</a></li><li><a href="https://juejin.im/post/5b95c2ed6fb9a05cd67699d1" target="_blank" rel="noopener">如何发布自己的NPM包（模块)</a></li><li><a href="https://blog.bitsrc.io/sharing-and-reusing-vue-mixins-in-the-cloud-with-bit-dev-830104a48d0b" target="_blank" rel="noopener">结合Bit.dev复用vue组件</a></li><li><a href="https://www.jianshu.com/p/db6113c94dbc" target="_blank" rel="noopener">如何创建一个前端 React 组件并发布到 NPM</a></li><li><a href="https://www.jianshu.com/p/aa4d99d76245" target="_blank" rel="noopener">发布react组件到npm总结</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> npm </category>
          
          <category> package </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript2.8下React组件模式学习笔记</title>
      <link href="/2019/02/07/react_ts/"/>
      <url>/2019/02/07/react_ts/</url>
      
        <content type="html"><![CDATA[<p>看<a href="https://github.com/ProtoTeam/blog/blob/master/201805/4.md" target="_blank" rel="noopener">ts 2.8下React组件模式</a>,结合typesscript 和react.这个看了好几遍,感觉挺经典,之前ts不熟,做下笔记.</p><h5 id="知识点一-泛型的默认值"><a href="#知识点一-泛型的默认值" class="headerlink" title="知识点一 泛型的默认值"></a>知识点一 泛型的默认值</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">type</span> ToggleableComponentProps&lt;P <span class="keyword">extends</span> object = &#123;<span class="string">'length'</span>:<span class="built_in">number</span> &#125;&gt; = &#123;</span><br><span class="line">  show: <span class="built_in">string</span></span><br><span class="line">  toggle: <span class="built_in">string</span></span><br><span class="line">&#125; &amp; P</span><br><span class="line"><span class="keyword">const</span> he = &#123; name: <span class="string">'jing'</span> &#125;</span><br><span class="line"><span class="keyword">const</span> aaa: ToggleableComponentProps = &#123;</span><br><span class="line">  show: <span class="string">'ff'</span>,</span><br><span class="line">  toggle: <span class="string">'length'</span>,</span><br><span class="line">  length: <span class="number">12</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><P extends object =object > 这块后面的object=object 是什么意思?</strong><br><code>P extends object</code> 连在一起读，P 必须是继承自 object 的泛型。后面的等于号，例如 interface Example&lt; T&gt; ，在使用时如果编译器没办法根据上下文推测 T，就必须手动指定，例如 <code>class MyClass implement Example&lt;string&gt;</code> ，等于号在这里的作用和ES6 的默认值是一样的用法，例如 T = number 如果外界没有指定泛型，编译器又无法根据上下文推测出结果时，就会采用这个默认类型 {‘length’:12 }</p><h5 id="知识点二-高阶组件包裹的话-static属性会消失"><a href="#知识点二-高阶组件包裹的话-static属性会消失" class="headerlink" title="知识点二 高阶组件包裹的话,static属性会消失"></a>知识点二 高阶组件包裹的话,static属性会消失</h5><ul><li><a href="https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over" target="_blank" rel="noopener">官网解释</a></li><li>解决方案<ul><li><a href="https://www.npmjs.com/package/hoist-non-react-statics" target="_blank" rel="noopener">hoist-non-react-statics </a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客搭建,我的参考资料及说明</title>
      <link href="/2017/10/07/hexo/"/>
      <url>/2017/10/07/hexo/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jingzy.top:3001/" target="_blank" rel="noopener">coco的hexo博客</a>:这个是我的个人博客，自己有个服务器，就放在了服务器上一份。下面是我参考的文章，如果踩过坑，说明了一下。</p><a id="more"></a><h3 id="next主题"><a href="#next主题" class="headerlink" title="next主题"></a>next主题</h3><ul><li>~~<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">next主题官网</a>~~<ul><li>2019年看现在开始用<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">next迁移的新库</a></li></ul></li><li><a href="https://123sunxiaolin.github.io/2016/08/27/%E5%BE%92%E6%89%8B%E6%95%99%E4%BD%A0%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">参考这篇文章搭建的next 主题</a></li><li><a href="https://gitalk.github.io" target="_blank" rel="noopener">参考这篇文章为Next主题添加Gitalk</a><ul><li><a href="%3Chttps://www.wenjunjiang.win/2017/07/02/gitment%E8%AF%84%E8%AE%BA%E6%A8%A1%E5%9D%97%E6%8E%A5%E5%85%A5hexo/%3E">gitment评论</a>,这个主要是觉得创意好,借用githhub的评论;用的是这个<a href="%3Chttps://github.com/imsun/gitment/issues/170#issuecomment-450138213%3E">链接</a>解决现在的bug ,object ProgressEvent错误 感觉这个有点坑,也明白<strong>免费的东东是最贵的</strong>道理,人家说不维护就不维护,然后自己要花好长时间去查资料,一个劲怀疑人生一边浪费生命,所以说人生苦短,我用python…O(∩_∩)O哈哈哈~.<ul><li>报错弹窗[object ProgressEvent],基本就是有个请求无法访问了,可以参考上面地址好心人提供的gitment.js 替换成那个.我的是个用的next主题,所以需要修改./themes/next/layout/_third-party/comments/gitment.swig 这个模板文件里的js.</li></ul></li></ul></li><li><a href="http://www.jianshu.com/p/78c218f9d1e7" target="_blank" rel="noopener">参考这篇文章设置首页只显示索引，显得紧凑美观</a><ul><li>显示效果：<br><img src="http://upload-images.jianshu.io/upload_images/1178954-837f49ef756944e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste\_Image.png"></li></ul></li></ul><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul><li><p>摘要<br>建议使用 &lt; !– more –&gt;（即第一种方式），除了可以精确控制需要显示的摘录内容以外， 这种方式也可以让 Hexo 中的插件更好的识别。<br>自动形成摘要，在主题配置文件中添加<br>  auto_excerpt:</p><pre><code>enable: truelength: 150</code></pre></li><li><p>创建 “关于我” 页面<br>新建一个 about 页面：<br><code>hexo new page &quot;about&quot;</code><br>菜单显示 about 链接，在主题的 _configy.yml 设置中将 menu 中 about 前面的注释去掉即可。</p><p>menu:<br>  home: /<br>  archives: /archives<br>  tags: /tags<br>  about: /about</p></li><li><p><a href="https://github.com/iissnan/hexo-theme-next/wiki/%E5%88%9B%E5%BB%BA%E5%88%86%E7%B1%BB%E9%A1%B5%E9%9D%A2" target="_blank" rel="noopener">创建分类页面</a></p></li><li><p>一键生成md头格式<br>首先在/scaffolds/post.md文件中添加：</p><pre><code>---title: {{ title }}date: {{ date }}tags:categories:copyright: truepermalink: 01top: 0---</code></pre><p>然后使用 hexo new就可以一键生成新文章的头格式了，不用手动去搬运或者书写。相当方便。</p></li><li><p>设定置顶/顺序<br><code>vim node_modules/hexo-generator-index/lib/generator.js</code> 改成下面</p><pre><code>&apos;use strict&apos;;var pagination = require(&apos;hexo-pagination&apos;);module.exports = function(locals){  var config = this.config;  var posts = locals.posts;    posts.data = posts.data.sort(function(a, b) {        if(a.top &amp;&amp; b.top) { // 两篇文章top都有定义            if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排            else return b.top - a.top; // 否则按照top值降序排        }        else if(a.top &amp;&amp; !b.top) { // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）            return -1;        }        else if(!a.top &amp;&amp; b.top) {            return 1;        }        else return b.date - a.date; // 都没定义按照文章日期降序排    });  var paginationDir = config.pagination_dir || &apos;page&apos;;  return pagination(&apos;&apos;, posts, {    perPage: config.index_generator.per_page,    layout: [&apos;index&apos;, &apos;archive&apos;],    format: paginationDir + &apos;/%d/&apos;,    data: {      __index: true    }  });};</code></pre><p>在文章中添加 top 值，数值越大文章越靠前（默认是0，按时间排序），如</p><pre><code>---title: 解决Charles乱码问题date: 2017-05-22 22:45:48tags: 技巧categories: 技巧copyright: truetop: 100---</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2016总结.md</title>
      <link href="/2017/01/07/2016summary/"/>
      <url>/2017/01/07/2016summary/</url>
      
        <content type="html"><![CDATA[<ul><li><p>项目<br>1月从北京项目回来做购物网站,5月开始是wolife，8月半路做了些微信企业号。之后是wolife全面维护。</p></li><li><p>知识</p><ul><li>springMVC</li><li>maven</li><li>hbuilder  app</li><li>git</li></ul></li><li><p>生活</p><ul><li>加了一群飞鱼人，生活从空间到微信。</li><li>整天在等公交车时候用印象笔记写日记。</li><li>用黑莓看订阅邮件，学到了不少东西。<a id="more"></a></li></ul></li><li><p>读书基本都是通过kindle看的。公交车上看半天。12月之后又很少看了。</p><ul><li>买了kindle 书《<a href="https://www.amazon.cn/gp/product/B01J9MZPPO/ref=oh_aui_d_detailpage_o01_?ie=UTF8&psc=1" target="_blank" rel="noopener">软技能 代码之外的生存指南</a>》。讲一个美国it 男35岁之前退休。写博客 ，健身，投资买房（买了十几套。。。最后就靠这个退休的。。。。）</li><li>基本东野奎吾的书，都挺好看的。《解忧杂货铺》《嫌疑人X的献身》</li><li>《偷影子的人》 非常好看，开头像是给小孩看的，后面完全就没这种感觉了。</li><li>我的阿勒泰 ，作者写得很清新，有双善于发现的眼睛。</li><li>又看了几本哈利波特。</li><li>看了《安伯志》10册中3册半。</li><li>天才在左疯子在右。当时夜深人静看的，很有感觉。</li><li>Spring技术内幕：深入解析​Spring架构与设计原理（第​2版） (揭秘系列丛书)</li><li>人月神话(二十周年纪念版)  忍着看完了，感觉吧。。。。看的网络版，感觉有点排版不好，好些没法理解，正版要100多还没有kindle版。人月的意思是将工作换算成xx人月的工作量。</li><li>微信公众号推送，最主要的比如杜蕾斯邀请名人回答问题。很有意思。是通过小飞关注的。</li><li>有个飞鱼也开通了公众号，每篇都跟她聊几句。</li></ul></li><li><p>娱乐</p><ul><li>现在综艺只追 天天向上。天天兄弟换血了。大老师加盟，别的综艺大老师穿着花哨，但是天天向上穿得还是很正常的。挺不错。</li><li>fate 超级好看。</li><li><a href="http://www.bilibili.com/video/av4475874" target="_blank" rel="noopener">【合集】全金属狂潮</a></li><li>年底 新海诚你的名字。先是9月看的网上版本的。然后12月3号去电影院看的。</li><li>汪涵的 火星情报局，火了薛之谦。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7：nginx的常用配置</title>
      <link href="/2016/11/27/nginxcommConfig/"/>
      <url>/2016/11/27/nginxcommConfig/</url>
      
        <content type="html"><![CDATA[<h3 id="场景一：服务器放一些视频，可以查看视频列表，你只希望有权限的人可以看。"><a href="#场景一：服务器放一些视频，可以查看视频列表，你只希望有权限的人可以看。" class="headerlink" title="场景一：服务器放一些视频，可以查看视频列表，你只希望有权限的人可以看。"></a>场景一：服务器放一些视频，可以查看视频列表，你只希望有权限的人可以看。</h3><ul><li><p>开启Nginx的目录文件列表功能效果截图：<br><img src="http://upload-images.jianshu.io/upload_images/1178954-adb7c3208f5371b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p></li><li><p>nginx实现访问网站或目录密码认证保护 效果截图：</p><a id="more"></a><p><img src="http://upload-images.jianshu.io/upload_images/1178954-d7f911f2b6fcf555.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p></li><li><p>配置</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1，生成密码文件：</span><br><span class="line"> sudo htpasswd  -c -d &#x2F;etc&#x2F;nginx&#x2F;pass_file  guest</span><br><span class="line">2，修改 &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf：</span><br><span class="line">     ## 视频地址加权限  </span><br><span class="line">      location ~ &#x2F;video &#123;</span><br><span class="line">        auth_basic &quot;Restricted&quot;;</span><br><span class="line">        auth_basic_user_file &#x2F;etc&#x2F;nginx&#x2F;pass_filecoco;  ##请使用绝对路径</span><br><span class="line">        root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;   ##host 地址，不然认证通过之后，找不到对应的文件</span><br><span class="line">           </span><br><span class="line">           autoindex on;##自动显示目录</span><br><span class="line">           autoindex_exact_size off;##人性化方式显示文件大小否则以byte显示</span><br><span class="line">           autoindex_localtime on;##按服务器时间显示，否则以gmt时间显示</span><br><span class="line">           &#125; </span><br><span class="line">3， 验证配置是否正确</span><br><span class="line"> sudo  &#x2F;usr&#x2F;sbin&#x2F;nginx -t -c &#x2F;etc&#x2F;nginx&#x2F;nginx.conf</span><br><span class="line">4， 重启nginx</span><br><span class="line">sudo systemctl  restart nginx</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.cnblogs.com/siqi/archive/2012/10/07/2713732.html" target="_blank" rel="noopener">开启Nginx的目录文件列表功能</a></li><li><a href="http://blog.csdn.net/babydavic/article/details/8880868" target="_blank" rel="noopener">nginx实现访问网站或目录密码认证保护</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>puzzle HTML5实现，上手超赞练习</title>
      <link href="/2016/11/26/puzzle_HTML5%E5%AE%9E%E7%8E%B0%EF%BC%8C%E4%B8%8A%E6%89%8B%E8%B6%85%E8%B5%9E%E7%BB%83%E4%B9%A0/"/>
      <url>/2016/11/26/puzzle_HTML5%E5%AE%9E%E7%8E%B0%EF%BC%8C%E4%B8%8A%E6%89%8B%E8%B6%85%E8%B5%9E%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="演示图片："><a href="#演示图片：" class="headerlink" title="演示图片："></a>演示图片：</h2><p><img src="/img/puzzleH5.png" alt=""></p><h2 id="main-html，puzzle-css，puzzle-js-三个文件分别存放html-对应的格式，js控制。"><a href="#main-html，puzzle-css，puzzle-js-三个文件分别存放html-对应的格式，js控制。" class="headerlink" title="main.html，puzzle.css，puzzle.js 三个文件分别存放html,对应的格式，js控制。"></a>main.html，puzzle.css，puzzle.js 三个文件分别存放html,对应的格式，js控制。</h2><h2 id="其中重点如下"><a href="#其中重点如下" class="headerlink" title="其中重点如下"></a>其中重点如下</h2><ul><li>puzzle.css<br>  transition：0.3s是设置过渡时间，这是css3的属性，它会让属性改变呈现过渡动画，所以<br>当我们改变方块的位置时，它会有一个动画，我们不必自己编写动画函数</li><li>puzzle.js<ul><li>移动控制思路<br> 大div套9个小div,大div用一个array变量d 标识 .代表一个9宫格排序。每个数组变量值代表当前格子被哪个移动板占据。如果值与array下标一致，则表明排好序。另用一个array 代表每个宫格位置的移动板可以移动的的宫格的坐标</li></ul></li></ul><h2 id="程序演示连接"><a href="#程序演示连接" class="headerlink" title="程序演示连接"></a><a href="https://jsfiddle.net/jingcoco/4skkh18m/" target="_blank" rel="noopener">程序演示连接</a></h2>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提高Linux工作效率的bash技巧</title>
      <link href="/2016/11/24/%E6%8F%90%E9%AB%98Linux%E5%B7%A5%E4%BD%9C%E6%95%88%E7%8E%87%E7%9A%84bash%E6%8A%80%E5%B7%A7/"/>
      <url>/2016/11/24/%E6%8F%90%E9%AB%98Linux%E5%B7%A5%E4%BD%9C%E6%95%88%E7%8E%87%E7%9A%84bash%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<p>看的<a href="https://www.shiyanlou.com/questions/4297" target="_blank" rel="noopener">这篇文章</a>，感觉有效果的是下面几个。</p><h2 id="帮你保持历史操作，跳回到你经常使用的目录。"><a href="#帮你保持历史操作，跳回到你经常使用的目录。" class="headerlink" title="帮你保持历史操作，跳回到你经常使用的目录。"></a>帮你保持历史操作，跳回到你经常使用的目录。</h2><p>下面是我的配置文件里脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"># USAGE:</span><br><span class="line"># s bookmarkname - saves the curr dir as bookmarkname</span><br><span class="line"># g bookmarkname - jumps to the that bookmark</span><br><span class="line"># g b[TAB] - tab completion is available</span><br><span class="line"># l - list all bookmarks</span><br><span class="line"></span><br><span class="line"># save current directory to bookmarks</span><br><span class="line">touch ~&#x2F;.sdirs</span><br><span class="line">function s &#123;</span><br><span class="line">  cat ~&#x2F;.sdirs | grep -v &quot;export DIR_$1&#x3D;&quot; &gt; ~&#x2F;.sdirs1</span><br><span class="line">  mv ~&#x2F;.sdirs1 ~&#x2F;.sdirs</span><br><span class="line">  echo &quot;export DIR_$1&#x3D;$PWD&quot; &gt;&gt; ~&#x2F;.sdirs</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># jump to bookmark</span><br><span class="line">function g &#123;</span><br><span class="line">  source ~&#x2F;.sdirs</span><br><span class="line">  cd $(eval $(echo echo $(echo \$DIR_$1)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># list bookmarks with dirnam</span><br><span class="line">function l &#123;</span><br><span class="line">  source ~&#x2F;.sdirs</span><br><span class="line">  env | grep &quot;^DIR_&quot; | cut -c5- | grep &quot;^.*&#x3D;&quot;</span><br><span class="line">&#125;</span><br><span class="line"># list bookmarks without dirname</span><br><span class="line">function _l &#123;</span><br><span class="line">  source ~&#x2F;.sdirs</span><br><span class="line">  env | grep &quot;^DIR_&quot; | cut -c5- | grep &quot;^.*&#x3D;&quot; | cut -f1 -d &quot;&#x3D;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># completion command for g</span><br><span class="line">function _gcomp &#123;</span><br><span class="line">    local curw</span><br><span class="line">    COMPREPLY&#x3D;()</span><br><span class="line">    curw&#x3D;$&#123;COMP_WORDS[COMP_CWORD]&#125;</span><br><span class="line">    COMPREPLY&#x3D;($(compgen -W &#39;&#96;_l&#96;&#39; -- $curw))</span><br><span class="line">    return 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># bind completion command for g to _gcomp</span><br><span class="line">complete -F _gcomp g</span><br></pre></td></tr></table></figure><p>##创建自己的命令包.<br>通过脚本，我可以将ssh key拷贝到任何网站服务器——只需要键入dur keyuser@somehost.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">function dur &#123;</span><br><span class="line">  case $1 in</span><br><span class="line">  clone|cl)</span><br><span class="line">    git clone git@bitbucket.org:nicolapaolucci&#x2F;$2.git</span><br><span class="line">    ;;</span><br><span class="line">  move|mv)</span><br><span class="line">    git remote add bitbucket git@bitbucket.org:nicolapaolucci&#x2F;$(basename $(pwd)).git</span><br><span class="line">    git push --all bitbucket</span><br><span class="line">    ;;</span><br><span class="line">  trackall|tr)</span><br><span class="line">    #track all remote branches of a project</span><br><span class="line">    for remote in $(git branch -r | grep -v master ); do git checkout --track $remote ; done</span><br><span class="line">    ;;</span><br><span class="line">  key|k)</span><br><span class="line">    #track all remote branches of a project</span><br><span class="line">    ssh $2 &#39;mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh&#x2F;authorized_keys&#39; &lt; ~&#x2F;.ssh&#x2F;id_rsa.pub</span><br><span class="line">    ;;</span><br><span class="line">  fun|f)</span><br><span class="line">    #list all custom bash functions defined</span><br><span class="line">    typeset -F | col 3 | grep -v _ | xargs | fold -sw 60</span><br><span class="line">    ;;</span><br><span class="line">  def|d)</span><br><span class="line">    #show definition of function $1</span><br><span class="line">    typeset -f $2</span><br><span class="line">    ;;</span><br><span class="line">  help|h|*)</span><br><span class="line">    echo &quot;[dur]dn shell automation tools&quot;</span><br><span class="line">    echo &quot;commands available:&quot;</span><br><span class="line">    echo &quot; [cl]one, [mv|move]&quot;</span><br><span class="line">    echo &quot; [f]fun lists all bash functions defined in .bashrc&quot;</span><br><span class="line">    echo &quot; [def] &lt;fun&gt; lists definition of function defined in .bashrc&quot;</span><br><span class="line">    echo &quot; [k]ey &lt;host&gt; copies ssh key to target host&quot;</span><br><span class="line">    echo &quot; [tr]ackall], [h]elp&quot;</span><br><span class="line">    ;;</span><br><span class="line">  esac</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
